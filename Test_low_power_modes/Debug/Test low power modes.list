
Test low power modes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b5c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003c1c  08003c1c  00004c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c88  08003c88  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c88  08003c88  00004c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c90  08003c90  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c90  08003c90  00004c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c94  08003c94  00004c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c98  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08003ca4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003ca4  000051c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cecb  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002216  00000000  00000000  00011eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00014118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a3  00000000  00000000  00014c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012622  00000000  00000000  000154eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec89  00000000  00000000  00027b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070c0f  00000000  00000000  00036796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a73a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002740  00000000  00000000  000a73e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000a9b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c04 	.word	0x08003c04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003c04 	.word	0x08003c04

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fbfb 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f8ad 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 fa23 	bl	8000900 <MX_GPIO_Init>
  MX_ADC_Init();
 80004ba:	f000 f931 	bl	8000720 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 80004be:	f000 f995 	bl	80007ec <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80004c2:	f000 f9c3 	bl	800084c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80004c6:	f000 f9f1 	bl	80008ac <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* ### Indicator light : STM32 is ON ### */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80004ca:	23a0      	movs	r3, #160	@ 0xa0
 80004cc:	05db      	lsls	r3, r3, #23
 80004ce:	2201      	movs	r2, #1
 80004d0:	2102      	movs	r1, #2
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 f96a 	bl	80017ac <HAL_GPIO_WritePin>

  /* ### Wake up from STAND-BY mode ### */
  /* STEP 1 : Check if the stand by (SBF - Stand By Flag) mode is set => Test if the STM is waking up from SB mode */
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80004d8:	4b46      	ldr	r3, [pc, #280]	@ (80005f4 <main+0x14c>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2202      	movs	r2, #2
 80004de:	4013      	ands	r3, r2
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d13e      	bne.n	8000562 <main+0xba>
  {
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); //Clear SBF
 80004e4:	4b43      	ldr	r3, [pc, #268]	@ (80005f4 <main+0x14c>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4b42      	ldr	r3, [pc, #264]	@ (80005f4 <main+0x14c>)
 80004ea:	2108      	movs	r1, #8
 80004ec:	430a      	orrs	r2, r1
 80004ee:	601a      	str	r2, [r3, #0]

	  /* STEP 2 : Detect wake up source (Wake-up pin or RTC Alarm) */
	  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF)) {
 80004f0:	4b41      	ldr	r3, [pc, #260]	@ (80005f8 <main+0x150>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	68da      	ldr	r2, [r3, #12]
 80004f6:	2380      	movs	r3, #128	@ 0x80
 80004f8:	00db      	lsls	r3, r3, #3
 80004fa:	4013      	ands	r3, r2
 80004fc:	d003      	beq.n	8000506 <main+0x5e>
		  wake_up_type = 1; // Wake up from RTC Alarm
 80004fe:	4b3f      	ldr	r3, [pc, #252]	@ (80005fc <main+0x154>)
 8000500:	2201      	movs	r2, #1
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	e002      	b.n	800050c <main+0x64>
	  }
	  else {
		  wake_up_type = 2; // Wake up from Reset Pin
 8000506:	4b3d      	ldr	r3, [pc, #244]	@ (80005fc <main+0x154>)
 8000508:	2202      	movs	r2, #2
 800050a:	701a      	strb	r2, [r3, #0]
	  }

	  /* STEP 3 : Blink led depending on the wake up source (Wake-up pin or RTC Alarm) */
	  for (int i=0 ; i<wake_up_type ; i++) /* 1 blink ==> RTC Alarm WU ; 2 blink ==> Wake Up Pin */
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	e018      	b.n	8000544 <main+0x9c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000512:	4b3b      	ldr	r3, [pc, #236]	@ (8000600 <main+0x158>)
 8000514:	2201      	movs	r2, #1
 8000516:	2108      	movs	r1, #8
 8000518:	0018      	movs	r0, r3
 800051a:	f001 f947 	bl	80017ac <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800051e:	23fa      	movs	r3, #250	@ 0xfa
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fc30 	bl	8000d88 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000528:	4b35      	ldr	r3, [pc, #212]	@ (8000600 <main+0x158>)
 800052a:	2200      	movs	r2, #0
 800052c:	2108      	movs	r1, #8
 800052e:	0018      	movs	r0, r3
 8000530:	f001 f93c 	bl	80017ac <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000534:	23fa      	movs	r3, #250	@ 0xfa
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fc25 	bl	8000d88 <HAL_Delay>
	  for (int i=0 ; i<wake_up_type ; i++) /* 1 blink ==> RTC Alarm WU ; 2 blink ==> Wake Up Pin */
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3301      	adds	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b2d      	ldr	r3, [pc, #180]	@ (80005fc <main+0x154>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	001a      	movs	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4293      	cmp	r3, r2
 800054e:	dbe0      	blt.n	8000512 <main+0x6a>
	  }

	  /* STEP 4 : Disable the wake up pin (A0) */
	  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	0018      	movs	r0, r3
 8000556:	f001 f97f 	bl	8001858 <HAL_PWR_DisableWakeUpPin>

	  /* STEP 5 : Disable RTC Wake Up */
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800055a:	4b27      	ldr	r3, [pc, #156]	@ (80005f8 <main+0x150>)
 800055c:	0018      	movs	r0, r3
 800055e:	f002 fa79 	bl	8002a54 <HAL_RTCEx_DeactivateWakeUpTimer>
  }

  /* ### Program ### */
  HAL_Delay(3000);
 8000562:	4b28      	ldr	r3, [pc, #160]	@ (8000604 <main+0x15c>)
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fc0f 	bl	8000d88 <HAL_Delay>
  /* ### End program ### */

  /* ### Enter STAND-BY mode ### */
  /* STEP 1 : Clear the Wake-Up (WU) flag and RTC Wake-Up Timer (WUTF) flag*/
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); //Clear Wake Up Flag
 800056a:	4b22      	ldr	r3, [pc, #136]	@ (80005f4 <main+0x14c>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <main+0x14c>)
 8000570:	2104      	movs	r1, #4
 8000572:	430a      	orrs	r2, r1
 8000574:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF); //Clear RTC Wake Up Flag
 8000576:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <main+0x150>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	22ff      	movs	r2, #255	@ 0xff
 800057e:	401a      	ands	r2, r3
 8000580:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <main+0x150>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4920      	ldr	r1, [pc, #128]	@ (8000608 <main+0x160>)
 8000586:	430a      	orrs	r2, r1
 8000588:	60da      	str	r2, [r3, #12]

  /* STEP 2 : Blink led */
  for (int i=0 ; i<20 ; i++)
 800058a:	2300      	movs	r3, #0
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	e00a      	b.n	80005a6 <main+0xfe>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000590:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <main+0x158>)
 8000592:	2108      	movs	r1, #8
 8000594:	0018      	movs	r0, r3
 8000596:	f001 f926 	bl	80017e6 <HAL_GPIO_TogglePin>
  	HAL_Delay(100);
 800059a:	2064      	movs	r0, #100	@ 0x64
 800059c:	f000 fbf4 	bl	8000d88 <HAL_Delay>
  for (int i=0 ; i<20 ; i++)
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b13      	cmp	r3, #19
 80005aa:	ddf1      	ble.n	8000590 <main+0xe8>
  }
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <main+0x158>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	2108      	movs	r1, #8
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 f8fa 	bl	80017ac <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 80005b8:	23fa      	movs	r3, #250	@ 0xfa
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 fbe3 	bl	8000d88 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <main+0x158>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	2108      	movs	r1, #8
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 f8ef 	bl	80017ac <HAL_GPIO_WritePin>

  /* STEP 3 : Enable the Wake-Up (WU) pin */
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80005ce:	2380      	movs	r3, #128	@ 0x80
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 f930 	bl	8001838 <HAL_PWR_EnableWakeUpPin>
   * To configure the wake up timer to 5s the WakeUpCounter is set to 0x2710
   * RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
   * Wake-up time base = 16 /(32kHz) = 0.0005 seconds
   * ==> WakeUpCounter = ~5s/0.0005s = 20000 = 0x2710
   */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x9C40, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80005d8:	490c      	ldr	r1, [pc, #48]	@ (800060c <main+0x164>)
 80005da:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <main+0x150>)
 80005dc:	2200      	movs	r2, #0
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 f960 	bl	80028a4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <main+0x144>
  {
	 Error_Handler();
 80005e8:	f000 f9f4 	bl	80009d4 <Error_Handler>
  }

  /* STEP 5 : Enter Stand-by mode */
  HAL_PWR_EnterSTANDBYMode();
 80005ec:	f001 f946 	bl	800187c <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	46c0      	nop			@ (mov r8, r8)
 80005f2:	e7fd      	b.n	80005f0 <main+0x148>
 80005f4:	40007000 	.word	0x40007000
 80005f8:	20000194 	.word	0x20000194
 80005fc:	200001b8 	.word	0x200001b8
 8000600:	50000400 	.word	0x50000400
 8000604:	00000bb8 	.word	0x00000bb8
 8000608:	fffffb7f 	.word	0xfffffb7f
 800060c:	00009c40 	.word	0x00009c40

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b099      	sub	sp, #100	@ 0x64
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	242c      	movs	r4, #44	@ 0x2c
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2334      	movs	r3, #52	@ 0x34
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f003 fac3 	bl	8003bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000626:	2318      	movs	r3, #24
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	0018      	movs	r0, r3
 800062c:	2314      	movs	r3, #20
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f003 fabb 	bl	8003bac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000636:	003b      	movs	r3, r7
 8000638:	0018      	movs	r0, r3
 800063a:	2318      	movs	r3, #24
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f003 fab4 	bl	8003bac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	4b33      	ldr	r3, [pc, #204]	@ (8000714 <SystemClock_Config+0x104>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a33      	ldr	r2, [pc, #204]	@ (8000718 <SystemClock_Config+0x108>)
 800064a:	401a      	ands	r2, r3
 800064c:	4b31      	ldr	r3, [pc, #196]	@ (8000714 <SystemClock_Config+0x104>)
 800064e:	2180      	movs	r1, #128	@ 0x80
 8000650:	0109      	lsls	r1, r1, #4
 8000652:	430a      	orrs	r2, r1
 8000654:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000656:	f001 f8e1 	bl	800181c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800065a:	4b30      	ldr	r3, [pc, #192]	@ (800071c <SystemClock_Config+0x10c>)
 800065c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800065e:	4b2f      	ldr	r3, [pc, #188]	@ (800071c <SystemClock_Config+0x10c>)
 8000660:	492d      	ldr	r1, [pc, #180]	@ (8000718 <SystemClock_Config+0x108>)
 8000662:	400a      	ands	r2, r1
 8000664:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000666:	193b      	adds	r3, r7, r4
 8000668:	2206      	movs	r2, #6
 800066a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2280      	movs	r2, #128	@ 0x80
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	0021      	movs	r1, r4
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2201      	movs	r2, #1
 800067a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2210      	movs	r2, #16
 8000680:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2202      	movs	r2, #2
 8000686:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	02d2      	lsls	r2, r2, #11
 8000694:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2280      	movs	r2, #128	@ 0x80
 800069a:	03d2      	lsls	r2, r2, #15
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 f901 	bl	80018a8 <HAL_RCC_OscConfig>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006aa:	f000 f993 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	2118      	movs	r1, #24
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	220f      	movs	r2, #15
 80006b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2203      	movs	r2, #3
 80006ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2101      	movs	r1, #1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fc64 	bl	8001fa0 <HAL_RCC_ClockConfig>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006dc:	f000 f97a 	bl	80009d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 80006e0:	003b      	movs	r3, r7
 80006e2:	2226      	movs	r2, #38	@ 0x26
 80006e4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006e6:	003b      	movs	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2280      	movs	r2, #128	@ 0x80
 80006f6:	0252      	lsls	r2, r2, #9
 80006f8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fa:	003b      	movs	r3, r7
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fe73 	bl	80023e8 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000706:	f000 f965 	bl	80009d4 <Error_Handler>
  }
}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b019      	add	sp, #100	@ 0x64
 8000710:	bd90      	pop	{r4, r7, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	40007000 	.word	0x40007000
 8000718:	ffffe7ff 	.word	0xffffe7ff
 800071c:	40021000 	.word	0x40021000

08000720 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	003b      	movs	r3, r7
 8000728:	0018      	movs	r0, r3
 800072a:	2308      	movs	r3, #8
 800072c:	001a      	movs	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	f003 fa3c 	bl	8003bac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <MX_ADC_Init+0xc0>)
 8000736:	4a2b      	ldr	r2, [pc, #172]	@ (80007e4 <MX_ADC_Init+0xc4>)
 8000738:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <MX_ADC_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <MX_ADC_Init+0xc0>)
 8000742:	2280      	movs	r2, #128	@ 0x80
 8000744:	05d2      	lsls	r2, r2, #23
 8000746:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000748:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <MX_ADC_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800074e:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <MX_ADC_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000754:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <MX_ADC_Init+0xc0>)
 8000756:	2201      	movs	r2, #1
 8000758:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075a:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <MX_ADC_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <MX_ADC_Init+0xc0>)
 8000762:	2220      	movs	r2, #32
 8000764:	2100      	movs	r1, #0
 8000766:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000768:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <MX_ADC_Init+0xc0>)
 800076a:	2221      	movs	r2, #33	@ 0x21
 800076c:	2100      	movs	r1, #0
 800076e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <MX_ADC_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_ADC_Init+0xc0>)
 8000778:	22c2      	movs	r2, #194	@ 0xc2
 800077a:	32ff      	adds	r2, #255	@ 0xff
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_ADC_Init+0xc0>)
 8000780:	222c      	movs	r2, #44	@ 0x2c
 8000782:	2100      	movs	r1, #0
 8000784:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_ADC_Init+0xc0>)
 8000788:	2204      	movs	r2, #4
 800078a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_ADC_Init+0xc0>)
 800078e:	2200      	movs	r2, #0
 8000790:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000792:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <MX_ADC_Init+0xc0>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_ADC_Init+0xc0>)
 800079a:	2200      	movs	r2, #0
 800079c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800079e:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <MX_ADC_Init+0xc0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_ADC_Init+0xc0>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fb12 	bl	8000dd0 <HAL_ADC_Init>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80007b0:	f000 f910 	bl	80009d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007b4:	003b      	movs	r3, r7
 80007b6:	4a0c      	ldr	r2, [pc, #48]	@ (80007e8 <MX_ADC_Init+0xc8>)
 80007b8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007ba:	003b      	movs	r3, r7
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	0152      	lsls	r2, r2, #5
 80007c0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c2:	003a      	movs	r2, r7
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_ADC_Init+0xc0>)
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fc75 	bl	80010b8 <HAL_ADC_ConfigChannel>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80007d2:	f000 f8ff 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	20000028 	.word	0x20000028
 80007e4:	40012400 	.word	0x40012400
 80007e8:	1c000080 	.word	0x1c000080

080007ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007f0:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_LPUART1_UART_Init+0x54>)
 80007f2:	4a14      	ldr	r2, [pc, #80]	@ (8000844 <MX_LPUART1_UART_Init+0x58>)
 80007f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_LPUART1_UART_Init+0x54>)
 80007f8:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <MX_LPUART1_UART_Init+0x5c>)
 80007fa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80007fc:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <MX_LPUART1_UART_Init+0x54>)
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	0552      	lsls	r2, r2, #21
 8000802:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_LPUART1_UART_Init+0x54>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <MX_LPUART1_UART_Init+0x54>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_LPUART1_UART_Init+0x54>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <MX_LPUART1_UART_Init+0x54>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_LPUART1_UART_Init+0x54>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000822:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <MX_LPUART1_UART_Init+0x54>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <MX_LPUART1_UART_Init+0x54>)
 800082a:	0018      	movs	r0, r3
 800082c:	f002 f9ae 	bl	8002b8c <HAL_UART_Init>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000834:	f000 f8ce 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	20000084 	.word	0x20000084
 8000844:	40004800 	.word	0x40004800
 8000848:	00033324 	.word	0x00033324

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000852:	4a15      	ldr	r2, [pc, #84]	@ (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000858:	22e1      	movs	r2, #225	@ 0xe1
 800085a:	0252      	lsls	r2, r2, #9
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088e:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000890:	0018      	movs	r0, r3
 8000892:	f002 f97b 	bl	8002b8c <HAL_UART_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800089a:	f000 f89b 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2000010c 	.word	0x2000010c
 80008a8:	40004400 	.word	0x40004400

080008ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_RTC_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <MX_RTC_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_RTC_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_RTC_Init+0x4c>)
 80008be:	227f      	movs	r2, #127	@ 0x7f
 80008c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <MX_RTC_Init+0x4c>)
 80008c4:	22ff      	movs	r2, #255	@ 0xff
 80008c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008c8:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_RTC_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008ce:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <MX_RTC_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_RTC_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <MX_RTC_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <MX_RTC_Init+0x4c>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f001 feac 	bl	8002640 <HAL_RTC_Init>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80008ec:	f000 f872 	bl	80009d4 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	20000194 	.word	0x20000194
 80008fc:	40002800 	.word	0x40002800

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b089      	sub	sp, #36	@ 0x24
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	240c      	movs	r4, #12
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2314      	movs	r3, #20
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f003 f94b 	bl	8003bac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b2d      	ldr	r3, [pc, #180]	@ (80009cc <MX_GPIO_Init+0xcc>)
 8000918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800091a:	4b2c      	ldr	r3, [pc, #176]	@ (80009cc <MX_GPIO_Init+0xcc>)
 800091c:	2104      	movs	r1, #4
 800091e:	430a      	orrs	r2, r1
 8000920:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000922:	4b2a      	ldr	r3, [pc, #168]	@ (80009cc <MX_GPIO_Init+0xcc>)
 8000924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000926:	2204      	movs	r2, #4
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b27      	ldr	r3, [pc, #156]	@ (80009cc <MX_GPIO_Init+0xcc>)
 8000930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000932:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <MX_GPIO_Init+0xcc>)
 8000934:	2101      	movs	r1, #1
 8000936:	430a      	orrs	r2, r1
 8000938:	62da      	str	r2, [r3, #44]	@ 0x2c
 800093a:	4b24      	ldr	r3, [pc, #144]	@ (80009cc <MX_GPIO_Init+0xcc>)
 800093c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093e:	2201      	movs	r2, #1
 8000940:	4013      	ands	r3, r2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <MX_GPIO_Init+0xcc>)
 8000948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800094a:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <MX_GPIO_Init+0xcc>)
 800094c:	2102      	movs	r1, #2
 800094e:	430a      	orrs	r2, r1
 8000950:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000952:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <MX_GPIO_Init+0xcc>)
 8000954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000956:	2202      	movs	r2, #2
 8000958:	4013      	ands	r3, r2
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800095e:	23a0      	movs	r3, #160	@ 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2200      	movs	r2, #0
 8000964:	2102      	movs	r1, #2
 8000966:	0018      	movs	r0, r3
 8000968:	f000 ff20 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 800096e:	2200      	movs	r2, #0
 8000970:	2108      	movs	r1, #8
 8000972:	0018      	movs	r0, r3
 8000974:	f000 ff1a 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2202      	movs	r2, #2
 800097c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2201      	movs	r2, #1
 8000982:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	193a      	adds	r2, r7, r4
 8000992:	23a0      	movs	r3, #160	@ 0xa0
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fd99 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800099e:	0021      	movs	r1, r4
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2208      	movs	r2, #8
 80009a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2201      	movs	r2, #1
 80009aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <MX_GPIO_Init+0xd0>)
 80009bc:	0019      	movs	r1, r3
 80009be:	0010      	movs	r0, r2
 80009c0:	f000 fd86 	bl	80014d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c4:	46c0      	nop			@ (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b009      	add	sp, #36	@ 0x24
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	50000400 	.word	0x50000400

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	e7fd      	b.n	80009dc <Error_Handler+0x8>

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e4:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <HAL_MspInit+0x24>)
 80009e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <HAL_MspInit+0x24>)
 80009ea:	2101      	movs	r1, #1
 80009ec:	430a      	orrs	r2, r1
 80009ee:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <HAL_MspInit+0x24>)
 80009f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009f4:	4b03      	ldr	r3, [pc, #12]	@ (8000a04 <HAL_MspInit+0x24>)
 80009f6:	2180      	movs	r1, #128	@ 0x80
 80009f8:	0549      	lsls	r1, r1, #21
 80009fa:	430a      	orrs	r2, r1
 80009fc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b089      	sub	sp, #36	@ 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	240c      	movs	r4, #12
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	0018      	movs	r0, r3
 8000a16:	2314      	movs	r3, #20
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f003 f8c6 	bl	8003bac <memset>
  if(hadc->Instance==ADC1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a14      	ldr	r2, [pc, #80]	@ (8000a78 <HAL_ADC_MspInit+0x70>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d122      	bne.n	8000a70 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_ADC_MspInit+0x74>)
 8000a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <HAL_ADC_MspInit+0x74>)
 8000a30:	2180      	movs	r1, #128	@ 0x80
 8000a32:	0089      	lsls	r1, r1, #2
 8000a34:	430a      	orrs	r2, r1
 8000a36:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <HAL_ADC_MspInit+0x74>)
 8000a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <HAL_ADC_MspInit+0x74>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	430a      	orrs	r2, r1
 8000a42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a44:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <HAL_ADC_MspInit+0x74>)
 8000a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2280      	movs	r2, #128	@ 0x80
 8000a54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2203      	movs	r2, #3
 8000a5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	193a      	adds	r2, r7, r4
 8000a64:	23a0      	movs	r3, #160	@ 0xa0
 8000a66:	05db      	lsls	r3, r3, #23
 8000a68:	0011      	movs	r1, r2
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fd30 	bl	80014d0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b009      	add	sp, #36	@ 0x24
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	40012400 	.word	0x40012400
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b08b      	sub	sp, #44	@ 0x2c
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	2414      	movs	r4, #20
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	2314      	movs	r3, #20
 8000a90:	001a      	movs	r2, r3
 8000a92:	2100      	movs	r1, #0
 8000a94:	f003 f88a 	bl	8003bac <memset>
  if(huart->Instance==LPUART1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a38      	ldr	r2, [pc, #224]	@ (8000b80 <HAL_UART_MspInit+0x100>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d132      	bne.n	8000b08 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aa2:	4b38      	ldr	r3, [pc, #224]	@ (8000b84 <HAL_UART_MspInit+0x104>)
 8000aa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000aa6:	4b37      	ldr	r3, [pc, #220]	@ (8000b84 <HAL_UART_MspInit+0x104>)
 8000aa8:	2180      	movs	r1, #128	@ 0x80
 8000aaa:	02c9      	lsls	r1, r1, #11
 8000aac:	430a      	orrs	r2, r1
 8000aae:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b34      	ldr	r3, [pc, #208]	@ (8000b84 <HAL_UART_MspInit+0x104>)
 8000ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ab4:	4b33      	ldr	r3, [pc, #204]	@ (8000b84 <HAL_UART_MspInit+0x104>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000abc:	4b31      	ldr	r3, [pc, #196]	@ (8000b84 <HAL_UART_MspInit+0x104>)
 8000abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ac8:	0021      	movs	r1, r4
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	220c      	movs	r2, #12
 8000ace:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2203      	movs	r2, #3
 8000ae0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2206      	movs	r2, #6
 8000ae6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	187a      	adds	r2, r7, r1
 8000aea:	23a0      	movs	r3, #160	@ 0xa0
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	0011      	movs	r1, r2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 fced 	bl	80014d0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	201d      	movs	r0, #29
 8000afc:	f000 fc2e 	bl	800135c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000b00:	201d      	movs	r0, #29
 8000b02:	f000 fc40 	bl	8001386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b06:	e037      	b.n	8000b78 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8000b88 <HAL_UART_MspInit+0x108>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d132      	bne.n	8000b78 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <HAL_UART_MspInit+0x104>)
 8000b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b16:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <HAL_UART_MspInit+0x104>)
 8000b18:	2180      	movs	r1, #128	@ 0x80
 8000b1a:	0289      	lsls	r1, r1, #10
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <HAL_UART_MspInit+0x104>)
 8000b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b24:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <HAL_UART_MspInit+0x104>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b2c:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <HAL_UART_MspInit+0x104>)
 8000b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b30:	2201      	movs	r2, #1
 8000b32:	4013      	ands	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b38:	2114      	movs	r1, #20
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	22c0      	movs	r2, #192	@ 0xc0
 8000b3e:	00d2      	lsls	r2, r2, #3
 8000b40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2202      	movs	r2, #2
 8000b46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2203      	movs	r2, #3
 8000b52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2204      	movs	r2, #4
 8000b58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	187a      	adds	r2, r7, r1
 8000b5c:	23a0      	movs	r3, #160	@ 0xa0
 8000b5e:	05db      	lsls	r3, r3, #23
 8000b60:	0011      	movs	r1, r2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 fcb4 	bl	80014d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	201c      	movs	r0, #28
 8000b6e:	f000 fbf5 	bl	800135c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b72:	201c      	movs	r0, #28
 8000b74:	f000 fc07 	bl	8001386 <HAL_NVIC_EnableIRQ>
}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b00b      	add	sp, #44	@ 0x2c
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	40004800 	.word	0x40004800
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40004400 	.word	0x40004400

08000b8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <HAL_RTC_MspInit+0x38>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d10e      	bne.n	8000bbc <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <HAL_RTC_MspInit+0x3c>)
 8000ba0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ba2:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <HAL_RTC_MspInit+0x3c>)
 8000ba4:	2180      	movs	r1, #128	@ 0x80
 8000ba6:	02c9      	lsls	r1, r1, #11
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f000 fbd3 	bl	800135c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f000 fbe5 	bl	8001386 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000bbc:	46c0      	nop			@ (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40002800 	.word	0x40002800
 8000bc8:	40021000 	.word	0x40021000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	e7fd      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	46c0      	nop			@ (mov r8, r8)
 8000bda:	e7fd      	b.n	8000bd8 <HardFault_Handler+0x4>

08000bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000be0:	46c0      	nop			@ (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f8ac 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	46c0      	nop			@ (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000c04:	4b03      	ldr	r3, [pc, #12]	@ (8000c14 <RTC_IRQHandler+0x14>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f001 ff88 	bl	8002b1c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000c0c:	46c0      	nop			@ (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	20000194 	.word	0x20000194

08000c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <USART2_IRQHandler+0x14>)
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f002 f808 	bl	8002c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	2000010c 	.word	0x2000010c

08000c30 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c34:	4b03      	ldr	r3, [pc, #12]	@ (8000c44 <LPUART1_IRQHandler+0x14>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 fffc 	bl	8002c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	20000084 	.word	0x20000084

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	46c0      	nop			@ (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c54:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c56:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c58:	f7ff fff6 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f002 ff9b 	bl	8003bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fc0f 	bl	80004a8 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
   ldr   r0, =_estack
 8000c8c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c98:	08003c98 	.word	0x08003c98
  ldr r2, =_sbss
 8000c9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ca0:	200001c0 	.word	0x200001c0

08000ca4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_COMP_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <HAL_Init+0x3c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <HAL_Init+0x3c>)
 8000cba:	2140      	movs	r1, #64	@ 0x40
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f811 	bl	8000ce8 <HAL_InitTick>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d003      	beq.n	8000cd2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	e001      	b.n	8000cd6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd2:	f7ff fe85 	bl	80009e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	40022000 	.word	0x40022000

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <HAL_InitTick+0x5c>)
 8000cf2:	681c      	ldr	r4, [r3, #0]
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <HAL_InitTick+0x60>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	23fa      	movs	r3, #250	@ 0xfa
 8000cfc:	0098      	lsls	r0, r3, #2
 8000cfe:	f7ff fa03 	bl	8000108 <__udivsi3>
 8000d02:	0003      	movs	r3, r0
 8000d04:	0019      	movs	r1, r3
 8000d06:	0020      	movs	r0, r4
 8000d08:	f7ff f9fe 	bl	8000108 <__udivsi3>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 fb49 	bl	80013a6 <HAL_SYSTICK_Config>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e00f      	b.n	8000d3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d80b      	bhi.n	8000d3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	2301      	movs	r3, #1
 8000d26:	425b      	negs	r3, r3
 8000d28:	2200      	movs	r2, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 fb16 	bl	800135c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_InitTick+0x64>)
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b003      	add	sp, #12
 8000d42:	bd90      	pop	{r4, r7, pc}
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000004 	.word	0x20000004

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_IncTick+0x1c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	001a      	movs	r2, r3
 8000d5a:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	18d2      	adds	r2, r2, r3
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d62:	601a      	str	r2, [r3, #0]
}
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	200001bc 	.word	0x200001bc

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b02      	ldr	r3, [pc, #8]	@ (8000d84 <HAL_GetTick+0x10>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	200001bc 	.word	0x200001bc

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff fff0 	bl	8000d74 <HAL_GetTick>
 8000d94:	0003      	movs	r3, r0
 8000d96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <HAL_Delay+0x44>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	001a      	movs	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	189b      	adds	r3, r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	f7ff ffe0 	bl	8000d74 <HAL_GetTick>
 8000db4:	0002      	movs	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b004      	add	sp, #16
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e159      	b.n	8001096 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10a      	bne.n	8000e00 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2250      	movs	r2, #80	@ 0x50
 8000df4:	2100      	movs	r1, #0
 8000df6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff fe04 	bl	8000a08 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e04:	2210      	movs	r2, #16
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b10      	cmp	r3, #16
 8000e0a:	d005      	beq.n	8000e18 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2204      	movs	r2, #4
 8000e14:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e16:	d00b      	beq.n	8000e30 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e1c:	2210      	movs	r2, #16
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2250      	movs	r2, #80	@ 0x50
 8000e28:	2100      	movs	r1, #0
 8000e2a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e132      	b.n	8001096 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e34:	4a9a      	ldr	r2, [pc, #616]	@ (80010a0 <HAL_ADC_Init+0x2d0>)
 8000e36:	4013      	ands	r3, r2
 8000e38:	2202      	movs	r2, #2
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	2203      	movs	r2, #3
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d108      	bne.n	8000e60 <HAL_ADC_Init+0x90>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <HAL_ADC_Init+0x90>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <HAL_ADC_Init+0x92>
 8000e60:	2300      	movs	r3, #0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d149      	bne.n	8000efa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	23c0      	movs	r3, #192	@ 0xc0
 8000e6c:	061b      	lsls	r3, r3, #24
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d00b      	beq.n	8000e8a <HAL_ADC_Init+0xba>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	2380      	movs	r3, #128	@ 0x80
 8000e78:	05db      	lsls	r3, r3, #23
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d005      	beq.n	8000e8a <HAL_ADC_Init+0xba>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	2380      	movs	r3, #128	@ 0x80
 8000e84:	061b      	lsls	r3, r3, #24
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d111      	bne.n	8000eae <HAL_ADC_Init+0xde>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	0892      	lsrs	r2, r2, #2
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6919      	ldr	r1, [r3, #16]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	611a      	str	r2, [r3, #16]
 8000eac:	e014      	b.n	8000ed8 <HAL_ADC_Init+0x108>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	0892      	lsrs	r2, r2, #2
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	4b79      	ldr	r3, [pc, #484]	@ (80010a4 <HAL_ADC_Init+0x2d4>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b78      	ldr	r3, [pc, #480]	@ (80010a4 <HAL_ADC_Init+0x2d4>)
 8000ec4:	4978      	ldr	r1, [pc, #480]	@ (80010a8 <HAL_ADC_Init+0x2d8>)
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	4b76      	ldr	r3, [pc, #472]	@ (80010a4 <HAL_ADC_Init+0x2d4>)
 8000ecc:	6819      	ldr	r1, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	4b74      	ldr	r3, [pc, #464]	@ (80010a4 <HAL_ADC_Init+0x2d4>)
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2118      	movs	r1, #24
 8000ee4:	438a      	bics	r2, r1
 8000ee6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68d9      	ldr	r1, [r3, #12]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000efa:	4b6a      	ldr	r3, [pc, #424]	@ (80010a4 <HAL_ADC_Init+0x2d4>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b69      	ldr	r3, [pc, #420]	@ (80010a4 <HAL_ADC_Init+0x2d4>)
 8000f00:	496a      	ldr	r1, [pc, #424]	@ (80010ac <HAL_ADC_Init+0x2dc>)
 8000f02:	400a      	ands	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000f06:	4b67      	ldr	r3, [pc, #412]	@ (80010a4 <HAL_ADC_Init+0x2d4>)
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0e:	065a      	lsls	r2, r3, #25
 8000f10:	4b64      	ldr	r3, [pc, #400]	@ (80010a4 <HAL_ADC_Init+0x2d4>)
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	2380      	movs	r3, #128	@ 0x80
 8000f1e:	055b      	lsls	r3, r3, #21
 8000f20:	4013      	ands	r3, r2
 8000f22:	d108      	bne.n	8000f36 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2180      	movs	r1, #128	@ 0x80
 8000f30:	0549      	lsls	r1, r1, #21
 8000f32:	430a      	orrs	r2, r1
 8000f34:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	495b      	ldr	r1, [pc, #364]	@ (80010b0 <HAL_ADC_Init+0x2e0>)
 8000f42:	400a      	ands	r2, r1
 8000f44:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68d9      	ldr	r1, [r3, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d101      	bne.n	8000f5c <HAL_ADC_Init+0x18c>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	e000      	b.n	8000f5e <HAL_ADC_Init+0x18e>
 8000f5c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f5e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2020      	movs	r0, #32
 8000f64:	5c1b      	ldrb	r3, [r3, r0]
 8000f66:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f68:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	202c      	movs	r0, #44	@ 0x2c
 8000f6e:	5c1b      	ldrb	r3, [r3, r0]
 8000f70:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f72:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f78:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000f80:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f88:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f96:	23c2      	movs	r3, #194	@ 0xc2
 8000f98:	33ff      	adds	r3, #255	@ 0xff
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d00b      	beq.n	8000fb6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68d9      	ldr	r1, [r3, #12]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2221      	movs	r2, #33	@ 0x21
 8000fba:	5c9b      	ldrb	r3, [r3, r2]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d11a      	bne.n	8000ff6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	5c9b      	ldrb	r3, [r3, r2]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d109      	bne.n	8000fde <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2180      	movs	r1, #128	@ 0x80
 8000fd6:	0249      	lsls	r1, r1, #9
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	e00b      	b.n	8000ff6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fee:	2201      	movs	r2, #1
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d11f      	bne.n	800103e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	492a      	ldr	r1, [pc, #168]	@ (80010b4 <HAL_ADC_Init+0x2e4>)
 800100a:	400a      	ands	r2, r1
 800100c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6919      	ldr	r1, [r3, #16]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800101c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001022:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2101      	movs	r1, #1
 8001038:	430a      	orrs	r2, r1
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	e00e      	b.n	800105c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	2201      	movs	r2, #1
 8001046:	4013      	ands	r3, r2
 8001048:	2b01      	cmp	r3, #1
 800104a:	d107      	bne.n	800105c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	691a      	ldr	r2, [r3, #16]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2101      	movs	r1, #1
 8001058:	438a      	bics	r2, r1
 800105a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2107      	movs	r1, #7
 8001068:	438a      	bics	r2, r1
 800106a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6959      	ldr	r1, [r3, #20]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001088:	2203      	movs	r2, #3
 800108a:	4393      	bics	r3, r2
 800108c:	2201      	movs	r2, #1
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	fffffefd 	.word	0xfffffefd
 80010a4:	40012708 	.word	0x40012708
 80010a8:	ffc3ffff 	.word	0xffc3ffff
 80010ac:	fdffffff 	.word	0xfdffffff
 80010b0:	fffe0219 	.word	0xfffe0219
 80010b4:	fffffc03 	.word	0xfffffc03

080010b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2250      	movs	r2, #80	@ 0x50
 80010c6:	5c9b      	ldrb	r3, [r3, r2]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x18>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e06c      	b.n	80011aa <HAL_ADC_ConfigChannel+0xf2>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2250      	movs	r2, #80	@ 0x50
 80010d4:	2101      	movs	r1, #1
 80010d6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2204      	movs	r2, #4
 80010e0:	4013      	ands	r3, r2
 80010e2:	d00b      	beq.n	80010fc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e8:	2220      	movs	r2, #32
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2250      	movs	r2, #80	@ 0x50
 80010f4:	2100      	movs	r1, #0
 80010f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e056      	b.n	80011aa <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a2c      	ldr	r2, [pc, #176]	@ (80011b4 <HAL_ADC_ConfigChannel+0xfc>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d028      	beq.n	8001158 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	035b      	lsls	r3, r3, #13
 8001112:	0b5a      	lsrs	r2, r3, #13
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	02db      	lsls	r3, r3, #11
 8001124:	4013      	ands	r3, r2
 8001126:	d009      	beq.n	800113c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001128:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <HAL_ADC_ConfigChannel+0x100>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <HAL_ADC_ConfigChannel+0x100>)
 800112e:	2180      	movs	r1, #128	@ 0x80
 8001130:	0409      	lsls	r1, r1, #16
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001136:	200a      	movs	r0, #10
 8001138:	f000 f844 	bl	80011c4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2380      	movs	r3, #128	@ 0x80
 8001142:	029b      	lsls	r3, r3, #10
 8001144:	4013      	ands	r3, r2
 8001146:	d02b      	beq.n	80011a0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_ADC_ConfigChannel+0x100>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <HAL_ADC_ConfigChannel+0x100>)
 800114e:	2180      	movs	r1, #128	@ 0x80
 8001150:	03c9      	lsls	r1, r1, #15
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e023      	b.n	80011a0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	035b      	lsls	r3, r3, #13
 8001164:	0b5b      	lsrs	r3, r3, #13
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	400a      	ands	r2, r1
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2380      	movs	r3, #128	@ 0x80
 8001176:	02db      	lsls	r3, r3, #11
 8001178:	4013      	ands	r3, r2
 800117a:	d005      	beq.n	8001188 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800117c:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <HAL_ADC_ConfigChannel+0x100>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <HAL_ADC_ConfigChannel+0x100>)
 8001182:	490e      	ldr	r1, [pc, #56]	@ (80011bc <HAL_ADC_ConfigChannel+0x104>)
 8001184:	400a      	ands	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	4013      	ands	r3, r2
 8001192:	d005      	beq.n	80011a0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <HAL_ADC_ConfigChannel+0x100>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <HAL_ADC_ConfigChannel+0x100>)
 800119a:	4909      	ldr	r1, [pc, #36]	@ (80011c0 <HAL_ADC_ConfigChannel+0x108>)
 800119c:	400a      	ands	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2250      	movs	r2, #80	@ 0x50
 80011a4:	2100      	movs	r1, #0
 80011a6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	0018      	movs	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b002      	add	sp, #8
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	00001001 	.word	0x00001001
 80011b8:	40012708 	.word	0x40012708
 80011bc:	ff7fffff 	.word	0xff7fffff
 80011c0:	ffbfffff 	.word	0xffbfffff

080011c4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <ADC_DelayMicroSecond+0x38>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	490b      	ldr	r1, [pc, #44]	@ (8001200 <ADC_DelayMicroSecond+0x3c>)
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7fe ff98 	bl	8000108 <__udivsi3>
 80011d8:	0003      	movs	r3, r0
 80011da:	001a      	movs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4353      	muls	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80011e2:	e002      	b.n	80011ea <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f9      	bne.n	80011e4 <ADC_DelayMicroSecond+0x20>
  }
}
 80011f0:	46c0      	nop			@ (mov r8, r8)
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	20000000 	.word	0x20000000
 8001200:	000f4240 	.word	0x000f4240

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	0002      	movs	r2, r0
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b7f      	cmp	r3, #127	@ 0x7f
 8001216:	d809      	bhi.n	800122c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	001a      	movs	r2, r3
 800121e:	231f      	movs	r3, #31
 8001220:	401a      	ands	r2, r3
 8001222:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <__NVIC_EnableIRQ+0x30>)
 8001224:	2101      	movs	r1, #1
 8001226:	4091      	lsls	r1, r2
 8001228:	000a      	movs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
  }
}
 800122c:	46c0      	nop			@ (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	0002      	movs	r2, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b7f      	cmp	r3, #127	@ 0x7f
 800124c:	d828      	bhi.n	80012a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124e:	4a2f      	ldr	r2, [pc, #188]	@ (800130c <__NVIC_SetPriority+0xd4>)
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b25b      	sxtb	r3, r3
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	33c0      	adds	r3, #192	@ 0xc0
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	589b      	ldr	r3, [r3, r2]
 800125e:	1dfa      	adds	r2, r7, #7
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	0011      	movs	r1, r2
 8001264:	2203      	movs	r2, #3
 8001266:	400a      	ands	r2, r1
 8001268:	00d2      	lsls	r2, r2, #3
 800126a:	21ff      	movs	r1, #255	@ 0xff
 800126c:	4091      	lsls	r1, r2
 800126e:	000a      	movs	r2, r1
 8001270:	43d2      	mvns	r2, r2
 8001272:	401a      	ands	r2, r3
 8001274:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	019b      	lsls	r3, r3, #6
 800127a:	22ff      	movs	r2, #255	@ 0xff
 800127c:	401a      	ands	r2, r3
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	0018      	movs	r0, r3
 8001284:	2303      	movs	r3, #3
 8001286:	4003      	ands	r3, r0
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128c:	481f      	ldr	r0, [pc, #124]	@ (800130c <__NVIC_SetPriority+0xd4>)
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b25b      	sxtb	r3, r3
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	430a      	orrs	r2, r1
 8001298:	33c0      	adds	r3, #192	@ 0xc0
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800129e:	e031      	b.n	8001304 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001310 <__NVIC_SetPriority+0xd8>)
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	0019      	movs	r1, r3
 80012a8:	230f      	movs	r3, #15
 80012aa:	400b      	ands	r3, r1
 80012ac:	3b08      	subs	r3, #8
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3306      	adds	r3, #6
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	3304      	adds	r3, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	1dfa      	adds	r2, r7, #7
 80012bc:	7812      	ldrb	r2, [r2, #0]
 80012be:	0011      	movs	r1, r2
 80012c0:	2203      	movs	r2, #3
 80012c2:	400a      	ands	r2, r1
 80012c4:	00d2      	lsls	r2, r2, #3
 80012c6:	21ff      	movs	r1, #255	@ 0xff
 80012c8:	4091      	lsls	r1, r2
 80012ca:	000a      	movs	r2, r1
 80012cc:	43d2      	mvns	r2, r2
 80012ce:	401a      	ands	r2, r3
 80012d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	019b      	lsls	r3, r3, #6
 80012d6:	22ff      	movs	r2, #255	@ 0xff
 80012d8:	401a      	ands	r2, r3
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	0018      	movs	r0, r3
 80012e0:	2303      	movs	r3, #3
 80012e2:	4003      	ands	r3, r0
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e8:	4809      	ldr	r0, [pc, #36]	@ (8001310 <__NVIC_SetPriority+0xd8>)
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	001c      	movs	r4, r3
 80012f0:	230f      	movs	r3, #15
 80012f2:	4023      	ands	r3, r4
 80012f4:	3b08      	subs	r3, #8
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	430a      	orrs	r2, r1
 80012fa:	3306      	adds	r3, #6
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	18c3      	adds	r3, r0, r3
 8001300:	3304      	adds	r3, #4
 8001302:	601a      	str	r2, [r3, #0]
}
 8001304:	46c0      	nop			@ (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b003      	add	sp, #12
 800130a:	bd90      	pop	{r4, r7, pc}
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	1e5a      	subs	r2, r3, #1
 8001320:	2380      	movs	r3, #128	@ 0x80
 8001322:	045b      	lsls	r3, r3, #17
 8001324:	429a      	cmp	r2, r3
 8001326:	d301      	bcc.n	800132c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001328:	2301      	movs	r3, #1
 800132a:	e010      	b.n	800134e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132c:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <SysTick_Config+0x44>)
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	3a01      	subs	r2, #1
 8001332:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001334:	2301      	movs	r3, #1
 8001336:	425b      	negs	r3, r3
 8001338:	2103      	movs	r1, #3
 800133a:	0018      	movs	r0, r3
 800133c:	f7ff ff7c 	bl	8001238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <SysTick_Config+0x44>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <SysTick_Config+0x44>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	210f      	movs	r1, #15
 8001368:	187b      	adds	r3, r7, r1
 800136a:	1c02      	adds	r2, r0, #0
 800136c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	187b      	adds	r3, r7, r1
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b25b      	sxtb	r3, r3
 8001376:	0011      	movs	r1, r2
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff ff5d 	bl	8001238 <__NVIC_SetPriority>
}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b004      	add	sp, #16
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	0002      	movs	r2, r0
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b25b      	sxtb	r3, r3
 8001398:	0018      	movs	r0, r3
 800139a:	f7ff ff33 	bl	8001204 <__NVIC_EnableIRQ>
}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff ffaf 	bl	8001314 <SysTick_Config>
 80013b6:	0003      	movs	r3, r0
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b002      	add	sp, #8
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c8:	230f      	movs	r3, #15
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2225      	movs	r2, #37	@ 0x25
 80013d4:	5c9b      	ldrb	r3, [r3, r2]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d008      	beq.n	80013ee <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2204      	movs	r2, #4
 80013e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2224      	movs	r2, #36	@ 0x24
 80013e6:	2100      	movs	r1, #0
 80013e8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e024      	b.n	8001438 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	210e      	movs	r1, #14
 80013fa:	438a      	bics	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2101      	movs	r1, #1
 800140a:	438a      	bics	r2, r1
 800140c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	221c      	movs	r2, #28
 8001414:	401a      	ands	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	2101      	movs	r1, #1
 800141c:	4091      	lsls	r1, r2
 800141e:	000a      	movs	r2, r1
 8001420:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2225      	movs	r2, #37	@ 0x25
 8001426:	2101      	movs	r1, #1
 8001428:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2224      	movs	r2, #36	@ 0x24
 800142e:	2100      	movs	r1, #0
 8001430:	5499      	strb	r1, [r3, r2]

    return status;
 8001432:	230f      	movs	r3, #15
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001438:	0018      	movs	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	b004      	add	sp, #16
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001448:	210f      	movs	r1, #15
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2225      	movs	r2, #37	@ 0x25
 8001454:	5c9b      	ldrb	r3, [r3, r2]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d006      	beq.n	800146a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2204      	movs	r2, #4
 8001460:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001462:	187b      	adds	r3, r7, r1
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	e02a      	b.n	80014c0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	210e      	movs	r1, #14
 8001476:	438a      	bics	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	438a      	bics	r2, r1
 8001488:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	221c      	movs	r2, #28
 8001490:	401a      	ands	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	2101      	movs	r1, #1
 8001498:	4091      	lsls	r1, r2
 800149a:	000a      	movs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2225      	movs	r2, #37	@ 0x25
 80014a2:	2101      	movs	r1, #1
 80014a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2224      	movs	r2, #36	@ 0x24
 80014aa:	2100      	movs	r1, #0
 80014ac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d004      	beq.n	80014c0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	0010      	movs	r0, r2
 80014be:	4798      	blx	r3
    }
  }
  return status;
 80014c0:	230f      	movs	r3, #15
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	781b      	ldrb	r3, [r3, #0]
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b004      	add	sp, #16
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014e6:	e149      	b.n	800177c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4091      	lsls	r1, r2
 80014f2:	000a      	movs	r2, r1
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d100      	bne.n	8001500 <HAL_GPIO_Init+0x30>
 80014fe:	e13a      	b.n	8001776 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2203      	movs	r2, #3
 8001506:	4013      	ands	r3, r2
 8001508:	2b01      	cmp	r3, #1
 800150a:	d005      	beq.n	8001518 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2203      	movs	r2, #3
 8001512:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001514:	2b02      	cmp	r3, #2
 8001516:	d130      	bne.n	800157a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	409a      	lsls	r2, r3
 8001526:	0013      	movs	r3, r2
 8001528:	43da      	mvns	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	409a      	lsls	r2, r3
 800153a:	0013      	movs	r3, r2
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154e:	2201      	movs	r2, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	43da      	mvns	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	2201      	movs	r2, #1
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	4013      	ands	r3, r2
 8001582:	2b03      	cmp	r3, #3
 8001584:	d017      	beq.n	80015b6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	43da      	mvns	r2, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2203      	movs	r2, #3
 80015bc:	4013      	ands	r3, r2
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d123      	bne.n	800160a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	58d3      	ldr	r3, [r2, r3]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2207      	movs	r2, #7
 80015d4:	4013      	ands	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	409a      	lsls	r2, r3
 80015dc:	0013      	movs	r3, r2
 80015de:	43da      	mvns	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2107      	movs	r1, #7
 80015ee:	400b      	ands	r3, r1
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	6939      	ldr	r1, [r7, #16]
 8001608:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2203      	movs	r2, #3
 8001628:	401a      	ands	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	23c0      	movs	r3, #192	@ 0xc0
 8001644:	029b      	lsls	r3, r3, #10
 8001646:	4013      	ands	r3, r2
 8001648:	d100      	bne.n	800164c <HAL_GPIO_Init+0x17c>
 800164a:	e094      	b.n	8001776 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164c:	4b51      	ldr	r3, [pc, #324]	@ (8001794 <HAL_GPIO_Init+0x2c4>)
 800164e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001650:	4b50      	ldr	r3, [pc, #320]	@ (8001794 <HAL_GPIO_Init+0x2c4>)
 8001652:	2101      	movs	r1, #1
 8001654:	430a      	orrs	r2, r1
 8001656:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001658:	4a4f      	ldr	r2, [pc, #316]	@ (8001798 <HAL_GPIO_Init+0x2c8>)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	589b      	ldr	r3, [r3, r2]
 8001664:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2203      	movs	r2, #3
 800166a:	4013      	ands	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	409a      	lsls	r2, r3
 8001672:	0013      	movs	r3, r2
 8001674:	43da      	mvns	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	23a0      	movs	r3, #160	@ 0xa0
 8001680:	05db      	lsls	r3, r3, #23
 8001682:	429a      	cmp	r2, r3
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0x1de>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a44      	ldr	r2, [pc, #272]	@ (800179c <HAL_GPIO_Init+0x2cc>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00d      	beq.n	80016aa <HAL_GPIO_Init+0x1da>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a43      	ldr	r2, [pc, #268]	@ (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0x1d6>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a42      	ldr	r2, [pc, #264]	@ (80017a4 <HAL_GPIO_Init+0x2d4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_GPIO_Init+0x1d2>
 800169e:	2305      	movs	r3, #5
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x1e0>
 80016a2:	2306      	movs	r3, #6
 80016a4:	e004      	b.n	80016b0 <HAL_GPIO_Init+0x1e0>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_Init+0x1e0>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_GPIO_Init+0x1e0>
 80016ae:	2300      	movs	r3, #0
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	2103      	movs	r1, #3
 80016b4:	400a      	ands	r2, r1
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	4093      	lsls	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c0:	4935      	ldr	r1, [pc, #212]	@ (8001798 <HAL_GPIO_Init+0x2c8>)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ce:	4b36      	ldr	r3, [pc, #216]	@ (80017a8 <HAL_GPIO_Init+0x2d8>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43da      	mvns	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	035b      	lsls	r3, r3, #13
 80016e6:	4013      	ands	r3, r2
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016f2:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <HAL_GPIO_Init+0x2d8>)
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016f8:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <HAL_GPIO_Init+0x2d8>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	43da      	mvns	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	2380      	movs	r3, #128	@ 0x80
 800170e:	039b      	lsls	r3, r3, #14
 8001710:	4013      	ands	r3, r2
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800171c:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <HAL_GPIO_Init+0x2d8>)
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001722:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <HAL_GPIO_Init+0x2d8>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	43da      	mvns	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	029b      	lsls	r3, r3, #10
 800173a:	4013      	ands	r3, r2
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <HAL_GPIO_Init+0x2d8>)
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174c:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <HAL_GPIO_Init+0x2d8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43da      	mvns	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	025b      	lsls	r3, r3, #9
 8001764:	4013      	ands	r3, r2
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001770:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_GPIO_Init+0x2d8>)
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3301      	adds	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	40da      	lsrs	r2, r3
 8001784:	1e13      	subs	r3, r2, #0
 8001786:	d000      	beq.n	800178a <HAL_GPIO_Init+0x2ba>
 8001788:	e6ae      	b.n	80014e8 <HAL_GPIO_Init+0x18>
  }
}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	46c0      	nop			@ (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b006      	add	sp, #24
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	40010000 	.word	0x40010000
 800179c:	50000400 	.word	0x50000400
 80017a0:	50000800 	.word	0x50000800
 80017a4:	50001c00 	.word	0x50001c00
 80017a8:	40010400 	.word	0x40010400

080017ac <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	0008      	movs	r0, r1
 80017b6:	0011      	movs	r1, r2
 80017b8:	1cbb      	adds	r3, r7, #2
 80017ba:	1c02      	adds	r2, r0, #0
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	1c7b      	adds	r3, r7, #1
 80017c0:	1c0a      	adds	r2, r1, #0
 80017c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c4:	1c7b      	adds	r3, r7, #1
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017cc:	1cbb      	adds	r3, r7, #2
 80017ce:	881a      	ldrh	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80017d4:	e003      	b.n	80017de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80017d6:	1cbb      	adds	r3, r7, #2
 80017d8:	881a      	ldrh	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	000a      	movs	r2, r1
 80017f0:	1cbb      	adds	r3, r7, #2
 80017f2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017fa:	1cbb      	adds	r3, r7, #2
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4013      	ands	r3, r2
 8001802:	041a      	lsls	r2, r3, #16
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43db      	mvns	r3, r3
 8001808:	1cb9      	adds	r1, r7, #2
 800180a:	8809      	ldrh	r1, [r1, #0]
 800180c:	400b      	ands	r3, r1
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
}
 8001814:	46c0      	nop			@ (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b004      	add	sp, #16
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001826:	2180      	movs	r1, #128	@ 0x80
 8001828:	0049      	lsls	r1, r1, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	601a      	str	r2, [r3, #0]
}
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40007000 	.word	0x40007000

08001838 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8001840:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	430a      	orrs	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
}
 800184c:	46c0      	nop			@ (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b002      	add	sp, #8
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40007000 	.word	0x40007000

08001858 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2  
  *           @arg PWR_WAKEUP_PIN3  for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <HAL_PWR_DisableWakeUpPin+0x20>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	43d9      	mvns	r1, r3
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <HAL_PWR_DisableWakeUpPin+0x20>)
 800186a:	400a      	ands	r2, r1
 800186c:	605a      	str	r2, [r3, #4]
}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b002      	add	sp, #8
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	40007000 	.word	0x40007000

0800187c <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001880:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8001886:	2102      	movs	r1, #2
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001892:	2104      	movs	r1, #4
 8001894:	430a      	orrs	r2, r1
 8001896:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001898:	bf30      	wfi
}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40007000 	.word	0x40007000
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b08a      	sub	sp, #40	@ 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	f000 fb6c 	bl	8001f94 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018bc:	4bc8      	ldr	r3, [pc, #800]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	220c      	movs	r2, #12
 80018c2:	4013      	ands	r3, r2
 80018c4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018c6:	4bc6      	ldr	r3, [pc, #792]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	2380      	movs	r3, #128	@ 0x80
 80018cc:	025b      	lsls	r3, r3, #9
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2201      	movs	r2, #1
 80018d8:	4013      	ands	r3, r2
 80018da:	d100      	bne.n	80018de <HAL_RCC_OscConfig+0x36>
 80018dc:	e07d      	b.n	80019da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d007      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d112      	bne.n	8001910 <HAL_RCC_OscConfig+0x68>
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	2380      	movs	r3, #128	@ 0x80
 80018ee:	025b      	lsls	r3, r3, #9
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d10d      	bne.n	8001910 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f4:	4bba      	ldr	r3, [pc, #744]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	029b      	lsls	r3, r3, #10
 80018fc:	4013      	ands	r3, r2
 80018fe:	d100      	bne.n	8001902 <HAL_RCC_OscConfig+0x5a>
 8001900:	e06a      	b.n	80019d8 <HAL_RCC_OscConfig+0x130>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d166      	bne.n	80019d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	f000 fb42 	bl	8001f94 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	025b      	lsls	r3, r3, #9
 8001918:	429a      	cmp	r2, r3
 800191a:	d107      	bne.n	800192c <HAL_RCC_OscConfig+0x84>
 800191c:	4bb0      	ldr	r3, [pc, #704]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4baf      	ldr	r3, [pc, #700]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001922:	2180      	movs	r1, #128	@ 0x80
 8001924:	0249      	lsls	r1, r1, #9
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e027      	b.n	800197c <HAL_RCC_OscConfig+0xd4>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	23a0      	movs	r3, #160	@ 0xa0
 8001932:	02db      	lsls	r3, r3, #11
 8001934:	429a      	cmp	r2, r3
 8001936:	d10e      	bne.n	8001956 <HAL_RCC_OscConfig+0xae>
 8001938:	4ba9      	ldr	r3, [pc, #676]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4ba8      	ldr	r3, [pc, #672]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 800193e:	2180      	movs	r1, #128	@ 0x80
 8001940:	02c9      	lsls	r1, r1, #11
 8001942:	430a      	orrs	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	4ba6      	ldr	r3, [pc, #664]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4ba5      	ldr	r3, [pc, #660]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 800194c:	2180      	movs	r1, #128	@ 0x80
 800194e:	0249      	lsls	r1, r1, #9
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e012      	b.n	800197c <HAL_RCC_OscConfig+0xd4>
 8001956:	4ba2      	ldr	r3, [pc, #648]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4ba1      	ldr	r3, [pc, #644]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 800195c:	49a1      	ldr	r1, [pc, #644]	@ (8001be4 <HAL_RCC_OscConfig+0x33c>)
 800195e:	400a      	ands	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	4b9f      	ldr	r3, [pc, #636]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	@ 0x80
 8001968:	025b      	lsls	r3, r3, #9
 800196a:	4013      	ands	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4b9b      	ldr	r3, [pc, #620]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b9a      	ldr	r3, [pc, #616]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001976:	499c      	ldr	r1, [pc, #624]	@ (8001be8 <HAL_RCC_OscConfig+0x340>)
 8001978:	400a      	ands	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d014      	beq.n	80019ae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff f9f6 	bl	8000d74 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198e:	f7ff f9f1 	bl	8000d74 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b64      	cmp	r3, #100	@ 0x64
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e2f9      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019a0:	4b8f      	ldr	r3, [pc, #572]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	@ 0x80
 80019a6:	029b      	lsls	r3, r3, #10
 80019a8:	4013      	ands	r3, r2
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0xe6>
 80019ac:	e015      	b.n	80019da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff f9e1 	bl	8000d74 <HAL_GetTick>
 80019b2:	0003      	movs	r3, r0
 80019b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff f9dc 	bl	8000d74 <HAL_GetTick>
 80019bc:	0002      	movs	r2, r0
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	@ 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e2e4      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ca:	4b85      	ldr	r3, [pc, #532]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	@ 0x80
 80019d0:	029b      	lsls	r3, r3, #10
 80019d2:	4013      	ands	r3, r2
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x110>
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	d100      	bne.n	80019e6 <HAL_RCC_OscConfig+0x13e>
 80019e4:	e099      	b.n	8001b1a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	2220      	movs	r2, #32
 80019f0:	4013      	ands	r3, r2
 80019f2:	d009      	beq.n	8001a08 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80019f4:	4b7a      	ldr	r3, [pc, #488]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b79      	ldr	r3, [pc, #484]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 80019fa:	2120      	movs	r1, #32
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	2220      	movs	r2, #32
 8001a04:	4393      	bics	r3, r2
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	2b0c      	cmp	r3, #12
 8001a12:	d13e      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1ea>
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d13b      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a1a:	4b71      	ldr	r3, [pc, #452]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2204      	movs	r2, #4
 8001a20:	4013      	ands	r3, r2
 8001a22:	d004      	beq.n	8001a2e <HAL_RCC_OscConfig+0x186>
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e2b2      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2e:	4b6c      	ldr	r3, [pc, #432]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a6e      	ldr	r2, [pc, #440]	@ (8001bec <HAL_RCC_OscConfig+0x344>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	021a      	lsls	r2, r3, #8
 8001a3e:	4b68      	ldr	r3, [pc, #416]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001a40:	430a      	orrs	r2, r1
 8001a42:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a44:	4b66      	ldr	r3, [pc, #408]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2209      	movs	r2, #9
 8001a4a:	4393      	bics	r3, r2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	4b64      	ldr	r3, [pc, #400]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a56:	f000 fbeb 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 8001a5a:	0001      	movs	r1, r0
 8001a5c:	4b60      	ldr	r3, [pc, #384]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	220f      	movs	r2, #15
 8001a64:	4013      	ands	r3, r2
 8001a66:	4a62      	ldr	r2, [pc, #392]	@ (8001bf0 <HAL_RCC_OscConfig+0x348>)
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	000a      	movs	r2, r1
 8001a6c:	40da      	lsrs	r2, r3
 8001a6e:	4b61      	ldr	r3, [pc, #388]	@ (8001bf4 <HAL_RCC_OscConfig+0x34c>)
 8001a70:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001a72:	4b61      	ldr	r3, [pc, #388]	@ (8001bf8 <HAL_RCC_OscConfig+0x350>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2513      	movs	r5, #19
 8001a78:	197c      	adds	r4, r7, r5
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff f934 	bl	8000ce8 <HAL_InitTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a84:	197b      	adds	r3, r7, r5
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d046      	beq.n	8001b1a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001a8c:	197b      	adds	r3, r7, r5
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	e280      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d027      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a98:	4b51      	ldr	r3, [pc, #324]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2209      	movs	r2, #9
 8001a9e:	4393      	bics	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f963 	bl	8000d74 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7ff f95e 	bl	8000d74 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e266      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac6:	4b46      	ldr	r3, [pc, #280]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2204      	movs	r2, #4
 8001acc:	4013      	ands	r3, r2
 8001ace:	d0f1      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b43      	ldr	r3, [pc, #268]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a45      	ldr	r2, [pc, #276]	@ (8001bec <HAL_RCC_OscConfig+0x344>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	021a      	lsls	r2, r3, #8
 8001ae0:	4b3f      	ldr	r3, [pc, #252]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	e018      	b.n	8001b1a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae8:	4b3d      	ldr	r3, [pc, #244]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b3c      	ldr	r3, [pc, #240]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001aee:	2101      	movs	r1, #1
 8001af0:	438a      	bics	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff f93e 	bl	8000d74 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff f939 	bl	8000d74 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e241      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b10:	4b33      	ldr	r3, [pc, #204]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2204      	movs	r2, #4
 8001b16:	4013      	ands	r3, r2
 8001b18:	d1f1      	bne.n	8001afe <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2210      	movs	r2, #16
 8001b20:	4013      	ands	r3, r2
 8001b22:	d100      	bne.n	8001b26 <HAL_RCC_OscConfig+0x27e>
 8001b24:	e0a1      	b.n	8001c6a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d140      	bne.n	8001bae <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_OscConfig+0x29c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e227      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b44:	4b26      	ldr	r3, [pc, #152]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a2c      	ldr	r2, [pc, #176]	@ (8001bfc <HAL_RCC_OscConfig+0x354>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1a      	ldr	r2, [r3, #32]
 8001b52:	4b23      	ldr	r3, [pc, #140]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b58:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	0a19      	lsrs	r1, r3, #8
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	061a      	lsls	r2, r3, #24
 8001b66:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	0b5b      	lsrs	r3, r3, #13
 8001b72:	3301      	adds	r3, #1
 8001b74:	2280      	movs	r2, #128	@ 0x80
 8001b76:	0212      	lsls	r2, r2, #8
 8001b78:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	210f      	movs	r1, #15
 8001b82:	400b      	ands	r3, r1
 8001b84:	491a      	ldr	r1, [pc, #104]	@ (8001bf0 <HAL_RCC_OscConfig+0x348>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_RCC_OscConfig+0x34c>)
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <HAL_RCC_OscConfig+0x350>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2513      	movs	r5, #19
 8001b94:	197c      	adds	r4, r7, r5
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7ff f8a6 	bl	8000ce8 <HAL_InitTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ba0:	197b      	adds	r3, r7, r5
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d060      	beq.n	8001c6a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001ba8:	197b      	adds	r3, r7, r5
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	e1f2      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d03f      	beq.n	8001c36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_RCC_OscConfig+0x338>)
 8001bbc:	2180      	movs	r1, #128	@ 0x80
 8001bbe:	0049      	lsls	r1, r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f8d6 	bl	8000d74 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bcc:	e018      	b.n	8001c00 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bce:	f7ff f8d1 	bl	8000d74 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d911      	bls.n	8001c00 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e1d9      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	fffeffff 	.word	0xfffeffff
 8001be8:	fffbffff 	.word	0xfffbffff
 8001bec:	ffffe0ff 	.word	0xffffe0ff
 8001bf0:	08003c1c 	.word	0x08003c1c
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c00:	4bc9      	ldr	r3, [pc, #804]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d0e0      	beq.n	8001bce <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c0c:	4bc6      	ldr	r3, [pc, #792]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4ac6      	ldr	r2, [pc, #792]	@ (8001f2c <HAL_RCC_OscConfig+0x684>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	0019      	movs	r1, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1a      	ldr	r2, [r3, #32]
 8001c1a:	4bc3      	ldr	r3, [pc, #780]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c20:	4bc1      	ldr	r3, [pc, #772]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	0a19      	lsrs	r1, r3, #8
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	061a      	lsls	r2, r3, #24
 8001c2e:	4bbe      	ldr	r3, [pc, #760]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	e019      	b.n	8001c6a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c36:	4bbc      	ldr	r3, [pc, #752]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4bbb      	ldr	r3, [pc, #748]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001c3c:	49bc      	ldr	r1, [pc, #752]	@ (8001f30 <HAL_RCC_OscConfig+0x688>)
 8001c3e:	400a      	ands	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7ff f897 	bl	8000d74 <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c4c:	f7ff f892 	bl	8000d74 <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e19a      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c5e:	4bb2      	ldr	r3, [pc, #712]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2380      	movs	r3, #128	@ 0x80
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4013      	ands	r3, r2
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2208      	movs	r2, #8
 8001c70:	4013      	ands	r3, r2
 8001c72:	d036      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d019      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7c:	4baa      	ldr	r3, [pc, #680]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001c7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c80:	4ba9      	ldr	r3, [pc, #676]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001c82:	2101      	movs	r1, #1
 8001c84:	430a      	orrs	r2, r1
 8001c86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7ff f874 	bl	8000d74 <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c92:	f7ff f86f 	bl	8000d74 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e177      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ca4:	4ba0      	ldr	r3, [pc, #640]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ca8:	2202      	movs	r2, #2
 8001caa:	4013      	ands	r3, r2
 8001cac:	d0f1      	beq.n	8001c92 <HAL_RCC_OscConfig+0x3ea>
 8001cae:	e018      	b.n	8001ce2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb0:	4b9d      	ldr	r3, [pc, #628]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001cb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cb4:	4b9c      	ldr	r3, [pc, #624]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	438a      	bics	r2, r1
 8001cba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbc:	f7ff f85a 	bl	8000d74 <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7ff f855 	bl	8000d74 <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e15d      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cd8:	4b93      	ldr	r3, [pc, #588]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d1f1      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d100      	bne.n	8001cee <HAL_RCC_OscConfig+0x446>
 8001cec:	e0ae      	b.n	8001e4c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cee:	2023      	movs	r0, #35	@ 0x23
 8001cf0:	183b      	adds	r3, r7, r0
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf6:	4b8c      	ldr	r3, [pc, #560]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cfa:	2380      	movs	r3, #128	@ 0x80
 8001cfc:	055b      	lsls	r3, r3, #21
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b89      	ldr	r3, [pc, #548]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d06:	4b88      	ldr	r3, [pc, #544]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001d08:	2180      	movs	r1, #128	@ 0x80
 8001d0a:	0549      	lsls	r1, r1, #21
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001d10:	183b      	adds	r3, r7, r0
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	4b87      	ldr	r3, [pc, #540]	@ (8001f34 <HAL_RCC_OscConfig+0x68c>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d11a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d22:	4b84      	ldr	r3, [pc, #528]	@ (8001f34 <HAL_RCC_OscConfig+0x68c>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4b83      	ldr	r3, [pc, #524]	@ (8001f34 <HAL_RCC_OscConfig+0x68c>)
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0049      	lsls	r1, r1, #1
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d30:	f7ff f820 	bl	8000d74 <HAL_GetTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7ff f81b 	bl	8000d74 <HAL_GetTick>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b64      	cmp	r3, #100	@ 0x64
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e123      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	4b79      	ldr	r3, [pc, #484]	@ (8001f34 <HAL_RCC_OscConfig+0x68c>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	@ 0x80
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4013      	ands	r3, r2
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4cc>
 8001d64:	4b70      	ldr	r3, [pc, #448]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001d66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d68:	4b6f      	ldr	r3, [pc, #444]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001d6a:	2180      	movs	r1, #128	@ 0x80
 8001d6c:	0049      	lsls	r1, r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d72:	e031      	b.n	8001dd8 <HAL_RCC_OscConfig+0x530>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10c      	bne.n	8001d96 <HAL_RCC_OscConfig+0x4ee>
 8001d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001d7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d80:	4b69      	ldr	r3, [pc, #420]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001d82:	496b      	ldr	r1, [pc, #428]	@ (8001f30 <HAL_RCC_OscConfig+0x688>)
 8001d84:	400a      	ands	r2, r1
 8001d86:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d88:	4b67      	ldr	r3, [pc, #412]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001d8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d8c:	4b66      	ldr	r3, [pc, #408]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001d8e:	496a      	ldr	r1, [pc, #424]	@ (8001f38 <HAL_RCC_OscConfig+0x690>)
 8001d90:	400a      	ands	r2, r1
 8001d92:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d94:	e020      	b.n	8001dd8 <HAL_RCC_OscConfig+0x530>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	23a0      	movs	r3, #160	@ 0xa0
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d10e      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x518>
 8001da2:	4b61      	ldr	r3, [pc, #388]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001da4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001da6:	4b60      	ldr	r3, [pc, #384]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001da8:	2180      	movs	r1, #128	@ 0x80
 8001daa:	00c9      	lsls	r1, r1, #3
 8001dac:	430a      	orrs	r2, r1
 8001dae:	651a      	str	r2, [r3, #80]	@ 0x50
 8001db0:	4b5d      	ldr	r3, [pc, #372]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001db2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001db4:	4b5c      	ldr	r3, [pc, #368]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001db6:	2180      	movs	r1, #128	@ 0x80
 8001db8:	0049      	lsls	r1, r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x530>
 8001dc0:	4b59      	ldr	r3, [pc, #356]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001dc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dc4:	4b58      	ldr	r3, [pc, #352]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001dc6:	495a      	ldr	r1, [pc, #360]	@ (8001f30 <HAL_RCC_OscConfig+0x688>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dcc:	4b56      	ldr	r3, [pc, #344]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001dce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dd0:	4b55      	ldr	r3, [pc, #340]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001dd2:	4959      	ldr	r1, [pc, #356]	@ (8001f38 <HAL_RCC_OscConfig+0x690>)
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d015      	beq.n	8001e0c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de0:	f7fe ffc8 	bl	8000d74 <HAL_GetTick>
 8001de4:	0003      	movs	r3, r0
 8001de6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001de8:	e009      	b.n	8001dfe <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7fe ffc3 	bl	8000d74 <HAL_GetTick>
 8001dee:	0002      	movs	r2, r0
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	4a51      	ldr	r2, [pc, #324]	@ (8001f3c <HAL_RCC_OscConfig+0x694>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e0ca      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001e00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e02:	2380      	movs	r3, #128	@ 0x80
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	d0ef      	beq.n	8001dea <HAL_RCC_OscConfig+0x542>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0c:	f7fe ffb2 	bl	8000d74 <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e14:	e009      	b.n	8001e2a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7fe ffad 	bl	8000d74 <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	4a46      	ldr	r2, [pc, #280]	@ (8001f3c <HAL_RCC_OscConfig+0x694>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e0b4      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001e2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e2e:	2380      	movs	r3, #128	@ 0x80
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4013      	ands	r3, r2
 8001e34:	d1ef      	bne.n	8001e16 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e36:	2323      	movs	r3, #35	@ 0x23
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e40:	4b39      	ldr	r3, [pc, #228]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001e42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e44:	4b38      	ldr	r3, [pc, #224]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001e46:	493e      	ldr	r1, [pc, #248]	@ (8001f40 <HAL_RCC_OscConfig+0x698>)
 8001e48:	400a      	ands	r2, r1
 8001e4a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d100      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5ae>
 8001e54:	e09d      	b.n	8001f92 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	2b0c      	cmp	r3, #12
 8001e5a:	d100      	bne.n	8001e5e <HAL_RCC_OscConfig+0x5b6>
 8001e5c:	e076      	b.n	8001f4c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d145      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e66:	4b30      	ldr	r3, [pc, #192]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001e6c:	4935      	ldr	r1, [pc, #212]	@ (8001f44 <HAL_RCC_OscConfig+0x69c>)
 8001e6e:	400a      	ands	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e72:	f7fe ff7f 	bl	8000d74 <HAL_GetTick>
 8001e76:	0003      	movs	r3, r0
 8001e78:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7fe ff7a 	bl	8000d74 <HAL_GetTick>
 8001e80:	0002      	movs	r2, r0
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e082      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e8e:	4b26      	ldr	r3, [pc, #152]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	049b      	lsls	r3, r3, #18
 8001e96:	4013      	ands	r3, r2
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9a:	4b23      	ldr	r3, [pc, #140]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f48 <HAL_RCC_OscConfig+0x6a0>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eba:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	0449      	lsls	r1, r1, #17
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7fe ff54 	bl	8000d74 <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7fe ff4f 	bl	8000d74 <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e057      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ee4:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	2380      	movs	r3, #128	@ 0x80
 8001eea:	049b      	lsls	r3, r3, #18
 8001eec:	4013      	ands	r3, r2
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x62a>
 8001ef0:	e04f      	b.n	8001f92 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001ef8:	4912      	ldr	r1, [pc, #72]	@ (8001f44 <HAL_RCC_OscConfig+0x69c>)
 8001efa:	400a      	ands	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7fe ff39 	bl	8000d74 <HAL_GetTick>
 8001f02:	0003      	movs	r3, r0
 8001f04:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f08:	f7fe ff34 	bl	8000d74 <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e03c      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f1a:	4b03      	ldr	r3, [pc, #12]	@ (8001f28 <HAL_RCC_OscConfig+0x680>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	049b      	lsls	r3, r3, #18
 8001f22:	4013      	ands	r3, r2
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x660>
 8001f26:	e034      	b.n	8001f92 <HAL_RCC_OscConfig+0x6ea>
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	ffff1fff 	.word	0xffff1fff
 8001f30:	fffffeff 	.word	0xfffffeff
 8001f34:	40007000 	.word	0x40007000
 8001f38:	fffffbff 	.word	0xfffffbff
 8001f3c:	00001388 	.word	0x00001388
 8001f40:	efffffff 	.word	0xefffffff
 8001f44:	feffffff 	.word	0xfeffffff
 8001f48:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e01d      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f58:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <HAL_RCC_OscConfig+0x6f4>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	2380      	movs	r3, #128	@ 0x80
 8001f62:	025b      	lsls	r3, r3, #9
 8001f64:	401a      	ands	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d10f      	bne.n	8001f8e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	23f0      	movs	r3, #240	@ 0xf0
 8001f72:	039b      	lsls	r3, r3, #14
 8001f74:	401a      	ands	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	23c0      	movs	r3, #192	@ 0xc0
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	401a      	ands	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b00a      	add	sp, #40	@ 0x28
 8001f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e128      	b.n	8002206 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b96      	ldr	r3, [pc, #600]	@ (8002210 <HAL_RCC_ClockConfig+0x270>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4013      	ands	r3, r2
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d91e      	bls.n	8002000 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b93      	ldr	r3, [pc, #588]	@ (8002210 <HAL_RCC_ClockConfig+0x270>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4393      	bics	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	4b90      	ldr	r3, [pc, #576]	@ (8002210 <HAL_RCC_ClockConfig+0x270>)
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fd4:	f7fe fece 	bl	8000d74 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fdc:	e009      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fde:	f7fe fec9 	bl	8000d74 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	4a8a      	ldr	r2, [pc, #552]	@ (8002214 <HAL_RCC_ClockConfig+0x274>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e109      	b.n	8002206 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b87      	ldr	r3, [pc, #540]	@ (8002210 <HAL_RCC_ClockConfig+0x270>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d1ee      	bne.n	8001fde <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2202      	movs	r2, #2
 8002006:	4013      	ands	r3, r2
 8002008:	d009      	beq.n	800201e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200a:	4b83      	ldr	r3, [pc, #524]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	22f0      	movs	r2, #240	@ 0xf0
 8002010:	4393      	bics	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	4b7f      	ldr	r3, [pc, #508]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 800201a:	430a      	orrs	r2, r1
 800201c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2201      	movs	r2, #1
 8002024:	4013      	ands	r3, r2
 8002026:	d100      	bne.n	800202a <HAL_RCC_ClockConfig+0x8a>
 8002028:	e089      	b.n	800213e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002032:	4b79      	ldr	r3, [pc, #484]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	029b      	lsls	r3, r3, #10
 800203a:	4013      	ands	r3, r2
 800203c:	d120      	bne.n	8002080 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e0e1      	b.n	8002206 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800204a:	4b73      	ldr	r3, [pc, #460]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	2380      	movs	r3, #128	@ 0x80
 8002050:	049b      	lsls	r3, r3, #18
 8002052:	4013      	ands	r3, r2
 8002054:	d114      	bne.n	8002080 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0d5      	b.n	8002206 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d106      	bne.n	8002070 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002062:	4b6d      	ldr	r3, [pc, #436]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2204      	movs	r2, #4
 8002068:	4013      	ands	r3, r2
 800206a:	d109      	bne.n	8002080 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0ca      	b.n	8002206 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002070:	4b69      	ldr	r3, [pc, #420]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	@ 0x80
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4013      	ands	r3, r2
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0c2      	b.n	8002206 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002080:	4b65      	ldr	r3, [pc, #404]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2203      	movs	r2, #3
 8002086:	4393      	bics	r3, r2
 8002088:	0019      	movs	r1, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4b62      	ldr	r3, [pc, #392]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 8002090:	430a      	orrs	r2, r1
 8002092:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002094:	f7fe fe6e 	bl	8000d74 <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d111      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020a4:	e009      	b.n	80020ba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a6:	f7fe fe65 	bl	8000d74 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	4a58      	ldr	r2, [pc, #352]	@ (8002214 <HAL_RCC_ClockConfig+0x274>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e0a5      	b.n	8002206 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ba:	4b57      	ldr	r3, [pc, #348]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	220c      	movs	r2, #12
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d1ef      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x106>
 80020c6:	e03a      	b.n	800213e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d111      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d0:	e009      	b.n	80020e6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d2:	f7fe fe4f 	bl	8000d74 <HAL_GetTick>
 80020d6:	0002      	movs	r2, r0
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002214 <HAL_RCC_ClockConfig+0x274>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e08f      	b.n	8002206 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	220c      	movs	r2, #12
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d1ef      	bne.n	80020d2 <HAL_RCC_ClockConfig+0x132>
 80020f2:	e024      	b.n	800213e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d11b      	bne.n	8002134 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fc:	e009      	b.n	8002112 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fe:	f7fe fe39 	bl	8000d74 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	4a42      	ldr	r2, [pc, #264]	@ (8002214 <HAL_RCC_ClockConfig+0x274>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e079      	b.n	8002206 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002112:	4b41      	ldr	r3, [pc, #260]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	220c      	movs	r2, #12
 8002118:	4013      	ands	r3, r2
 800211a:	2b04      	cmp	r3, #4
 800211c:	d1ef      	bne.n	80020fe <HAL_RCC_ClockConfig+0x15e>
 800211e:	e00e      	b.n	800213e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe fe28 	bl	8000d74 <HAL_GetTick>
 8002124:	0002      	movs	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	4a3a      	ldr	r2, [pc, #232]	@ (8002214 <HAL_RCC_ClockConfig+0x274>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e068      	b.n	8002206 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002134:	4b38      	ldr	r3, [pc, #224]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	220c      	movs	r2, #12
 800213a:	4013      	ands	r3, r2
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800213e:	4b34      	ldr	r3, [pc, #208]	@ (8002210 <HAL_RCC_ClockConfig+0x270>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2201      	movs	r2, #1
 8002144:	4013      	ands	r3, r2
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d21e      	bcs.n	800218a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214c:	4b30      	ldr	r3, [pc, #192]	@ (8002210 <HAL_RCC_ClockConfig+0x270>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2201      	movs	r2, #1
 8002152:	4393      	bics	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	4b2e      	ldr	r3, [pc, #184]	@ (8002210 <HAL_RCC_ClockConfig+0x270>)
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800215e:	f7fe fe09 	bl	8000d74 <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	e009      	b.n	800217c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002168:	f7fe fe04 	bl	8000d74 <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	4a28      	ldr	r2, [pc, #160]	@ (8002214 <HAL_RCC_ClockConfig+0x274>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e044      	b.n	8002206 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217c:	4b24      	ldr	r3, [pc, #144]	@ (8002210 <HAL_RCC_ClockConfig+0x270>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2201      	movs	r2, #1
 8002182:	4013      	ands	r3, r2
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d1ee      	bne.n	8002168 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2204      	movs	r2, #4
 8002190:	4013      	ands	r3, r2
 8002192:	d009      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b20      	ldr	r3, [pc, #128]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a20      	ldr	r2, [pc, #128]	@ (800221c <HAL_RCC_ClockConfig+0x27c>)
 800219a:	4013      	ands	r3, r2
 800219c:	0019      	movs	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2208      	movs	r2, #8
 80021ae:	4013      	ands	r3, r2
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b2:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002220 <HAL_RCC_ClockConfig+0x280>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	00da      	lsls	r2, r3, #3
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 80021c4:	430a      	orrs	r2, r1
 80021c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021c8:	f000 f832 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021cc:	0001      	movs	r1, r0
 80021ce:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_RCC_ClockConfig+0x278>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	220f      	movs	r2, #15
 80021d6:	4013      	ands	r3, r2
 80021d8:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <HAL_RCC_ClockConfig+0x284>)
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	000a      	movs	r2, r1
 80021de:	40da      	lsrs	r2, r3
 80021e0:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <HAL_RCC_ClockConfig+0x288>)
 80021e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <HAL_RCC_ClockConfig+0x28c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	250b      	movs	r5, #11
 80021ea:	197c      	adds	r4, r7, r5
 80021ec:	0018      	movs	r0, r3
 80021ee:	f7fe fd7b 	bl	8000ce8 <HAL_InitTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80021f6:	197b      	adds	r3, r7, r5
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80021fe:	197b      	adds	r3, r7, r5
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	e000      	b.n	8002206 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b004      	add	sp, #16
 800220c:	bdb0      	pop	{r4, r5, r7, pc}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	40022000 	.word	0x40022000
 8002214:	00001388 	.word	0x00001388
 8002218:	40021000 	.word	0x40021000
 800221c:	fffff8ff 	.word	0xfffff8ff
 8002220:	ffffc7ff 	.word	0xffffc7ff
 8002224:	08003c1c 	.word	0x08003c1c
 8002228:	20000000 	.word	0x20000000
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b08e      	sub	sp, #56	@ 0x38
 8002234:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002236:	4b4c      	ldr	r3, [pc, #304]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x138>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800223c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800223e:	230c      	movs	r3, #12
 8002240:	4013      	ands	r3, r2
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d014      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x40>
 8002246:	d900      	bls.n	800224a <HAL_RCC_GetSysClockFreq+0x1a>
 8002248:	e07b      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x112>
 800224a:	2b04      	cmp	r3, #4
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x24>
 800224e:	2b08      	cmp	r3, #8
 8002250:	d00b      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x3a>
 8002252:	e076      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002254:	4b44      	ldr	r3, [pc, #272]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x138>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2210      	movs	r2, #16
 800225a:	4013      	ands	r3, r2
 800225c:	d002      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800225e:	4b43      	ldr	r3, [pc, #268]	@ (800236c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002260:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002262:	e07c      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002264:	4b42      	ldr	r3, [pc, #264]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x140>)
 8002266:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002268:	e079      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800226a:	4b42      	ldr	r3, [pc, #264]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x144>)
 800226c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800226e:	e076      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002272:	0c9a      	lsrs	r2, r3, #18
 8002274:	230f      	movs	r3, #15
 8002276:	401a      	ands	r2, r3
 8002278:	4b3f      	ldr	r3, [pc, #252]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x148>)
 800227a:	5c9b      	ldrb	r3, [r3, r2]
 800227c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800227e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002280:	0d9a      	lsrs	r2, r3, #22
 8002282:	2303      	movs	r3, #3
 8002284:	4013      	ands	r3, r2
 8002286:	3301      	adds	r3, #1
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800228a:	4b37      	ldr	r3, [pc, #220]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x138>)
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	025b      	lsls	r3, r3, #9
 8002292:	4013      	ands	r3, r2
 8002294:	d01a      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	4a35      	ldr	r2, [pc, #212]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x144>)
 80022a0:	2300      	movs	r3, #0
 80022a2:	69b8      	ldr	r0, [r7, #24]
 80022a4:	69f9      	ldr	r1, [r7, #28]
 80022a6:	f7fd ffdb 	bl	8000260 <__aeabi_lmul>
 80022aa:	0002      	movs	r2, r0
 80022ac:	000b      	movs	r3, r1
 80022ae:	0010      	movs	r0, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f7fd ffaf 	bl	8000220 <__aeabi_uldivmod>
 80022c2:	0002      	movs	r2, r0
 80022c4:	000b      	movs	r3, r1
 80022c6:	0013      	movs	r3, r2
 80022c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80022ca:	e037      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022cc:	4b26      	ldr	r3, [pc, #152]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x138>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2210      	movs	r2, #16
 80022d2:	4013      	ands	r3, r2
 80022d4:	d01a      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80022d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	4a23      	ldr	r2, [pc, #140]	@ (800236c <HAL_RCC_GetSysClockFreq+0x13c>)
 80022e0:	2300      	movs	r3, #0
 80022e2:	68b8      	ldr	r0, [r7, #8]
 80022e4:	68f9      	ldr	r1, [r7, #12]
 80022e6:	f7fd ffbb 	bl	8000260 <__aeabi_lmul>
 80022ea:	0002      	movs	r2, r0
 80022ec:	000b      	movs	r3, r1
 80022ee:	0010      	movs	r0, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f7fd ff8f 	bl	8000220 <__aeabi_uldivmod>
 8002302:	0002      	movs	r2, r0
 8002304:	000b      	movs	r3, r1
 8002306:	0013      	movs	r3, r2
 8002308:	637b      	str	r3, [r7, #52]	@ 0x34
 800230a:	e017      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800230c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230e:	0018      	movs	r0, r3
 8002310:	2300      	movs	r3, #0
 8002312:	0019      	movs	r1, r3
 8002314:	4a16      	ldr	r2, [pc, #88]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x140>)
 8002316:	2300      	movs	r3, #0
 8002318:	f7fd ffa2 	bl	8000260 <__aeabi_lmul>
 800231c:	0002      	movs	r2, r0
 800231e:	000b      	movs	r3, r1
 8002320:	0010      	movs	r0, r2
 8002322:	0019      	movs	r1, r3
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	001c      	movs	r4, r3
 8002328:	2300      	movs	r3, #0
 800232a:	001d      	movs	r5, r3
 800232c:	0022      	movs	r2, r4
 800232e:	002b      	movs	r3, r5
 8002330:	f7fd ff76 	bl	8000220 <__aeabi_uldivmod>
 8002334:	0002      	movs	r2, r0
 8002336:	000b      	movs	r3, r1
 8002338:	0013      	movs	r3, r2
 800233a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800233c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800233e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002340:	e00d      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002342:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x138>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0b5b      	lsrs	r3, r3, #13
 8002348:	2207      	movs	r2, #7
 800234a:	4013      	ands	r3, r2
 800234c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	3301      	adds	r3, #1
 8002352:	2280      	movs	r2, #128	@ 0x80
 8002354:	0212      	lsls	r2, r2, #8
 8002356:	409a      	lsls	r2, r3
 8002358:	0013      	movs	r3, r2
 800235a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800235c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800235e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b00e      	add	sp, #56	@ 0x38
 8002366:	bdb0      	pop	{r4, r5, r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	003d0900 	.word	0x003d0900
 8002370:	00f42400 	.word	0x00f42400
 8002374:	007a1200 	.word	0x007a1200
 8002378:	08003c34 	.word	0x08003c34

0800237c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002380:	4b02      	ldr	r3, [pc, #8]	@ (800238c <HAL_RCC_GetHCLKFreq+0x10>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	46c0      	nop			@ (mov r8, r8)
 800238c:	20000000 	.word	0x20000000

08002390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002394:	f7ff fff2 	bl	800237c <HAL_RCC_GetHCLKFreq>
 8002398:	0001      	movs	r1, r0
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	2207      	movs	r2, #7
 80023a2:	4013      	ands	r3, r2
 80023a4:	4a04      	ldr	r2, [pc, #16]	@ (80023b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	40d9      	lsrs	r1, r3
 80023aa:	000b      	movs	r3, r1
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	40021000 	.word	0x40021000
 80023b8:	08003c2c 	.word	0x08003c2c

080023bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c0:	f7ff ffdc 	bl	800237c <HAL_RCC_GetHCLKFreq>
 80023c4:	0001      	movs	r1, r0
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	0adb      	lsrs	r3, r3, #11
 80023cc:	2207      	movs	r2, #7
 80023ce:	4013      	ands	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	40d9      	lsrs	r1, r3
 80023d6:	000b      	movs	r3, r1
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08003c2c 	.word	0x08003c2c

080023e8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80023f0:	2017      	movs	r0, #23
 80023f2:	183b      	adds	r3, r7, r0
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2220      	movs	r2, #32
 80023fe:	4013      	ands	r3, r2
 8002400:	d100      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002402:	e0c7      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002404:	4b84      	ldr	r3, [pc, #528]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	055b      	lsls	r3, r3, #21
 800240c:	4013      	ands	r3, r2
 800240e:	d109      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4b81      	ldr	r3, [pc, #516]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002412:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002414:	4b80      	ldr	r3, [pc, #512]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002416:	2180      	movs	r1, #128	@ 0x80
 8002418:	0549      	lsls	r1, r1, #21
 800241a:	430a      	orrs	r2, r1
 800241c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800241e:	183b      	adds	r3, r7, r0
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	4b7d      	ldr	r3, [pc, #500]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4013      	ands	r3, r2
 800242e:	d11a      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002430:	4b7a      	ldr	r3, [pc, #488]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b79      	ldr	r3, [pc, #484]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002436:	2180      	movs	r1, #128	@ 0x80
 8002438:	0049      	lsls	r1, r1, #1
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243e:	f7fe fc99 	bl	8000d74 <HAL_GetTick>
 8002442:	0003      	movs	r3, r0
 8002444:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002446:	e008      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002448:	f7fe fc94 	bl	8000d74 <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	@ 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e0d9      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4b70      	ldr	r3, [pc, #448]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	@ 0x80
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4013      	ands	r3, r2
 8002464:	d0f0      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002466:	4b6c      	ldr	r3, [pc, #432]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	23c0      	movs	r3, #192	@ 0xc0
 800246c:	039b      	lsls	r3, r3, #14
 800246e:	4013      	ands	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	23c0      	movs	r3, #192	@ 0xc0
 8002478:	039b      	lsls	r3, r3, #14
 800247a:	4013      	ands	r3, r2
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	429a      	cmp	r2, r3
 8002480:	d013      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	23c0      	movs	r3, #192	@ 0xc0
 8002488:	029b      	lsls	r3, r3, #10
 800248a:	401a      	ands	r2, r3
 800248c:	23c0      	movs	r3, #192	@ 0xc0
 800248e:	029b      	lsls	r3, r3, #10
 8002490:	429a      	cmp	r2, r3
 8002492:	d10a      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002494:	4b60      	ldr	r3, [pc, #384]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	029b      	lsls	r3, r3, #10
 800249c:	401a      	ands	r2, r3
 800249e:	2380      	movs	r3, #128	@ 0x80
 80024a0:	029b      	lsls	r3, r3, #10
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d101      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0b1      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80024aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024ae:	23c0      	movs	r3, #192	@ 0xc0
 80024b0:	029b      	lsls	r3, r3, #10
 80024b2:	4013      	ands	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d03b      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	23c0      	movs	r3, #192	@ 0xc0
 80024c2:	029b      	lsls	r3, r3, #10
 80024c4:	4013      	ands	r3, r2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d033      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2220      	movs	r2, #32
 80024d2:	4013      	ands	r3, r2
 80024d4:	d02e      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80024d6:	4b50      	ldr	r3, [pc, #320]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024da:	4a51      	ldr	r2, [pc, #324]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80024dc:	4013      	ands	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024e6:	2180      	movs	r1, #128	@ 0x80
 80024e8:	0309      	lsls	r1, r1, #12
 80024ea:	430a      	orrs	r2, r1
 80024ec:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024f2:	4b49      	ldr	r3, [pc, #292]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024f4:	494b      	ldr	r1, [pc, #300]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80024f6:	400a      	ands	r2, r1
 80024f8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80024fa:	4b47      	ldr	r3, [pc, #284]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4013      	ands	r3, r2
 8002508:	d014      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7fe fc33 	bl	8000d74 <HAL_GetTick>
 800250e:	0003      	movs	r3, r0
 8002510:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002512:	e009      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fc2e 	bl	8000d74 <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	4a42      	ldr	r2, [pc, #264]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e072      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002528:	4b3b      	ldr	r3, [pc, #236]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800252a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d0ef      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2220      	movs	r2, #32
 800253a:	4013      	ands	r3, r2
 800253c:	d01f      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	23c0      	movs	r3, #192	@ 0xc0
 8002544:	029b      	lsls	r3, r3, #10
 8002546:	401a      	ands	r2, r3
 8002548:	23c0      	movs	r3, #192	@ 0xc0
 800254a:	029b      	lsls	r3, r3, #10
 800254c:	429a      	cmp	r2, r3
 800254e:	d10c      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002550:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a35      	ldr	r2, [pc, #212]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002556:	4013      	ands	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	23c0      	movs	r3, #192	@ 0xc0
 8002560:	039b      	lsls	r3, r3, #14
 8002562:	401a      	ands	r2, r3
 8002564:	4b2c      	ldr	r3, [pc, #176]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	4b2b      	ldr	r3, [pc, #172]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800256c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	23c0      	movs	r3, #192	@ 0xc0
 8002574:	029b      	lsls	r3, r3, #10
 8002576:	401a      	ands	r2, r3
 8002578:	4b27      	ldr	r3, [pc, #156]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800257a:	430a      	orrs	r2, r1
 800257c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800257e:	2317      	movs	r3, #23
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4b23      	ldr	r3, [pc, #140]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800258a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800258c:	4b22      	ldr	r3, [pc, #136]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800258e:	4928      	ldr	r1, [pc, #160]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002590:	400a      	ands	r2, r1
 8002592:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2202      	movs	r2, #2
 800259a:	4013      	ands	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800259e:	4b1e      	ldr	r3, [pc, #120]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	220c      	movs	r2, #12
 80025a4:	4393      	bics	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ae:	430a      	orrs	r2, r1
 80025b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2204      	movs	r2, #4
 80025b8:	4013      	ands	r3, r2
 80025ba:	d009      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025bc:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025cc:	430a      	orrs	r2, r1
 80025ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2208      	movs	r2, #8
 80025d6:	4013      	ands	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	4a16      	ldr	r2, [pc, #88]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ea:	430a      	orrs	r2, r1
 80025ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2280      	movs	r2, #128	@ 0x80
 80025f4:	4013      	ands	r3, r2
 80025f6:	d009      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80025f8:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fc:	4a0f      	ldr	r2, [pc, #60]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80025fe:	4013      	ands	r3, r2
 8002600:	0019      	movs	r1, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002608:	430a      	orrs	r2, r1
 800260a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	0018      	movs	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	b006      	add	sp, #24
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	40021000 	.word	0x40021000
 800261c:	40007000 	.word	0x40007000
 8002620:	fffcffff 	.word	0xfffcffff
 8002624:	fff7ffff 	.word	0xfff7ffff
 8002628:	00001388 	.word	0x00001388
 800262c:	ffcfffff 	.word	0xffcfffff
 8002630:	efffffff 	.word	0xefffffff
 8002634:	fffff3ff 	.word	0xfffff3ff
 8002638:	ffffcfff 	.word	0xffffcfff
 800263c:	fff3ffff 	.word	0xfff3ffff

08002640 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002648:	230f      	movs	r3, #15
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e088      	b.n	800276c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2221      	movs	r2, #33	@ 0x21
 800265e:	5c9b      	ldrb	r3, [r3, r2]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2220      	movs	r2, #32
 800266a:	2100      	movs	r1, #0
 800266c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	0018      	movs	r0, r3
 8002672:	f7fe fa8b 	bl	8000b8c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2221      	movs	r2, #33	@ 0x21
 800267a:	2102      	movs	r1, #2
 800267c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2210      	movs	r2, #16
 8002686:	4013      	ands	r3, r2
 8002688:	2b10      	cmp	r3, #16
 800268a:	d05f      	beq.n	800274c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	22ca      	movs	r2, #202	@ 0xca
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2253      	movs	r2, #83	@ 0x53
 800269a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800269c:	250f      	movs	r5, #15
 800269e:	197c      	adds	r4, r7, r5
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	0018      	movs	r0, r3
 80026a4:	f000 f890 	bl	80027c8 <RTC_EnterInitMode>
 80026a8:	0003      	movs	r3, r0
 80026aa:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80026ac:	0028      	movs	r0, r5
 80026ae:	183b      	adds	r3, r7, r0
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d12c      	bne.n	8002710 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	492c      	ldr	r1, [pc, #176]	@ (8002774 <HAL_RTC_Init+0x134>)
 80026c2:	400a      	ands	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6899      	ldr	r1, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	68d2      	ldr	r2, [r2, #12]
 80026ec:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6919      	ldr	r1, [r3, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	041a      	lsls	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002702:	183c      	adds	r4, r7, r0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f8a2 	bl	8002850 <RTC_ExitInitMode>
 800270c:	0003      	movs	r3, r0
 800270e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002710:	230f      	movs	r3, #15
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d113      	bne.n	8002742 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2103      	movs	r1, #3
 8002726:	438a      	bics	r2, r1
 8002728:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	22ff      	movs	r2, #255	@ 0xff
 8002748:	625a      	str	r2, [r3, #36]	@ 0x24
 800274a:	e003      	b.n	8002754 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800274c:	230f      	movs	r3, #15
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002754:	230f      	movs	r3, #15
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2221      	movs	r2, #33	@ 0x21
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002766:	230f      	movs	r3, #15
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	781b      	ldrb	r3, [r3, #0]
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b004      	add	sp, #16
 8002772:	bdb0      	pop	{r4, r5, r7, pc}
 8002774:	ff8fffbf 	.word	0xff8fffbf

08002778 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0e      	ldr	r2, [pc, #56]	@ (80027c4 <HAL_RTC_WaitForSynchro+0x4c>)
 800278a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800278c:	f7fe faf2 	bl	8000d74 <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002794:	e00a      	b.n	80027ac <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002796:	f7fe faed 	bl	8000d74 <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad2      	subs	r2, r2, r3
 80027a0:	23fa      	movs	r3, #250	@ 0xfa
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d901      	bls.n	80027ac <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e006      	b.n	80027ba <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	4013      	ands	r3, r2
 80027b6:	d0ee      	beq.n	8002796 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b004      	add	sp, #16
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	0001ff5f 	.word	0x0001ff5f

080027c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80027d4:	230f      	movs	r3, #15
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2240      	movs	r2, #64	@ 0x40
 80027e4:	4013      	ands	r3, r2
 80027e6:	d12c      	bne.n	8002842 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	430a      	orrs	r2, r1
 80027f6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027f8:	f7fe fabc 	bl	8000d74 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002800:	e014      	b.n	800282c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002802:	f7fe fab7 	bl	8000d74 <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	1ad2      	subs	r2, r2, r3
 800280c:	200f      	movs	r0, #15
 800280e:	183b      	adds	r3, r7, r0
 8002810:	1839      	adds	r1, r7, r0
 8002812:	7809      	ldrb	r1, [r1, #0]
 8002814:	7019      	strb	r1, [r3, #0]
 8002816:	23fa      	movs	r3, #250	@ 0xfa
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	429a      	cmp	r2, r3
 800281c:	d906      	bls.n	800282c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2221      	movs	r2, #33	@ 0x21
 8002822:	2104      	movs	r1, #4
 8002824:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002826:	183b      	adds	r3, r7, r0
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2240      	movs	r2, #64	@ 0x40
 8002834:	4013      	ands	r3, r2
 8002836:	d104      	bne.n	8002842 <RTC_EnterInitMode+0x7a>
 8002838:	230f      	movs	r3, #15
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d1df      	bne.n	8002802 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002842:	230f      	movs	r3, #15
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	781b      	ldrb	r3, [r3, #0]
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b004      	add	sp, #16
 800284e:	bd80      	pop	{r7, pc}

08002850 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002858:	240f      	movs	r4, #15
 800285a:	193b      	adds	r3, r7, r4
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2180      	movs	r1, #128	@ 0x80
 800286c:	438a      	bics	r2, r1
 800286e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2220      	movs	r2, #32
 8002878:	4013      	ands	r3, r2
 800287a:	d10c      	bne.n	8002896 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	0018      	movs	r0, r3
 8002880:	f7ff ff7a 	bl	8002778 <HAL_RTC_WaitForSynchro>
 8002884:	1e03      	subs	r3, r0, #0
 8002886:	d006      	beq.n	8002896 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2221      	movs	r2, #33	@ 0x21
 800288c:	2104      	movs	r1, #4
 800288e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002890:	193b      	adds	r3, r7, r4
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002896:	230f      	movs	r3, #15
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	781b      	ldrb	r3, [r3, #0]
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b005      	add	sp, #20
 80028a2:	bd90      	pop	{r4, r7, pc}

080028a4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80028b0:	4b64      	ldr	r3, [pc, #400]	@ (8002a44 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	22fa      	movs	r2, #250	@ 0xfa
 80028b6:	01d1      	lsls	r1, r2, #7
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7fd fc25 	bl	8000108 <__udivsi3>
 80028be:	0003      	movs	r3, r0
 80028c0:	001a      	movs	r2, r3
 80028c2:	0013      	movs	r3, r2
 80028c4:	015b      	lsls	r3, r3, #5
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	189b      	adds	r3, r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	5c9b      	ldrb	r3, [r3, r2]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80028da:	2302      	movs	r3, #2
 80028dc:	e0ad      	b.n	8002a3a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2220      	movs	r2, #32
 80028e2:	2101      	movs	r1, #1
 80028e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2221      	movs	r2, #33	@ 0x21
 80028ea:	2102      	movs	r1, #2
 80028ec:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	22ca      	movs	r2, #202	@ 0xca
 80028f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2253      	movs	r2, #83	@ 0x53
 80028fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4013      	ands	r3, r2
 800290a:	d019      	beq.n	8002940 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3b01      	subs	r3, #1
 8002910:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10d      	bne.n	8002934 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	22ff      	movs	r2, #255	@ 0xff
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2221      	movs	r2, #33	@ 0x21
 8002924:	2103      	movs	r1, #3
 8002926:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	2100      	movs	r1, #0
 800292e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e082      	b.n	8002a3a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2204      	movs	r2, #4
 800293c:	4013      	ands	r3, r2
 800293e:	d1e5      	bne.n	800290c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	493f      	ldr	r1, [pc, #252]	@ (8002a48 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 800294c:	400a      	ands	r2, r1
 800294e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	22ff      	movs	r2, #255	@ 0xff
 8002958:	401a      	ands	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	493b      	ldr	r1, [pc, #236]	@ (8002a4c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8002960:	430a      	orrs	r2, r1
 8002962:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002964:	4b37      	ldr	r3, [pc, #220]	@ (8002a44 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	22fa      	movs	r2, #250	@ 0xfa
 800296a:	01d1      	lsls	r1, r2, #7
 800296c:	0018      	movs	r0, r3
 800296e:	f7fd fbcb 	bl	8000108 <__udivsi3>
 8002972:	0003      	movs	r3, r0
 8002974:	001a      	movs	r2, r3
 8002976:	0013      	movs	r3, r2
 8002978:	015b      	lsls	r3, r3, #5
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	189b      	adds	r3, r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3b01      	subs	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10d      	bne.n	80029ac <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	22ff      	movs	r2, #255	@ 0xff
 8002996:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2221      	movs	r2, #33	@ 0x21
 800299c:	2103      	movs	r1, #3
 800299e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	2100      	movs	r1, #0
 80029a6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e046      	b.n	8002a3a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2204      	movs	r2, #4
 80029b4:	4013      	ands	r3, r2
 80029b6:	d0e5      	beq.n	8002984 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2107      	movs	r1, #7
 80029c4:	438a      	bics	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6899      	ldr	r1, [r3, #8]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80029e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a50 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80029e6:	2180      	movs	r1, #128	@ 0x80
 80029e8:	0349      	lsls	r1, r1, #13
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80029ee:	4b18      	ldr	r3, [pc, #96]	@ (8002a50 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80029f4:	2180      	movs	r1, #128	@ 0x80
 80029f6:	0349      	lsls	r1, r1, #13
 80029f8:	430a      	orrs	r2, r1
 80029fa:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2180      	movs	r1, #128	@ 0x80
 8002a08:	01c9      	lsls	r1, r1, #7
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2180      	movs	r1, #128	@ 0x80
 8002a1a:	00c9      	lsls	r1, r1, #3
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	22ff      	movs	r2, #255	@ 0xff
 8002a26:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2221      	movs	r2, #33	@ 0x21
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	2100      	movs	r1, #0
 8002a36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b006      	add	sp, #24
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	20000000 	.word	0x20000000
 8002a48:	fffffbff 	.word	0xfffffbff
 8002a4c:	fffffb7f 	.word	0xfffffb7f
 8002a50:	40010400 	.word	0x40010400

08002a54 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	5c9b      	ldrb	r3, [r3, r2]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e04e      	b.n	8002b0c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2220      	movs	r2, #32
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2221      	movs	r2, #33	@ 0x21
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	22ca      	movs	r2, #202	@ 0xca
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2253      	movs	r2, #83	@ 0x53
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	491e      	ldr	r1, [pc, #120]	@ (8002b14 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	491b      	ldr	r1, [pc, #108]	@ (8002b18 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8002aaa:	400a      	ands	r2, r1
 8002aac:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aae:	f7fe f961 	bl	8000d74 <HAL_GetTick>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002ab6:	e016      	b.n	8002ae6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ab8:	f7fe f95c 	bl	8000d74 <HAL_GetTick>
 8002abc:	0002      	movs	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad2      	subs	r2, r2, r3
 8002ac2:	23fa      	movs	r3, #250	@ 0xfa
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d90d      	bls.n	8002ae6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	22ff      	movs	r2, #255	@ 0xff
 8002ad0:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2221      	movs	r2, #33	@ 0x21
 8002ad6:	2103      	movs	r1, #3
 8002ad8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e012      	b.n	8002b0c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2204      	movs	r2, #4
 8002aee:	4013      	ands	r3, r2
 8002af0:	d0e2      	beq.n	8002ab8 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	22ff      	movs	r2, #255	@ 0xff
 8002af8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2221      	movs	r2, #33	@ 0x21
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	2100      	movs	r1, #0
 8002b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b004      	add	sp, #16
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	fffffbff 	.word	0xfffffbff
 8002b18:	ffffbfff 	.word	0xffffbfff

08002b1c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002b24:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8002b26:	2280      	movs	r2, #128	@ 0x80
 8002b28:	0352      	lsls	r2, r2, #13
 8002b2a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	2380      	movs	r3, #128	@ 0x80
 8002b34:	01db      	lsls	r3, r3, #7
 8002b36:	4013      	ands	r3, r2
 8002b38:	d014      	beq.n	8002b64 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	2380      	movs	r3, #128	@ 0x80
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4013      	ands	r3, r2
 8002b46:	d00d      	beq.n	8002b64 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	22ff      	movs	r2, #255	@ 0xff
 8002b50:	401a      	ands	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4908      	ldr	r1, [pc, #32]	@ (8002b78 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f000 f80c 	bl	8002b7c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2221      	movs	r2, #33	@ 0x21
 8002b68:	2101      	movs	r1, #1
 8002b6a:	5499      	strb	r1, [r3, r2]
}
 8002b6c:	46c0      	nop			@ (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40010400 	.word	0x40010400
 8002b78:	fffffb7f 	.word	0xfffffb7f

08002b7c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002b84:	46c0      	nop			@ (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e044      	b.n	8002c28 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d107      	bne.n	8002bb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2278      	movs	r2, #120	@ 0x78
 8002baa:	2100      	movs	r1, #0
 8002bac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7fd ff65 	bl	8000a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2224      	movs	r2, #36	@ 0x24
 8002bba:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	438a      	bics	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 fb2e 	bl	8003230 <UART_SetConfig>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e024      	b.n	8002c28 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 fd6b 	bl	80036c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	490d      	ldr	r1, [pc, #52]	@ (8002c30 <HAL_UART_Init+0xa4>)
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	212a      	movs	r1, #42	@ 0x2a
 8002c0a:	438a      	bics	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2101      	movs	r1, #1
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f000 fe03 	bl	800382c <UART_CheckIdleState>
 8002c26:	0003      	movs	r3, r0
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	ffffb7ff 	.word	0xffffb7ff

08002c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b0ab      	sub	sp, #172	@ 0xac
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	22a4      	movs	r2, #164	@ 0xa4
 8002c44:	18b9      	adds	r1, r7, r2
 8002c46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	20a0      	movs	r0, #160	@ 0xa0
 8002c50:	1839      	adds	r1, r7, r0
 8002c52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	219c      	movs	r1, #156	@ 0x9c
 8002c5c:	1879      	adds	r1, r7, r1
 8002c5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c60:	0011      	movs	r1, r2
 8002c62:	18bb      	adds	r3, r7, r2
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a99      	ldr	r2, [pc, #612]	@ (8002ecc <HAL_UART_IRQHandler+0x298>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2298      	movs	r2, #152	@ 0x98
 8002c6c:	18bc      	adds	r4, r7, r2
 8002c6e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002c70:	18bb      	adds	r3, r7, r2
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d114      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d00f      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c82:	183b      	adds	r3, r7, r0
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2220      	movs	r2, #32
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d100      	bne.n	8002c96 <HAL_UART_IRQHandler+0x62>
 8002c94:	e2a0      	b.n	80031d8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	0010      	movs	r0, r2
 8002c9e:	4798      	blx	r3
      }
      return;
 8002ca0:	e29a      	b.n	80031d8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ca2:	2398      	movs	r3, #152	@ 0x98
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d100      	bne.n	8002cae <HAL_UART_IRQHandler+0x7a>
 8002cac:	e114      	b.n	8002ed8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cae:	239c      	movs	r3, #156	@ 0x9c
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d106      	bne.n	8002cc8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002cba:	23a0      	movs	r3, #160	@ 0xa0
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a83      	ldr	r2, [pc, #524]	@ (8002ed0 <HAL_UART_IRQHandler+0x29c>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d100      	bne.n	8002cc8 <HAL_UART_IRQHandler+0x94>
 8002cc6:	e107      	b.n	8002ed8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cc8:	23a4      	movs	r3, #164	@ 0xa4
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d012      	beq.n	8002cfa <HAL_UART_IRQHandler+0xc6>
 8002cd4:	23a0      	movs	r3, #160	@ 0xa0
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d00b      	beq.n	8002cfa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2284      	movs	r2, #132	@ 0x84
 8002cee:	589b      	ldr	r3, [r3, r2]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2184      	movs	r1, #132	@ 0x84
 8002cf8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cfa:	23a4      	movs	r3, #164	@ 0xa4
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2202      	movs	r2, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d011      	beq.n	8002d2a <HAL_UART_IRQHandler+0xf6>
 8002d06:	239c      	movs	r3, #156	@ 0x9c
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2202      	movs	r2, #2
 8002d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2284      	movs	r2, #132	@ 0x84
 8002d1e:	589b      	ldr	r3, [r3, r2]
 8002d20:	2204      	movs	r2, #4
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2184      	movs	r1, #132	@ 0x84
 8002d28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d2a:	23a4      	movs	r3, #164	@ 0xa4
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2204      	movs	r2, #4
 8002d32:	4013      	ands	r3, r2
 8002d34:	d011      	beq.n	8002d5a <HAL_UART_IRQHandler+0x126>
 8002d36:	239c      	movs	r3, #156	@ 0x9c
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d00b      	beq.n	8002d5a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2204      	movs	r2, #4
 8002d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2284      	movs	r2, #132	@ 0x84
 8002d4e:	589b      	ldr	r3, [r3, r2]
 8002d50:	2202      	movs	r2, #2
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2184      	movs	r1, #132	@ 0x84
 8002d58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d5a:	23a4      	movs	r3, #164	@ 0xa4
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2208      	movs	r2, #8
 8002d62:	4013      	ands	r3, r2
 8002d64:	d017      	beq.n	8002d96 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d66:	23a0      	movs	r3, #160	@ 0xa0
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d105      	bne.n	8002d7e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d72:	239c      	movs	r3, #156	@ 0x9c
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d7c:	d00b      	beq.n	8002d96 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2208      	movs	r2, #8
 8002d84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2284      	movs	r2, #132	@ 0x84
 8002d8a:	589b      	ldr	r3, [r3, r2]
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2184      	movs	r1, #132	@ 0x84
 8002d94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d96:	23a4      	movs	r3, #164	@ 0xa4
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	4013      	ands	r3, r2
 8002da2:	d013      	beq.n	8002dcc <HAL_UART_IRQHandler+0x198>
 8002da4:	23a0      	movs	r3, #160	@ 0xa0
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	2380      	movs	r3, #128	@ 0x80
 8002dac:	04db      	lsls	r3, r3, #19
 8002dae:	4013      	ands	r3, r2
 8002db0:	d00c      	beq.n	8002dcc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2280      	movs	r2, #128	@ 0x80
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2284      	movs	r2, #132	@ 0x84
 8002dc0:	589b      	ldr	r3, [r3, r2]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2184      	movs	r1, #132	@ 0x84
 8002dca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2284      	movs	r2, #132	@ 0x84
 8002dd0:	589b      	ldr	r3, [r3, r2]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d100      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x1a4>
 8002dd6:	e201      	b.n	80031dc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dd8:	23a4      	movs	r3, #164	@ 0xa4
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2220      	movs	r2, #32
 8002de0:	4013      	ands	r3, r2
 8002de2:	d00e      	beq.n	8002e02 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002de4:	23a0      	movs	r3, #160	@ 0xa0
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2220      	movs	r2, #32
 8002dec:	4013      	ands	r3, r2
 8002dee:	d008      	beq.n	8002e02 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	0010      	movs	r0, r2
 8002e00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2284      	movs	r2, #132	@ 0x84
 8002e06:	589b      	ldr	r3, [r3, r2]
 8002e08:	2194      	movs	r1, #148	@ 0x94
 8002e0a:	187a      	adds	r2, r7, r1
 8002e0c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2240      	movs	r2, #64	@ 0x40
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b40      	cmp	r3, #64	@ 0x40
 8002e1a:	d004      	beq.n	8002e26 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2228      	movs	r2, #40	@ 0x28
 8002e22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e24:	d047      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f000 fe11 	bl	8003a50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2240      	movs	r2, #64	@ 0x40
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b40      	cmp	r3, #64	@ 0x40
 8002e3a:	d137      	bne.n	8002eac <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e40:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002e42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e44:	2090      	movs	r0, #144	@ 0x90
 8002e46:	183a      	adds	r2, r7, r0
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e50:	f383 8810 	msr	PRIMASK, r3
}
 8002e54:	46c0      	nop			@ (mov r8, r8)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2140      	movs	r1, #64	@ 0x40
 8002e62:	438a      	bics	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	183b      	adds	r3, r7, r0
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e6e:	f383 8810 	msr	PRIMASK, r3
}
 8002e72:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e80:	4a14      	ldr	r2, [pc, #80]	@ (8002ed4 <HAL_UART_IRQHandler+0x2a0>)
 8002e82:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7fe fad9 	bl	8001440 <HAL_DMA_Abort_IT>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d01a      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea0:	e012      	b.n	8002ec8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f000 f9af 	bl	8003208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eaa:	e00d      	b.n	8002ec8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 f9aa 	bl	8003208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	e008      	b.n	8002ec8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f000 f9a5 	bl	8003208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2284      	movs	r2, #132	@ 0x84
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002ec6:	e189      	b.n	80031dc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec8:	46c0      	nop			@ (mov r8, r8)
    return;
 8002eca:	e187      	b.n	80031dc <HAL_UART_IRQHandler+0x5a8>
 8002ecc:	0000080f 	.word	0x0000080f
 8002ed0:	04000120 	.word	0x04000120
 8002ed4:	08003b19 	.word	0x08003b19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d000      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x2ae>
 8002ee0:	e13b      	b.n	800315a <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ee2:	23a4      	movs	r3, #164	@ 0xa4
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2210      	movs	r2, #16
 8002eea:	4013      	ands	r3, r2
 8002eec:	d100      	bne.n	8002ef0 <HAL_UART_IRQHandler+0x2bc>
 8002eee:	e134      	b.n	800315a <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ef0:	23a0      	movs	r3, #160	@ 0xa0
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d100      	bne.n	8002efe <HAL_UART_IRQHandler+0x2ca>
 8002efc:	e12d      	b.n	800315a <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2210      	movs	r2, #16
 8002f04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2240      	movs	r2, #64	@ 0x40
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b40      	cmp	r3, #64	@ 0x40
 8002f12:	d000      	beq.n	8002f16 <HAL_UART_IRQHandler+0x2e2>
 8002f14:	e0a1      	b.n	800305a <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	217e      	movs	r1, #126	@ 0x7e
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d100      	bne.n	8002f2e <HAL_UART_IRQHandler+0x2fa>
 8002f2c:	e158      	b.n	80031e0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2258      	movs	r2, #88	@ 0x58
 8002f32:	5a9b      	ldrh	r3, [r3, r2]
 8002f34:	187a      	adds	r2, r7, r1
 8002f36:	8812      	ldrh	r2, [r2, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d300      	bcc.n	8002f3e <HAL_UART_IRQHandler+0x30a>
 8002f3c:	e150      	b.n	80031e0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	187a      	adds	r2, r7, r1
 8002f42:	215a      	movs	r1, #90	@ 0x5a
 8002f44:	8812      	ldrh	r2, [r2, #0]
 8002f46:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2220      	movs	r2, #32
 8002f52:	4013      	ands	r3, r2
 8002f54:	d16f      	bne.n	8003036 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f56:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f60:	2301      	movs	r3, #1
 8002f62:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f66:	f383 8810 	msr	PRIMASK, r3
}
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	499e      	ldr	r1, [pc, #632]	@ (80031f0 <HAL_UART_IRQHandler+0x5bc>)
 8002f78:	400a      	ands	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f82:	f383 8810 	msr	PRIMASK, r3
}
 8002f86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f88:	f3ef 8310 	mrs	r3, PRIMASK
 8002f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f90:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f92:	2301      	movs	r3, #1
 8002f94:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f98:	f383 8810 	msr	PRIMASK, r3
}
 8002f9c:	46c0      	nop			@ (mov r8, r8)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	438a      	bics	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fb0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb4:	f383 8810 	msr	PRIMASK, r3
}
 8002fb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fba:	f3ef 8310 	mrs	r3, PRIMASK
 8002fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fca:	f383 8810 	msr	PRIMASK, r3
}
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2140      	movs	r1, #64	@ 0x40
 8002fdc:	438a      	bics	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fe2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fe6:	f383 8810 	msr	PRIMASK, r3
}
 8002fea:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2280      	movs	r2, #128	@ 0x80
 8002ff0:	2120      	movs	r1, #32
 8002ff2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffe:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003002:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003004:	2301      	movs	r3, #1
 8003006:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003008:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800300a:	f383 8810 	msr	PRIMASK, r3
}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2110      	movs	r1, #16
 800301c:	438a      	bics	r2, r1
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003022:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003026:	f383 8810 	msr	PRIMASK, r3
}
 800302a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003030:	0018      	movs	r0, r3
 8003032:	f7fe f9c5 	bl	80013c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2258      	movs	r2, #88	@ 0x58
 8003040:	5a9a      	ldrh	r2, [r3, r2]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	215a      	movs	r1, #90	@ 0x5a
 8003046:	5a5b      	ldrh	r3, [r3, r1]
 8003048:	b29b      	uxth	r3, r3
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	b29a      	uxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	0011      	movs	r1, r2
 8003052:	0018      	movs	r0, r3
 8003054:	f000 f8e0 	bl	8003218 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003058:	e0c2      	b.n	80031e0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2258      	movs	r2, #88	@ 0x58
 800305e:	5a99      	ldrh	r1, [r3, r2]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	225a      	movs	r2, #90	@ 0x5a
 8003064:	5a9b      	ldrh	r3, [r3, r2]
 8003066:	b29a      	uxth	r2, r3
 8003068:	208e      	movs	r0, #142	@ 0x8e
 800306a:	183b      	adds	r3, r7, r0
 800306c:	1a8a      	subs	r2, r1, r2
 800306e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	225a      	movs	r2, #90	@ 0x5a
 8003074:	5a9b      	ldrh	r3, [r3, r2]
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d100      	bne.n	800307e <HAL_UART_IRQHandler+0x44a>
 800307c:	e0b2      	b.n	80031e4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800307e:	183b      	adds	r3, r7, r0
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d100      	bne.n	8003088 <HAL_UART_IRQHandler+0x454>
 8003086:	e0ad      	b.n	80031e4 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003088:	f3ef 8310 	mrs	r3, PRIMASK
 800308c:	60fb      	str	r3, [r7, #12]
  return(result);
 800308e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003090:	2488      	movs	r4, #136	@ 0x88
 8003092:	193a      	adds	r2, r7, r4
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	2301      	movs	r3, #1
 8003098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4951      	ldr	r1, [pc, #324]	@ (80031f4 <HAL_UART_IRQHandler+0x5c0>)
 80030ae:	400a      	ands	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	193b      	adds	r3, r7, r4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f383 8810 	msr	PRIMASK, r3
}
 80030be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c0:	f3ef 8310 	mrs	r3, PRIMASK
 80030c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80030c6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c8:	2484      	movs	r4, #132	@ 0x84
 80030ca:	193a      	adds	r2, r7, r4
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	2301      	movs	r3, #1
 80030d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f383 8810 	msr	PRIMASK, r3
}
 80030d8:	46c0      	nop			@ (mov r8, r8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	438a      	bics	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	f383 8810 	msr	PRIMASK, r3
}
 80030f6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2280      	movs	r2, #128	@ 0x80
 80030fc:	2120      	movs	r1, #32
 80030fe:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310c:	f3ef 8310 	mrs	r3, PRIMASK
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003114:	2480      	movs	r4, #128	@ 0x80
 8003116:	193a      	adds	r2, r7, r4
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	2301      	movs	r3, #1
 800311c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003120:	f383 8810 	msr	PRIMASK, r3
}
 8003124:	46c0      	nop			@ (mov r8, r8)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2110      	movs	r1, #16
 8003132:	438a      	bics	r2, r1
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	193b      	adds	r3, r7, r4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313e:	f383 8810 	msr	PRIMASK, r3
}
 8003142:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800314a:	183b      	adds	r3, r7, r0
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	0011      	movs	r1, r2
 8003152:	0018      	movs	r0, r3
 8003154:	f000 f860 	bl	8003218 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003158:	e044      	b.n	80031e4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800315a:	23a4      	movs	r3, #164	@ 0xa4
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	2380      	movs	r3, #128	@ 0x80
 8003162:	035b      	lsls	r3, r3, #13
 8003164:	4013      	ands	r3, r2
 8003166:	d010      	beq.n	800318a <HAL_UART_IRQHandler+0x556>
 8003168:	239c      	movs	r3, #156	@ 0x9c
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	2380      	movs	r3, #128	@ 0x80
 8003170:	03db      	lsls	r3, r3, #15
 8003172:	4013      	ands	r3, r2
 8003174:	d009      	beq.n	800318a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2280      	movs	r2, #128	@ 0x80
 800317c:	0352      	lsls	r2, r2, #13
 800317e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0018      	movs	r0, r3
 8003184:	f000 fd0a 	bl	8003b9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003188:	e02f      	b.n	80031ea <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800318a:	23a4      	movs	r3, #164	@ 0xa4
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2280      	movs	r2, #128	@ 0x80
 8003192:	4013      	ands	r3, r2
 8003194:	d00f      	beq.n	80031b6 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003196:	23a0      	movs	r3, #160	@ 0xa0
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2280      	movs	r2, #128	@ 0x80
 800319e:	4013      	ands	r3, r2
 80031a0:	d009      	beq.n	80031b6 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01e      	beq.n	80031e8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	0010      	movs	r0, r2
 80031b2:	4798      	blx	r3
    }
    return;
 80031b4:	e018      	b.n	80031e8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031b6:	23a4      	movs	r3, #164	@ 0xa4
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2240      	movs	r2, #64	@ 0x40
 80031be:	4013      	ands	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_UART_IRQHandler+0x5b6>
 80031c2:	23a0      	movs	r3, #160	@ 0xa0
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2240      	movs	r2, #64	@ 0x40
 80031ca:	4013      	ands	r3, r2
 80031cc:	d00d      	beq.n	80031ea <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f000 fcb8 	bl	8003b46 <UART_EndTransmit_IT>
    return;
 80031d6:	e008      	b.n	80031ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80031d8:	46c0      	nop			@ (mov r8, r8)
 80031da:	e006      	b.n	80031ea <HAL_UART_IRQHandler+0x5b6>
    return;
 80031dc:	46c0      	nop			@ (mov r8, r8)
 80031de:	e004      	b.n	80031ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80031e0:	46c0      	nop			@ (mov r8, r8)
 80031e2:	e002      	b.n	80031ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80031e4:	46c0      	nop			@ (mov r8, r8)
 80031e6:	e000      	b.n	80031ea <HAL_UART_IRQHandler+0x5b6>
    return;
 80031e8:	46c0      	nop			@ (mov r8, r8)
  }

}
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b02b      	add	sp, #172	@ 0xac
 80031ee:	bd90      	pop	{r4, r7, pc}
 80031f0:	fffffeff 	.word	0xfffffeff
 80031f4:	fffffedf 	.word	0xfffffedf

080031f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003200:	46c0      	nop			@ (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b002      	add	sp, #8
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003210:	46c0      	nop			@ (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b002      	add	sp, #8
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	000a      	movs	r2, r1
 8003222:	1cbb      	adds	r3, r7, #2
 8003224:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003226:	46c0      	nop			@ (mov r8, r8)
 8003228:	46bd      	mov	sp, r7
 800322a:	b002      	add	sp, #8
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003230:	b5b0      	push	{r4, r5, r7, lr}
 8003232:	b08e      	sub	sp, #56	@ 0x38
 8003234:	af00      	add	r7, sp, #0
 8003236:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003238:	231a      	movs	r3, #26
 800323a:	2218      	movs	r2, #24
 800323c:	189b      	adds	r3, r3, r2
 800323e:	19db      	adds	r3, r3, r7
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	431a      	orrs	r2, r3
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	431a      	orrs	r2, r3
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	4313      	orrs	r3, r2
 800325a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4ab4      	ldr	r2, [pc, #720]	@ (8003534 <UART_SetConfig+0x304>)
 8003264:	4013      	ands	r3, r2
 8003266:	0019      	movs	r1, r3
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4aaf      	ldr	r2, [pc, #700]	@ (8003538 <UART_SetConfig+0x308>)
 800327a:	4013      	ands	r3, r2
 800327c:	0019      	movs	r1, r3
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4aa9      	ldr	r2, [pc, #676]	@ (800353c <UART_SetConfig+0x30c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032a0:	4313      	orrs	r3, r2
 80032a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	4aa5      	ldr	r2, [pc, #660]	@ (8003540 <UART_SetConfig+0x310>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032b6:	430a      	orrs	r2, r1
 80032b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4aa1      	ldr	r2, [pc, #644]	@ (8003544 <UART_SetConfig+0x314>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d131      	bne.n	8003328 <UART_SetConfig+0xf8>
 80032c4:	4ba0      	ldr	r3, [pc, #640]	@ (8003548 <UART_SetConfig+0x318>)
 80032c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c8:	220c      	movs	r2, #12
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	d01d      	beq.n	800330c <UART_SetConfig+0xdc>
 80032d0:	d823      	bhi.n	800331a <UART_SetConfig+0xea>
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d00c      	beq.n	80032f0 <UART_SetConfig+0xc0>
 80032d6:	d820      	bhi.n	800331a <UART_SetConfig+0xea>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <UART_SetConfig+0xb2>
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d00e      	beq.n	80032fe <UART_SetConfig+0xce>
 80032e0:	e01b      	b.n	800331a <UART_SetConfig+0xea>
 80032e2:	231b      	movs	r3, #27
 80032e4:	2218      	movs	r2, #24
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	19db      	adds	r3, r3, r7
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e065      	b.n	80033bc <UART_SetConfig+0x18c>
 80032f0:	231b      	movs	r3, #27
 80032f2:	2218      	movs	r2, #24
 80032f4:	189b      	adds	r3, r3, r2
 80032f6:	19db      	adds	r3, r3, r7
 80032f8:	2202      	movs	r2, #2
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e05e      	b.n	80033bc <UART_SetConfig+0x18c>
 80032fe:	231b      	movs	r3, #27
 8003300:	2218      	movs	r2, #24
 8003302:	189b      	adds	r3, r3, r2
 8003304:	19db      	adds	r3, r3, r7
 8003306:	2204      	movs	r2, #4
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	e057      	b.n	80033bc <UART_SetConfig+0x18c>
 800330c:	231b      	movs	r3, #27
 800330e:	2218      	movs	r2, #24
 8003310:	189b      	adds	r3, r3, r2
 8003312:	19db      	adds	r3, r3, r7
 8003314:	2208      	movs	r2, #8
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e050      	b.n	80033bc <UART_SetConfig+0x18c>
 800331a:	231b      	movs	r3, #27
 800331c:	2218      	movs	r2, #24
 800331e:	189b      	adds	r3, r3, r2
 8003320:	19db      	adds	r3, r3, r7
 8003322:	2210      	movs	r2, #16
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e049      	b.n	80033bc <UART_SetConfig+0x18c>
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a83      	ldr	r2, [pc, #524]	@ (800353c <UART_SetConfig+0x30c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d13e      	bne.n	80033b0 <UART_SetConfig+0x180>
 8003332:	4b85      	ldr	r3, [pc, #532]	@ (8003548 <UART_SetConfig+0x318>)
 8003334:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003336:	23c0      	movs	r3, #192	@ 0xc0
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	4013      	ands	r3, r2
 800333c:	22c0      	movs	r2, #192	@ 0xc0
 800333e:	0112      	lsls	r2, r2, #4
 8003340:	4293      	cmp	r3, r2
 8003342:	d027      	beq.n	8003394 <UART_SetConfig+0x164>
 8003344:	22c0      	movs	r2, #192	@ 0xc0
 8003346:	0112      	lsls	r2, r2, #4
 8003348:	4293      	cmp	r3, r2
 800334a:	d82a      	bhi.n	80033a2 <UART_SetConfig+0x172>
 800334c:	2280      	movs	r2, #128	@ 0x80
 800334e:	0112      	lsls	r2, r2, #4
 8003350:	4293      	cmp	r3, r2
 8003352:	d011      	beq.n	8003378 <UART_SetConfig+0x148>
 8003354:	2280      	movs	r2, #128	@ 0x80
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	4293      	cmp	r3, r2
 800335a:	d822      	bhi.n	80033a2 <UART_SetConfig+0x172>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <UART_SetConfig+0x13a>
 8003360:	2280      	movs	r2, #128	@ 0x80
 8003362:	00d2      	lsls	r2, r2, #3
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <UART_SetConfig+0x156>
 8003368:	e01b      	b.n	80033a2 <UART_SetConfig+0x172>
 800336a:	231b      	movs	r3, #27
 800336c:	2218      	movs	r2, #24
 800336e:	189b      	adds	r3, r3, r2
 8003370:	19db      	adds	r3, r3, r7
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	e021      	b.n	80033bc <UART_SetConfig+0x18c>
 8003378:	231b      	movs	r3, #27
 800337a:	2218      	movs	r2, #24
 800337c:	189b      	adds	r3, r3, r2
 800337e:	19db      	adds	r3, r3, r7
 8003380:	2202      	movs	r2, #2
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e01a      	b.n	80033bc <UART_SetConfig+0x18c>
 8003386:	231b      	movs	r3, #27
 8003388:	2218      	movs	r2, #24
 800338a:	189b      	adds	r3, r3, r2
 800338c:	19db      	adds	r3, r3, r7
 800338e:	2204      	movs	r2, #4
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e013      	b.n	80033bc <UART_SetConfig+0x18c>
 8003394:	231b      	movs	r3, #27
 8003396:	2218      	movs	r2, #24
 8003398:	189b      	adds	r3, r3, r2
 800339a:	19db      	adds	r3, r3, r7
 800339c:	2208      	movs	r2, #8
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e00c      	b.n	80033bc <UART_SetConfig+0x18c>
 80033a2:	231b      	movs	r3, #27
 80033a4:	2218      	movs	r2, #24
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	19db      	adds	r3, r3, r7
 80033aa:	2210      	movs	r2, #16
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e005      	b.n	80033bc <UART_SetConfig+0x18c>
 80033b0:	231b      	movs	r3, #27
 80033b2:	2218      	movs	r2, #24
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	19db      	adds	r3, r3, r7
 80033b8:	2210      	movs	r2, #16
 80033ba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a5e      	ldr	r2, [pc, #376]	@ (800353c <UART_SetConfig+0x30c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d000      	beq.n	80033c8 <UART_SetConfig+0x198>
 80033c6:	e084      	b.n	80034d2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033c8:	231b      	movs	r3, #27
 80033ca:	2218      	movs	r2, #24
 80033cc:	189b      	adds	r3, r3, r2
 80033ce:	19db      	adds	r3, r3, r7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d01d      	beq.n	8003412 <UART_SetConfig+0x1e2>
 80033d6:	dc20      	bgt.n	800341a <UART_SetConfig+0x1ea>
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d015      	beq.n	8003408 <UART_SetConfig+0x1d8>
 80033dc:	dc1d      	bgt.n	800341a <UART_SetConfig+0x1ea>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <UART_SetConfig+0x1b8>
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d005      	beq.n	80033f2 <UART_SetConfig+0x1c2>
 80033e6:	e018      	b.n	800341a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e8:	f7fe ffd2 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 80033ec:	0003      	movs	r3, r0
 80033ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033f0:	e01c      	b.n	800342c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033f2:	4b55      	ldr	r3, [pc, #340]	@ (8003548 <UART_SetConfig+0x318>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2210      	movs	r2, #16
 80033f8:	4013      	ands	r3, r2
 80033fa:	d002      	beq.n	8003402 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80033fc:	4b53      	ldr	r3, [pc, #332]	@ (800354c <UART_SetConfig+0x31c>)
 80033fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003400:	e014      	b.n	800342c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003402:	4b53      	ldr	r3, [pc, #332]	@ (8003550 <UART_SetConfig+0x320>)
 8003404:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003406:	e011      	b.n	800342c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003408:	f7fe ff12 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 800340c:	0003      	movs	r3, r0
 800340e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003410:	e00c      	b.n	800342c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003412:	2380      	movs	r3, #128	@ 0x80
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003418:	e008      	b.n	800342c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800341e:	231a      	movs	r3, #26
 8003420:	2218      	movs	r2, #24
 8003422:	189b      	adds	r3, r3, r2
 8003424:	19db      	adds	r3, r3, r7
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
        break;
 800342a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800342c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d100      	bne.n	8003434 <UART_SetConfig+0x204>
 8003432:	e12f      	b.n	8003694 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	0013      	movs	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	189b      	adds	r3, r3, r2
 800343e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003440:	429a      	cmp	r2, r3
 8003442:	d305      	bcc.n	8003450 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800344a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800344c:	429a      	cmp	r2, r3
 800344e:	d906      	bls.n	800345e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003450:	231a      	movs	r3, #26
 8003452:	2218      	movs	r2, #24
 8003454:	189b      	adds	r3, r3, r2
 8003456:	19db      	adds	r3, r3, r7
 8003458:	2201      	movs	r2, #1
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	e11a      	b.n	8003694 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800345e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	6939      	ldr	r1, [r7, #16]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	000b      	movs	r3, r1
 800346c:	0e1b      	lsrs	r3, r3, #24
 800346e:	0010      	movs	r0, r2
 8003470:	0205      	lsls	r5, r0, #8
 8003472:	431d      	orrs	r5, r3
 8003474:	000b      	movs	r3, r1
 8003476:	021c      	lsls	r4, r3, #8
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68b8      	ldr	r0, [r7, #8]
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	1900      	adds	r0, r0, r4
 800348a:	4169      	adcs	r1, r5
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	603b      	str	r3, [r7, #0]
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f7fc fec1 	bl	8000220 <__aeabi_uldivmod>
 800349e:	0002      	movs	r2, r0
 80034a0:	000b      	movs	r3, r1
 80034a2:	0013      	movs	r3, r2
 80034a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034a8:	23c0      	movs	r3, #192	@ 0xc0
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d309      	bcc.n	80034c4 <UART_SetConfig+0x294>
 80034b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b2:	2380      	movs	r3, #128	@ 0x80
 80034b4:	035b      	lsls	r3, r3, #13
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d204      	bcs.n	80034c4 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	e0e7      	b.n	8003694 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80034c4:	231a      	movs	r3, #26
 80034c6:	2218      	movs	r2, #24
 80034c8:	189b      	adds	r3, r3, r2
 80034ca:	19db      	adds	r3, r3, r7
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	e0e0      	b.n	8003694 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	429a      	cmp	r2, r3
 80034dc:	d000      	beq.n	80034e0 <UART_SetConfig+0x2b0>
 80034de:	e082      	b.n	80035e6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80034e0:	231b      	movs	r3, #27
 80034e2:	2218      	movs	r2, #24
 80034e4:	189b      	adds	r3, r3, r2
 80034e6:	19db      	adds	r3, r3, r7
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d834      	bhi.n	8003558 <UART_SetConfig+0x328>
 80034ee:	009a      	lsls	r2, r3, #2
 80034f0:	4b18      	ldr	r3, [pc, #96]	@ (8003554 <UART_SetConfig+0x324>)
 80034f2:	18d3      	adds	r3, r2, r3
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f8:	f7fe ff4a 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 80034fc:	0003      	movs	r3, r0
 80034fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003500:	e033      	b.n	800356a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003502:	f7fe ff5b 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 8003506:	0003      	movs	r3, r0
 8003508:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800350a:	e02e      	b.n	800356a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800350c:	4b0e      	ldr	r3, [pc, #56]	@ (8003548 <UART_SetConfig+0x318>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2210      	movs	r2, #16
 8003512:	4013      	ands	r3, r2
 8003514:	d002      	beq.n	800351c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003516:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <UART_SetConfig+0x31c>)
 8003518:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800351a:	e026      	b.n	800356a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 800351c:	4b0c      	ldr	r3, [pc, #48]	@ (8003550 <UART_SetConfig+0x320>)
 800351e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003520:	e023      	b.n	800356a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003522:	f7fe fe85 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 8003526:	0003      	movs	r3, r0
 8003528:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800352a:	e01e      	b.n	800356a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352c:	2380      	movs	r3, #128	@ 0x80
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003532:	e01a      	b.n	800356a <UART_SetConfig+0x33a>
 8003534:	efff69f3 	.word	0xefff69f3
 8003538:	ffffcfff 	.word	0xffffcfff
 800353c:	40004800 	.word	0x40004800
 8003540:	fffff4ff 	.word	0xfffff4ff
 8003544:	40004400 	.word	0x40004400
 8003548:	40021000 	.word	0x40021000
 800354c:	003d0900 	.word	0x003d0900
 8003550:	00f42400 	.word	0x00f42400
 8003554:	08003c40 	.word	0x08003c40
      default:
        pclk = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800355c:	231a      	movs	r3, #26
 800355e:	2218      	movs	r2, #24
 8003560:	189b      	adds	r3, r3, r2
 8003562:	19db      	adds	r3, r3, r7
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
        break;
 8003568:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d100      	bne.n	8003572 <UART_SetConfig+0x342>
 8003570:	e090      	b.n	8003694 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003574:	005a      	lsls	r2, r3, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	18d2      	adds	r2, r2, r3
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	0019      	movs	r1, r3
 8003584:	0010      	movs	r0, r2
 8003586:	f7fc fdbf 	bl	8000108 <__udivsi3>
 800358a:	0003      	movs	r3, r0
 800358c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003590:	2b0f      	cmp	r3, #15
 8003592:	d921      	bls.n	80035d8 <UART_SetConfig+0x3a8>
 8003594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003596:	2380      	movs	r3, #128	@ 0x80
 8003598:	025b      	lsls	r3, r3, #9
 800359a:	429a      	cmp	r2, r3
 800359c:	d21c      	bcs.n	80035d8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800359e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	200e      	movs	r0, #14
 80035a4:	2418      	movs	r4, #24
 80035a6:	1903      	adds	r3, r0, r4
 80035a8:	19db      	adds	r3, r3, r7
 80035aa:	210f      	movs	r1, #15
 80035ac:	438a      	bics	r2, r1
 80035ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b2:	085b      	lsrs	r3, r3, #1
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2207      	movs	r2, #7
 80035b8:	4013      	ands	r3, r2
 80035ba:	b299      	uxth	r1, r3
 80035bc:	1903      	adds	r3, r0, r4
 80035be:	19db      	adds	r3, r3, r7
 80035c0:	1902      	adds	r2, r0, r4
 80035c2:	19d2      	adds	r2, r2, r7
 80035c4:	8812      	ldrh	r2, [r2, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1902      	adds	r2, r0, r4
 80035d0:	19d2      	adds	r2, r2, r7
 80035d2:	8812      	ldrh	r2, [r2, #0]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	e05d      	b.n	8003694 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80035d8:	231a      	movs	r3, #26
 80035da:	2218      	movs	r2, #24
 80035dc:	189b      	adds	r3, r3, r2
 80035de:	19db      	adds	r3, r3, r7
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	e056      	b.n	8003694 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035e6:	231b      	movs	r3, #27
 80035e8:	2218      	movs	r2, #24
 80035ea:	189b      	adds	r3, r3, r2
 80035ec:	19db      	adds	r3, r3, r7
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d822      	bhi.n	800363a <UART_SetConfig+0x40a>
 80035f4:	009a      	lsls	r2, r3, #2
 80035f6:	4b2f      	ldr	r3, [pc, #188]	@ (80036b4 <UART_SetConfig+0x484>)
 80035f8:	18d3      	adds	r3, r2, r3
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035fe:	f7fe fec7 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8003602:	0003      	movs	r3, r0
 8003604:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003606:	e021      	b.n	800364c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003608:	f7fe fed8 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 800360c:	0003      	movs	r3, r0
 800360e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003610:	e01c      	b.n	800364c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003612:	4b29      	ldr	r3, [pc, #164]	@ (80036b8 <UART_SetConfig+0x488>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2210      	movs	r2, #16
 8003618:	4013      	ands	r3, r2
 800361a:	d002      	beq.n	8003622 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800361c:	4b27      	ldr	r3, [pc, #156]	@ (80036bc <UART_SetConfig+0x48c>)
 800361e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003620:	e014      	b.n	800364c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003622:	4b27      	ldr	r3, [pc, #156]	@ (80036c0 <UART_SetConfig+0x490>)
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003626:	e011      	b.n	800364c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003628:	f7fe fe02 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 800362c:	0003      	movs	r3, r0
 800362e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003630:	e00c      	b.n	800364c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003632:	2380      	movs	r3, #128	@ 0x80
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003638:	e008      	b.n	800364c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800363e:	231a      	movs	r3, #26
 8003640:	2218      	movs	r2, #24
 8003642:	189b      	adds	r3, r3, r2
 8003644:	19db      	adds	r3, r3, r7
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
        break;
 800364a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800364c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d020      	beq.n	8003694 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	085a      	lsrs	r2, r3, #1
 8003658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365a:	18d2      	adds	r2, r2, r3
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	0019      	movs	r1, r3
 8003662:	0010      	movs	r0, r2
 8003664:	f7fc fd50 	bl	8000108 <__udivsi3>
 8003668:	0003      	movs	r3, r0
 800366a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800366c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366e:	2b0f      	cmp	r3, #15
 8003670:	d90a      	bls.n	8003688 <UART_SetConfig+0x458>
 8003672:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003674:	2380      	movs	r3, #128	@ 0x80
 8003676:	025b      	lsls	r3, r3, #9
 8003678:	429a      	cmp	r2, r3
 800367a:	d205      	bcs.n	8003688 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367e:	b29a      	uxth	r2, r3
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	e005      	b.n	8003694 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003688:	231a      	movs	r3, #26
 800368a:	2218      	movs	r2, #24
 800368c:	189b      	adds	r3, r3, r2
 800368e:	19db      	adds	r3, r3, r7
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2200      	movs	r2, #0
 8003698:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	2200      	movs	r2, #0
 800369e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036a0:	231a      	movs	r3, #26
 80036a2:	2218      	movs	r2, #24
 80036a4:	189b      	adds	r3, r3, r2
 80036a6:	19db      	adds	r3, r3, r7
 80036a8:	781b      	ldrb	r3, [r3, #0]
}
 80036aa:	0018      	movs	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b00e      	add	sp, #56	@ 0x38
 80036b0:	bdb0      	pop	{r4, r5, r7, pc}
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	08003c64 	.word	0x08003c64
 80036b8:	40021000 	.word	0x40021000
 80036bc:	003d0900 	.word	0x003d0900
 80036c0:	00f42400 	.word	0x00f42400

080036c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	2201      	movs	r2, #1
 80036d2:	4013      	ands	r3, r2
 80036d4:	d00b      	beq.n	80036ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003808 <UART_AdvFeatureConfig+0x144>)
 80036de:	4013      	ands	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	2202      	movs	r2, #2
 80036f4:	4013      	ands	r3, r2
 80036f6:	d00b      	beq.n	8003710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4a43      	ldr	r2, [pc, #268]	@ (800380c <UART_AdvFeatureConfig+0x148>)
 8003700:	4013      	ands	r3, r2
 8003702:	0019      	movs	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	2204      	movs	r2, #4
 8003716:	4013      	ands	r3, r2
 8003718:	d00b      	beq.n	8003732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4a3b      	ldr	r2, [pc, #236]	@ (8003810 <UART_AdvFeatureConfig+0x14c>)
 8003722:	4013      	ands	r3, r2
 8003724:	0019      	movs	r1, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	2208      	movs	r2, #8
 8003738:	4013      	ands	r3, r2
 800373a:	d00b      	beq.n	8003754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4a34      	ldr	r2, [pc, #208]	@ (8003814 <UART_AdvFeatureConfig+0x150>)
 8003744:	4013      	ands	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	2210      	movs	r2, #16
 800375a:	4013      	ands	r3, r2
 800375c:	d00b      	beq.n	8003776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a2c      	ldr	r2, [pc, #176]	@ (8003818 <UART_AdvFeatureConfig+0x154>)
 8003766:	4013      	ands	r3, r2
 8003768:	0019      	movs	r1, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	2220      	movs	r2, #32
 800377c:	4013      	ands	r3, r2
 800377e:	d00b      	beq.n	8003798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	4a25      	ldr	r2, [pc, #148]	@ (800381c <UART_AdvFeatureConfig+0x158>)
 8003788:	4013      	ands	r3, r2
 800378a:	0019      	movs	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	2240      	movs	r2, #64	@ 0x40
 800379e:	4013      	ands	r3, r2
 80037a0:	d01d      	beq.n	80037de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003820 <UART_AdvFeatureConfig+0x15c>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	0019      	movs	r1, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037be:	2380      	movs	r3, #128	@ 0x80
 80037c0:	035b      	lsls	r3, r3, #13
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d10b      	bne.n	80037de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a15      	ldr	r2, [pc, #84]	@ (8003824 <UART_AdvFeatureConfig+0x160>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	2280      	movs	r2, #128	@ 0x80
 80037e4:	4013      	ands	r3, r2
 80037e6:	d00b      	beq.n	8003800 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003828 <UART_AdvFeatureConfig+0x164>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }
}
 8003800:	46c0      	nop			@ (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b002      	add	sp, #8
 8003806:	bd80      	pop	{r7, pc}
 8003808:	fffdffff 	.word	0xfffdffff
 800380c:	fffeffff 	.word	0xfffeffff
 8003810:	fffbffff 	.word	0xfffbffff
 8003814:	ffff7fff 	.word	0xffff7fff
 8003818:	ffffefff 	.word	0xffffefff
 800381c:	ffffdfff 	.word	0xffffdfff
 8003820:	ffefffff 	.word	0xffefffff
 8003824:	ff9fffff 	.word	0xff9fffff
 8003828:	fff7ffff 	.word	0xfff7ffff

0800382c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b092      	sub	sp, #72	@ 0x48
 8003830:	af02      	add	r7, sp, #8
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2284      	movs	r2, #132	@ 0x84
 8003838:	2100      	movs	r1, #0
 800383a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800383c:	f7fd fa9a 	bl	8000d74 <HAL_GetTick>
 8003840:	0003      	movs	r3, r0
 8003842:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2208      	movs	r2, #8
 800384c:	4013      	ands	r3, r2
 800384e:	2b08      	cmp	r3, #8
 8003850:	d12c      	bne.n	80038ac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003854:	2280      	movs	r2, #128	@ 0x80
 8003856:	0391      	lsls	r1, r2, #14
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4a46      	ldr	r2, [pc, #280]	@ (8003974 <UART_CheckIdleState+0x148>)
 800385c:	9200      	str	r2, [sp, #0]
 800385e:	2200      	movs	r2, #0
 8003860:	f000 f88c 	bl	800397c <UART_WaitOnFlagUntilTimeout>
 8003864:	1e03      	subs	r3, r0, #0
 8003866:	d021      	beq.n	80038ac <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003868:	f3ef 8310 	mrs	r3, PRIMASK
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003870:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003872:	2301      	movs	r3, #1
 8003874:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003878:	f383 8810 	msr	PRIMASK, r3
}
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2180      	movs	r1, #128	@ 0x80
 800388a:	438a      	bics	r2, r1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003894:	f383 8810 	msr	PRIMASK, r3
}
 8003898:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2278      	movs	r2, #120	@ 0x78
 80038a4:	2100      	movs	r1, #0
 80038a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e05f      	b.n	800396c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2204      	movs	r2, #4
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d146      	bne.n	8003948 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038bc:	2280      	movs	r2, #128	@ 0x80
 80038be:	03d1      	lsls	r1, r2, #15
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003974 <UART_CheckIdleState+0x148>)
 80038c4:	9200      	str	r2, [sp, #0]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f000 f858 	bl	800397c <UART_WaitOnFlagUntilTimeout>
 80038cc:	1e03      	subs	r3, r0, #0
 80038ce:	d03b      	beq.n	8003948 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d0:	f3ef 8310 	mrs	r3, PRIMASK
 80038d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80038d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80038da:	2301      	movs	r3, #1
 80038dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f383 8810 	msr	PRIMASK, r3
}
 80038e4:	46c0      	nop			@ (mov r8, r8)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4921      	ldr	r1, [pc, #132]	@ (8003978 <UART_CheckIdleState+0x14c>)
 80038f2:	400a      	ands	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f383 8810 	msr	PRIMASK, r3
}
 8003900:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003902:	f3ef 8310 	mrs	r3, PRIMASK
 8003906:	61bb      	str	r3, [r7, #24]
  return(result);
 8003908:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390a:	633b      	str	r3, [r7, #48]	@ 0x30
 800390c:	2301      	movs	r3, #1
 800390e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f383 8810 	msr	PRIMASK, r3
}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2101      	movs	r1, #1
 8003924:	438a      	bics	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	f383 8810 	msr	PRIMASK, r3
}
 8003932:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2280      	movs	r2, #128	@ 0x80
 8003938:	2120      	movs	r1, #32
 800393a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2278      	movs	r2, #120	@ 0x78
 8003940:	2100      	movs	r1, #0
 8003942:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e011      	b.n	800396c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2280      	movs	r2, #128	@ 0x80
 8003952:	2120      	movs	r1, #32
 8003954:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2278      	movs	r2, #120	@ 0x78
 8003966:	2100      	movs	r1, #0
 8003968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b010      	add	sp, #64	@ 0x40
 8003972:	bd80      	pop	{r7, pc}
 8003974:	01ffffff 	.word	0x01ffffff
 8003978:	fffffedf 	.word	0xfffffedf

0800397c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	1dfb      	adds	r3, r7, #7
 800398a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398c:	e04b      	b.n	8003a26 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3301      	adds	r3, #1
 8003992:	d048      	beq.n	8003a26 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003994:	f7fd f9ee 	bl	8000d74 <HAL_GetTick>
 8003998:	0002      	movs	r2, r0
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e04b      	b.n	8003a46 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2204      	movs	r2, #4
 80039b6:	4013      	ands	r3, r2
 80039b8:	d035      	beq.n	8003a26 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	2208      	movs	r2, #8
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d111      	bne.n	80039ec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2208      	movs	r2, #8
 80039ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 f83c 	bl	8003a50 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2284      	movs	r2, #132	@ 0x84
 80039dc:	2108      	movs	r1, #8
 80039de:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2278      	movs	r2, #120	@ 0x78
 80039e4:	2100      	movs	r1, #0
 80039e6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e02c      	b.n	8003a46 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69da      	ldr	r2, [r3, #28]
 80039f2:	2380      	movs	r3, #128	@ 0x80
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	401a      	ands	r2, r3
 80039f8:	2380      	movs	r3, #128	@ 0x80
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d112      	bne.n	8003a26 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2280      	movs	r2, #128	@ 0x80
 8003a06:	0112      	lsls	r2, r2, #4
 8003a08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 f81f 	bl	8003a50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2284      	movs	r2, #132	@ 0x84
 8003a16:	2120      	movs	r1, #32
 8003a18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2278      	movs	r2, #120	@ 0x78
 8003a1e:	2100      	movs	r1, #0
 8003a20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e00f      	b.n	8003a46 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	425a      	negs	r2, r3
 8003a36:	4153      	adcs	r3, r2
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	001a      	movs	r2, r3
 8003a3c:	1dfb      	adds	r3, r7, #7
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d0a4      	beq.n	800398e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b004      	add	sp, #16
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08e      	sub	sp, #56	@ 0x38
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a58:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5c:	617b      	str	r3, [r7, #20]
  return(result);
 8003a5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a62:	2301      	movs	r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f383 8810 	msr	PRIMASK, r3
}
 8003a6c:	46c0      	nop			@ (mov r8, r8)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4926      	ldr	r1, [pc, #152]	@ (8003b14 <UART_EndRxTransfer+0xc4>)
 8003a7a:	400a      	ands	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f383 8810 	msr	PRIMASK, r3
}
 8003a88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8e:	623b      	str	r3, [r7, #32]
  return(result);
 8003a90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a92:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a94:	2301      	movs	r3, #1
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9a:	f383 8810 	msr	PRIMASK, r3
}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2101      	movs	r1, #1
 8003aac:	438a      	bics	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	f383 8810 	msr	PRIMASK, r3
}
 8003aba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d118      	bne.n	8003af6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003aca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ace:	2301      	movs	r3, #1
 8003ad0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f383 8810 	msr	PRIMASK, r3
}
 8003ad8:	46c0      	nop			@ (mov r8, r8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2110      	movs	r1, #16
 8003ae6:	438a      	bics	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f383 8810 	msr	PRIMASK, r3
}
 8003af4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2280      	movs	r2, #128	@ 0x80
 8003afa:	2120      	movs	r1, #32
 8003afc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b00e      	add	sp, #56	@ 0x38
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	fffffedf 	.word	0xfffffedf

08003b18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	225a      	movs	r2, #90	@ 0x5a
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2252      	movs	r2, #82	@ 0x52
 8003b32:	2100      	movs	r1, #0
 8003b34:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f7ff fb65 	bl	8003208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b004      	add	sp, #16
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b52:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b54:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	2301      	movs	r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f383 8810 	msr	PRIMASK, r3
}
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2140      	movs	r1, #64	@ 0x40
 8003b70:	438a      	bics	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f383 8810 	msr	PRIMASK, r3
}
 8003b7e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f7ff fb32 	bl	80031f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b94:	46c0      	nop			@ (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b006      	add	sp, #24
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ba4:	46c0      	nop			@ (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b002      	add	sp, #8
 8003baa:	bd80      	pop	{r7, pc}

08003bac <memset>:
 8003bac:	0003      	movs	r3, r0
 8003bae:	1882      	adds	r2, r0, r2
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d100      	bne.n	8003bb6 <memset+0xa>
 8003bb4:	4770      	bx	lr
 8003bb6:	7019      	strb	r1, [r3, #0]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	e7f9      	b.n	8003bb0 <memset+0x4>

08003bbc <__libc_init_array>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	2600      	movs	r6, #0
 8003bc0:	4c0c      	ldr	r4, [pc, #48]	@ (8003bf4 <__libc_init_array+0x38>)
 8003bc2:	4d0d      	ldr	r5, [pc, #52]	@ (8003bf8 <__libc_init_array+0x3c>)
 8003bc4:	1b64      	subs	r4, r4, r5
 8003bc6:	10a4      	asrs	r4, r4, #2
 8003bc8:	42a6      	cmp	r6, r4
 8003bca:	d109      	bne.n	8003be0 <__libc_init_array+0x24>
 8003bcc:	2600      	movs	r6, #0
 8003bce:	f000 f819 	bl	8003c04 <_init>
 8003bd2:	4c0a      	ldr	r4, [pc, #40]	@ (8003bfc <__libc_init_array+0x40>)
 8003bd4:	4d0a      	ldr	r5, [pc, #40]	@ (8003c00 <__libc_init_array+0x44>)
 8003bd6:	1b64      	subs	r4, r4, r5
 8003bd8:	10a4      	asrs	r4, r4, #2
 8003bda:	42a6      	cmp	r6, r4
 8003bdc:	d105      	bne.n	8003bea <__libc_init_array+0x2e>
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
 8003be0:	00b3      	lsls	r3, r6, #2
 8003be2:	58eb      	ldr	r3, [r5, r3]
 8003be4:	4798      	blx	r3
 8003be6:	3601      	adds	r6, #1
 8003be8:	e7ee      	b.n	8003bc8 <__libc_init_array+0xc>
 8003bea:	00b3      	lsls	r3, r6, #2
 8003bec:	58eb      	ldr	r3, [r5, r3]
 8003bee:	4798      	blx	r3
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	e7f2      	b.n	8003bda <__libc_init_array+0x1e>
 8003bf4:	08003c90 	.word	0x08003c90
 8003bf8:	08003c90 	.word	0x08003c90
 8003bfc:	08003c94 	.word	0x08003c94
 8003c00:	08003c90 	.word	0x08003c90

08003c04 <_init>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr

08003c10 <_fini>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr
