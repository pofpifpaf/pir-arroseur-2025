
Test low power modes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000540c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080054cc  080054cc  000064cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005538  08005538  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005538  08005538  00006538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005540  08005540  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005540  08005540  00006540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005544  08005544  00006544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005548  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08005554  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08005554  00007138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da73  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e0  00000000  00000000  00014aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00016e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008be  00000000  00000000  000179e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000129a3  00000000  00000000  0001829e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f463  00000000  00000000  0002ac41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070fd3  00000000  00000000  0003a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab077  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000286c  00000000  00000000  000ab0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  000ad928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080054b4 	.word	0x080054b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080054b4 	.word	0x080054b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 ffee 	bl	80012bc <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 ffe9 	bl	80012bc <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__aeabi_dadd>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	464f      	mov	r7, r9
 8000458:	4646      	mov	r6, r8
 800045a:	46d6      	mov	lr, sl
 800045c:	b5c0      	push	{r6, r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	9000      	str	r0, [sp, #0]
 8000462:	9101      	str	r1, [sp, #4]
 8000464:	030e      	lsls	r6, r1, #12
 8000466:	004c      	lsls	r4, r1, #1
 8000468:	0fcd      	lsrs	r5, r1, #31
 800046a:	0a71      	lsrs	r1, r6, #9
 800046c:	9e00      	ldr	r6, [sp, #0]
 800046e:	005f      	lsls	r7, r3, #1
 8000470:	0f76      	lsrs	r6, r6, #29
 8000472:	430e      	orrs	r6, r1
 8000474:	9900      	ldr	r1, [sp, #0]
 8000476:	9200      	str	r2, [sp, #0]
 8000478:	9301      	str	r3, [sp, #4]
 800047a:	00c9      	lsls	r1, r1, #3
 800047c:	4689      	mov	r9, r1
 800047e:	0319      	lsls	r1, r3, #12
 8000480:	0d7b      	lsrs	r3, r7, #21
 8000482:	4698      	mov	r8, r3
 8000484:	9b01      	ldr	r3, [sp, #4]
 8000486:	0a49      	lsrs	r1, r1, #9
 8000488:	0fdb      	lsrs	r3, r3, #31
 800048a:	469c      	mov	ip, r3
 800048c:	9b00      	ldr	r3, [sp, #0]
 800048e:	9a00      	ldr	r2, [sp, #0]
 8000490:	0f5b      	lsrs	r3, r3, #29
 8000492:	430b      	orrs	r3, r1
 8000494:	4641      	mov	r1, r8
 8000496:	0d64      	lsrs	r4, r4, #21
 8000498:	00d2      	lsls	r2, r2, #3
 800049a:	1a61      	subs	r1, r4, r1
 800049c:	4565      	cmp	r5, ip
 800049e:	d100      	bne.n	80004a2 <__aeabi_dadd+0x4e>
 80004a0:	e0a6      	b.n	80005f0 <__aeabi_dadd+0x19c>
 80004a2:	2900      	cmp	r1, #0
 80004a4:	dd72      	ble.n	800058c <__aeabi_dadd+0x138>
 80004a6:	4647      	mov	r7, r8
 80004a8:	2f00      	cmp	r7, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_dadd+0x5a>
 80004ac:	e0dd      	b.n	800066a <__aeabi_dadd+0x216>
 80004ae:	4fcc      	ldr	r7, [pc, #816]	@ (80007e0 <__aeabi_dadd+0x38c>)
 80004b0:	42bc      	cmp	r4, r7
 80004b2:	d100      	bne.n	80004b6 <__aeabi_dadd+0x62>
 80004b4:	e19a      	b.n	80007ec <__aeabi_dadd+0x398>
 80004b6:	2701      	movs	r7, #1
 80004b8:	2938      	cmp	r1, #56	@ 0x38
 80004ba:	dc17      	bgt.n	80004ec <__aeabi_dadd+0x98>
 80004bc:	2780      	movs	r7, #128	@ 0x80
 80004be:	043f      	lsls	r7, r7, #16
 80004c0:	433b      	orrs	r3, r7
 80004c2:	291f      	cmp	r1, #31
 80004c4:	dd00      	ble.n	80004c8 <__aeabi_dadd+0x74>
 80004c6:	e1dd      	b.n	8000884 <__aeabi_dadd+0x430>
 80004c8:	2720      	movs	r7, #32
 80004ca:	1a78      	subs	r0, r7, r1
 80004cc:	001f      	movs	r7, r3
 80004ce:	4087      	lsls	r7, r0
 80004d0:	46ba      	mov	sl, r7
 80004d2:	0017      	movs	r7, r2
 80004d4:	40cf      	lsrs	r7, r1
 80004d6:	4684      	mov	ip, r0
 80004d8:	0038      	movs	r0, r7
 80004da:	4657      	mov	r7, sl
 80004dc:	4307      	orrs	r7, r0
 80004de:	4660      	mov	r0, ip
 80004e0:	4082      	lsls	r2, r0
 80004e2:	40cb      	lsrs	r3, r1
 80004e4:	1e50      	subs	r0, r2, #1
 80004e6:	4182      	sbcs	r2, r0
 80004e8:	1af6      	subs	r6, r6, r3
 80004ea:	4317      	orrs	r7, r2
 80004ec:	464b      	mov	r3, r9
 80004ee:	1bdf      	subs	r7, r3, r7
 80004f0:	45b9      	cmp	r9, r7
 80004f2:	4180      	sbcs	r0, r0
 80004f4:	4240      	negs	r0, r0
 80004f6:	1a36      	subs	r6, r6, r0
 80004f8:	0233      	lsls	r3, r6, #8
 80004fa:	d400      	bmi.n	80004fe <__aeabi_dadd+0xaa>
 80004fc:	e0ff      	b.n	80006fe <__aeabi_dadd+0x2aa>
 80004fe:	0276      	lsls	r6, r6, #9
 8000500:	0a76      	lsrs	r6, r6, #9
 8000502:	2e00      	cmp	r6, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0xb4>
 8000506:	e13c      	b.n	8000782 <__aeabi_dadd+0x32e>
 8000508:	0030      	movs	r0, r6
 800050a:	f000 feb9 	bl	8001280 <__clzsi2>
 800050e:	0003      	movs	r3, r0
 8000510:	3b08      	subs	r3, #8
 8000512:	2120      	movs	r1, #32
 8000514:	0038      	movs	r0, r7
 8000516:	1aca      	subs	r2, r1, r3
 8000518:	40d0      	lsrs	r0, r2
 800051a:	409e      	lsls	r6, r3
 800051c:	0002      	movs	r2, r0
 800051e:	409f      	lsls	r7, r3
 8000520:	4332      	orrs	r2, r6
 8000522:	429c      	cmp	r4, r3
 8000524:	dd00      	ble.n	8000528 <__aeabi_dadd+0xd4>
 8000526:	e1a6      	b.n	8000876 <__aeabi_dadd+0x422>
 8000528:	1b18      	subs	r0, r3, r4
 800052a:	3001      	adds	r0, #1
 800052c:	1a09      	subs	r1, r1, r0
 800052e:	003e      	movs	r6, r7
 8000530:	408f      	lsls	r7, r1
 8000532:	40c6      	lsrs	r6, r0
 8000534:	1e7b      	subs	r3, r7, #1
 8000536:	419f      	sbcs	r7, r3
 8000538:	0013      	movs	r3, r2
 800053a:	408b      	lsls	r3, r1
 800053c:	4337      	orrs	r7, r6
 800053e:	431f      	orrs	r7, r3
 8000540:	40c2      	lsrs	r2, r0
 8000542:	003b      	movs	r3, r7
 8000544:	0016      	movs	r6, r2
 8000546:	2400      	movs	r4, #0
 8000548:	4313      	orrs	r3, r2
 800054a:	d100      	bne.n	800054e <__aeabi_dadd+0xfa>
 800054c:	e1df      	b.n	800090e <__aeabi_dadd+0x4ba>
 800054e:	077b      	lsls	r3, r7, #29
 8000550:	d100      	bne.n	8000554 <__aeabi_dadd+0x100>
 8000552:	e332      	b.n	8000bba <__aeabi_dadd+0x766>
 8000554:	230f      	movs	r3, #15
 8000556:	003a      	movs	r2, r7
 8000558:	403b      	ands	r3, r7
 800055a:	2b04      	cmp	r3, #4
 800055c:	d004      	beq.n	8000568 <__aeabi_dadd+0x114>
 800055e:	1d3a      	adds	r2, r7, #4
 8000560:	42ba      	cmp	r2, r7
 8000562:	41bf      	sbcs	r7, r7
 8000564:	427f      	negs	r7, r7
 8000566:	19f6      	adds	r6, r6, r7
 8000568:	0233      	lsls	r3, r6, #8
 800056a:	d400      	bmi.n	800056e <__aeabi_dadd+0x11a>
 800056c:	e323      	b.n	8000bb6 <__aeabi_dadd+0x762>
 800056e:	4b9c      	ldr	r3, [pc, #624]	@ (80007e0 <__aeabi_dadd+0x38c>)
 8000570:	3401      	adds	r4, #1
 8000572:	429c      	cmp	r4, r3
 8000574:	d100      	bne.n	8000578 <__aeabi_dadd+0x124>
 8000576:	e0b4      	b.n	80006e2 <__aeabi_dadd+0x28e>
 8000578:	4b9a      	ldr	r3, [pc, #616]	@ (80007e4 <__aeabi_dadd+0x390>)
 800057a:	0564      	lsls	r4, r4, #21
 800057c:	401e      	ands	r6, r3
 800057e:	0d64      	lsrs	r4, r4, #21
 8000580:	0777      	lsls	r7, r6, #29
 8000582:	08d2      	lsrs	r2, r2, #3
 8000584:	0276      	lsls	r6, r6, #9
 8000586:	4317      	orrs	r7, r2
 8000588:	0b36      	lsrs	r6, r6, #12
 800058a:	e0ac      	b.n	80006e6 <__aeabi_dadd+0x292>
 800058c:	2900      	cmp	r1, #0
 800058e:	d100      	bne.n	8000592 <__aeabi_dadd+0x13e>
 8000590:	e07e      	b.n	8000690 <__aeabi_dadd+0x23c>
 8000592:	4641      	mov	r1, r8
 8000594:	1b09      	subs	r1, r1, r4
 8000596:	2c00      	cmp	r4, #0
 8000598:	d000      	beq.n	800059c <__aeabi_dadd+0x148>
 800059a:	e160      	b.n	800085e <__aeabi_dadd+0x40a>
 800059c:	0034      	movs	r4, r6
 800059e:	4648      	mov	r0, r9
 80005a0:	4304      	orrs	r4, r0
 80005a2:	d100      	bne.n	80005a6 <__aeabi_dadd+0x152>
 80005a4:	e1c9      	b.n	800093a <__aeabi_dadd+0x4e6>
 80005a6:	1e4c      	subs	r4, r1, #1
 80005a8:	2901      	cmp	r1, #1
 80005aa:	d100      	bne.n	80005ae <__aeabi_dadd+0x15a>
 80005ac:	e22e      	b.n	8000a0c <__aeabi_dadd+0x5b8>
 80005ae:	4d8c      	ldr	r5, [pc, #560]	@ (80007e0 <__aeabi_dadd+0x38c>)
 80005b0:	42a9      	cmp	r1, r5
 80005b2:	d100      	bne.n	80005b6 <__aeabi_dadd+0x162>
 80005b4:	e224      	b.n	8000a00 <__aeabi_dadd+0x5ac>
 80005b6:	2701      	movs	r7, #1
 80005b8:	2c38      	cmp	r4, #56	@ 0x38
 80005ba:	dc11      	bgt.n	80005e0 <__aeabi_dadd+0x18c>
 80005bc:	0021      	movs	r1, r4
 80005be:	291f      	cmp	r1, #31
 80005c0:	dd00      	ble.n	80005c4 <__aeabi_dadd+0x170>
 80005c2:	e20b      	b.n	80009dc <__aeabi_dadd+0x588>
 80005c4:	2420      	movs	r4, #32
 80005c6:	0037      	movs	r7, r6
 80005c8:	4648      	mov	r0, r9
 80005ca:	1a64      	subs	r4, r4, r1
 80005cc:	40a7      	lsls	r7, r4
 80005ce:	40c8      	lsrs	r0, r1
 80005d0:	4307      	orrs	r7, r0
 80005d2:	4648      	mov	r0, r9
 80005d4:	40a0      	lsls	r0, r4
 80005d6:	40ce      	lsrs	r6, r1
 80005d8:	1e44      	subs	r4, r0, #1
 80005da:	41a0      	sbcs	r0, r4
 80005dc:	1b9b      	subs	r3, r3, r6
 80005de:	4307      	orrs	r7, r0
 80005e0:	1bd7      	subs	r7, r2, r7
 80005e2:	42ba      	cmp	r2, r7
 80005e4:	4192      	sbcs	r2, r2
 80005e6:	4252      	negs	r2, r2
 80005e8:	4665      	mov	r5, ip
 80005ea:	4644      	mov	r4, r8
 80005ec:	1a9e      	subs	r6, r3, r2
 80005ee:	e783      	b.n	80004f8 <__aeabi_dadd+0xa4>
 80005f0:	2900      	cmp	r1, #0
 80005f2:	dc00      	bgt.n	80005f6 <__aeabi_dadd+0x1a2>
 80005f4:	e09c      	b.n	8000730 <__aeabi_dadd+0x2dc>
 80005f6:	4647      	mov	r7, r8
 80005f8:	2f00      	cmp	r7, #0
 80005fa:	d167      	bne.n	80006cc <__aeabi_dadd+0x278>
 80005fc:	001f      	movs	r7, r3
 80005fe:	4317      	orrs	r7, r2
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x1b0>
 8000602:	e0e4      	b.n	80007ce <__aeabi_dadd+0x37a>
 8000604:	1e48      	subs	r0, r1, #1
 8000606:	2901      	cmp	r1, #1
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x1b8>
 800060a:	e19b      	b.n	8000944 <__aeabi_dadd+0x4f0>
 800060c:	4f74      	ldr	r7, [pc, #464]	@ (80007e0 <__aeabi_dadd+0x38c>)
 800060e:	42b9      	cmp	r1, r7
 8000610:	d100      	bne.n	8000614 <__aeabi_dadd+0x1c0>
 8000612:	e0eb      	b.n	80007ec <__aeabi_dadd+0x398>
 8000614:	2701      	movs	r7, #1
 8000616:	0001      	movs	r1, r0
 8000618:	2838      	cmp	r0, #56	@ 0x38
 800061a:	dc11      	bgt.n	8000640 <__aeabi_dadd+0x1ec>
 800061c:	291f      	cmp	r1, #31
 800061e:	dd00      	ble.n	8000622 <__aeabi_dadd+0x1ce>
 8000620:	e1c7      	b.n	80009b2 <__aeabi_dadd+0x55e>
 8000622:	2720      	movs	r7, #32
 8000624:	1a78      	subs	r0, r7, r1
 8000626:	001f      	movs	r7, r3
 8000628:	4684      	mov	ip, r0
 800062a:	4087      	lsls	r7, r0
 800062c:	0010      	movs	r0, r2
 800062e:	40c8      	lsrs	r0, r1
 8000630:	4307      	orrs	r7, r0
 8000632:	4660      	mov	r0, ip
 8000634:	4082      	lsls	r2, r0
 8000636:	40cb      	lsrs	r3, r1
 8000638:	1e50      	subs	r0, r2, #1
 800063a:	4182      	sbcs	r2, r0
 800063c:	18f6      	adds	r6, r6, r3
 800063e:	4317      	orrs	r7, r2
 8000640:	444f      	add	r7, r9
 8000642:	454f      	cmp	r7, r9
 8000644:	4180      	sbcs	r0, r0
 8000646:	4240      	negs	r0, r0
 8000648:	1836      	adds	r6, r6, r0
 800064a:	0233      	lsls	r3, r6, #8
 800064c:	d557      	bpl.n	80006fe <__aeabi_dadd+0x2aa>
 800064e:	4b64      	ldr	r3, [pc, #400]	@ (80007e0 <__aeabi_dadd+0x38c>)
 8000650:	3401      	adds	r4, #1
 8000652:	429c      	cmp	r4, r3
 8000654:	d045      	beq.n	80006e2 <__aeabi_dadd+0x28e>
 8000656:	2101      	movs	r1, #1
 8000658:	4b62      	ldr	r3, [pc, #392]	@ (80007e4 <__aeabi_dadd+0x390>)
 800065a:	087a      	lsrs	r2, r7, #1
 800065c:	401e      	ands	r6, r3
 800065e:	4039      	ands	r1, r7
 8000660:	430a      	orrs	r2, r1
 8000662:	07f7      	lsls	r7, r6, #31
 8000664:	4317      	orrs	r7, r2
 8000666:	0876      	lsrs	r6, r6, #1
 8000668:	e771      	b.n	800054e <__aeabi_dadd+0xfa>
 800066a:	001f      	movs	r7, r3
 800066c:	4317      	orrs	r7, r2
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x21e>
 8000670:	e0ad      	b.n	80007ce <__aeabi_dadd+0x37a>
 8000672:	1e4f      	subs	r7, r1, #1
 8000674:	46bc      	mov	ip, r7
 8000676:	2901      	cmp	r1, #1
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x228>
 800067a:	e182      	b.n	8000982 <__aeabi_dadd+0x52e>
 800067c:	4f58      	ldr	r7, [pc, #352]	@ (80007e0 <__aeabi_dadd+0x38c>)
 800067e:	42b9      	cmp	r1, r7
 8000680:	d100      	bne.n	8000684 <__aeabi_dadd+0x230>
 8000682:	e190      	b.n	80009a6 <__aeabi_dadd+0x552>
 8000684:	4661      	mov	r1, ip
 8000686:	2701      	movs	r7, #1
 8000688:	2938      	cmp	r1, #56	@ 0x38
 800068a:	dd00      	ble.n	800068e <__aeabi_dadd+0x23a>
 800068c:	e72e      	b.n	80004ec <__aeabi_dadd+0x98>
 800068e:	e718      	b.n	80004c2 <__aeabi_dadd+0x6e>
 8000690:	4f55      	ldr	r7, [pc, #340]	@ (80007e8 <__aeabi_dadd+0x394>)
 8000692:	1c61      	adds	r1, r4, #1
 8000694:	4239      	tst	r1, r7
 8000696:	d000      	beq.n	800069a <__aeabi_dadd+0x246>
 8000698:	e0d0      	b.n	800083c <__aeabi_dadd+0x3e8>
 800069a:	0031      	movs	r1, r6
 800069c:	4648      	mov	r0, r9
 800069e:	001f      	movs	r7, r3
 80006a0:	4301      	orrs	r1, r0
 80006a2:	4317      	orrs	r7, r2
 80006a4:	2c00      	cmp	r4, #0
 80006a6:	d000      	beq.n	80006aa <__aeabi_dadd+0x256>
 80006a8:	e13d      	b.n	8000926 <__aeabi_dadd+0x4d2>
 80006aa:	2900      	cmp	r1, #0
 80006ac:	d100      	bne.n	80006b0 <__aeabi_dadd+0x25c>
 80006ae:	e1bc      	b.n	8000a2a <__aeabi_dadd+0x5d6>
 80006b0:	2f00      	cmp	r7, #0
 80006b2:	d000      	beq.n	80006b6 <__aeabi_dadd+0x262>
 80006b4:	e1bf      	b.n	8000a36 <__aeabi_dadd+0x5e2>
 80006b6:	464b      	mov	r3, r9
 80006b8:	2100      	movs	r1, #0
 80006ba:	08d8      	lsrs	r0, r3, #3
 80006bc:	0777      	lsls	r7, r6, #29
 80006be:	4307      	orrs	r7, r0
 80006c0:	08f0      	lsrs	r0, r6, #3
 80006c2:	0306      	lsls	r6, r0, #12
 80006c4:	054c      	lsls	r4, r1, #21
 80006c6:	0b36      	lsrs	r6, r6, #12
 80006c8:	0d64      	lsrs	r4, r4, #21
 80006ca:	e00c      	b.n	80006e6 <__aeabi_dadd+0x292>
 80006cc:	4f44      	ldr	r7, [pc, #272]	@ (80007e0 <__aeabi_dadd+0x38c>)
 80006ce:	42bc      	cmp	r4, r7
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x280>
 80006d2:	e08b      	b.n	80007ec <__aeabi_dadd+0x398>
 80006d4:	2701      	movs	r7, #1
 80006d6:	2938      	cmp	r1, #56	@ 0x38
 80006d8:	dcb2      	bgt.n	8000640 <__aeabi_dadd+0x1ec>
 80006da:	2780      	movs	r7, #128	@ 0x80
 80006dc:	043f      	lsls	r7, r7, #16
 80006de:	433b      	orrs	r3, r7
 80006e0:	e79c      	b.n	800061c <__aeabi_dadd+0x1c8>
 80006e2:	2600      	movs	r6, #0
 80006e4:	2700      	movs	r7, #0
 80006e6:	0524      	lsls	r4, r4, #20
 80006e8:	4334      	orrs	r4, r6
 80006ea:	07ed      	lsls	r5, r5, #31
 80006ec:	432c      	orrs	r4, r5
 80006ee:	0038      	movs	r0, r7
 80006f0:	0021      	movs	r1, r4
 80006f2:	b002      	add	sp, #8
 80006f4:	bce0      	pop	{r5, r6, r7}
 80006f6:	46ba      	mov	sl, r7
 80006f8:	46b1      	mov	r9, r6
 80006fa:	46a8      	mov	r8, r5
 80006fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fe:	077b      	lsls	r3, r7, #29
 8000700:	d004      	beq.n	800070c <__aeabi_dadd+0x2b8>
 8000702:	230f      	movs	r3, #15
 8000704:	403b      	ands	r3, r7
 8000706:	2b04      	cmp	r3, #4
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x2b8>
 800070a:	e728      	b.n	800055e <__aeabi_dadd+0x10a>
 800070c:	08f8      	lsrs	r0, r7, #3
 800070e:	4b34      	ldr	r3, [pc, #208]	@ (80007e0 <__aeabi_dadd+0x38c>)
 8000710:	0777      	lsls	r7, r6, #29
 8000712:	4307      	orrs	r7, r0
 8000714:	08f0      	lsrs	r0, r6, #3
 8000716:	429c      	cmp	r4, r3
 8000718:	d000      	beq.n	800071c <__aeabi_dadd+0x2c8>
 800071a:	e24a      	b.n	8000bb2 <__aeabi_dadd+0x75e>
 800071c:	003b      	movs	r3, r7
 800071e:	4303      	orrs	r3, r0
 8000720:	d059      	beq.n	80007d6 <__aeabi_dadd+0x382>
 8000722:	2680      	movs	r6, #128	@ 0x80
 8000724:	0336      	lsls	r6, r6, #12
 8000726:	4306      	orrs	r6, r0
 8000728:	0336      	lsls	r6, r6, #12
 800072a:	4c2d      	ldr	r4, [pc, #180]	@ (80007e0 <__aeabi_dadd+0x38c>)
 800072c:	0b36      	lsrs	r6, r6, #12
 800072e:	e7da      	b.n	80006e6 <__aeabi_dadd+0x292>
 8000730:	2900      	cmp	r1, #0
 8000732:	d061      	beq.n	80007f8 <__aeabi_dadd+0x3a4>
 8000734:	4641      	mov	r1, r8
 8000736:	1b09      	subs	r1, r1, r4
 8000738:	2c00      	cmp	r4, #0
 800073a:	d100      	bne.n	800073e <__aeabi_dadd+0x2ea>
 800073c:	e0b9      	b.n	80008b2 <__aeabi_dadd+0x45e>
 800073e:	4c28      	ldr	r4, [pc, #160]	@ (80007e0 <__aeabi_dadd+0x38c>)
 8000740:	45a0      	cmp	r8, r4
 8000742:	d100      	bne.n	8000746 <__aeabi_dadd+0x2f2>
 8000744:	e1a5      	b.n	8000a92 <__aeabi_dadd+0x63e>
 8000746:	2701      	movs	r7, #1
 8000748:	2938      	cmp	r1, #56	@ 0x38
 800074a:	dc13      	bgt.n	8000774 <__aeabi_dadd+0x320>
 800074c:	2480      	movs	r4, #128	@ 0x80
 800074e:	0424      	lsls	r4, r4, #16
 8000750:	4326      	orrs	r6, r4
 8000752:	291f      	cmp	r1, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0x304>
 8000756:	e1c8      	b.n	8000aea <__aeabi_dadd+0x696>
 8000758:	2420      	movs	r4, #32
 800075a:	0037      	movs	r7, r6
 800075c:	4648      	mov	r0, r9
 800075e:	1a64      	subs	r4, r4, r1
 8000760:	40a7      	lsls	r7, r4
 8000762:	40c8      	lsrs	r0, r1
 8000764:	4307      	orrs	r7, r0
 8000766:	4648      	mov	r0, r9
 8000768:	40a0      	lsls	r0, r4
 800076a:	40ce      	lsrs	r6, r1
 800076c:	1e44      	subs	r4, r0, #1
 800076e:	41a0      	sbcs	r0, r4
 8000770:	199b      	adds	r3, r3, r6
 8000772:	4307      	orrs	r7, r0
 8000774:	18bf      	adds	r7, r7, r2
 8000776:	4297      	cmp	r7, r2
 8000778:	4192      	sbcs	r2, r2
 800077a:	4252      	negs	r2, r2
 800077c:	4644      	mov	r4, r8
 800077e:	18d6      	adds	r6, r2, r3
 8000780:	e763      	b.n	800064a <__aeabi_dadd+0x1f6>
 8000782:	0038      	movs	r0, r7
 8000784:	f000 fd7c 	bl	8001280 <__clzsi2>
 8000788:	0003      	movs	r3, r0
 800078a:	3318      	adds	r3, #24
 800078c:	2b1f      	cmp	r3, #31
 800078e:	dc00      	bgt.n	8000792 <__aeabi_dadd+0x33e>
 8000790:	e6bf      	b.n	8000512 <__aeabi_dadd+0xbe>
 8000792:	003a      	movs	r2, r7
 8000794:	3808      	subs	r0, #8
 8000796:	4082      	lsls	r2, r0
 8000798:	429c      	cmp	r4, r3
 800079a:	dd00      	ble.n	800079e <__aeabi_dadd+0x34a>
 800079c:	e083      	b.n	80008a6 <__aeabi_dadd+0x452>
 800079e:	1b1b      	subs	r3, r3, r4
 80007a0:	1c58      	adds	r0, r3, #1
 80007a2:	281f      	cmp	r0, #31
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_dadd+0x354>
 80007a6:	e1b4      	b.n	8000b12 <__aeabi_dadd+0x6be>
 80007a8:	0017      	movs	r7, r2
 80007aa:	3b1f      	subs	r3, #31
 80007ac:	40df      	lsrs	r7, r3
 80007ae:	2820      	cmp	r0, #32
 80007b0:	d005      	beq.n	80007be <__aeabi_dadd+0x36a>
 80007b2:	2340      	movs	r3, #64	@ 0x40
 80007b4:	1a1b      	subs	r3, r3, r0
 80007b6:	409a      	lsls	r2, r3
 80007b8:	1e53      	subs	r3, r2, #1
 80007ba:	419a      	sbcs	r2, r3
 80007bc:	4317      	orrs	r7, r2
 80007be:	2400      	movs	r4, #0
 80007c0:	2f00      	cmp	r7, #0
 80007c2:	d00a      	beq.n	80007da <__aeabi_dadd+0x386>
 80007c4:	077b      	lsls	r3, r7, #29
 80007c6:	d000      	beq.n	80007ca <__aeabi_dadd+0x376>
 80007c8:	e6c4      	b.n	8000554 <__aeabi_dadd+0x100>
 80007ca:	0026      	movs	r6, r4
 80007cc:	e79e      	b.n	800070c <__aeabi_dadd+0x2b8>
 80007ce:	464b      	mov	r3, r9
 80007d0:	000c      	movs	r4, r1
 80007d2:	08d8      	lsrs	r0, r3, #3
 80007d4:	e79b      	b.n	800070e <__aeabi_dadd+0x2ba>
 80007d6:	2700      	movs	r7, #0
 80007d8:	4c01      	ldr	r4, [pc, #4]	@ (80007e0 <__aeabi_dadd+0x38c>)
 80007da:	2600      	movs	r6, #0
 80007dc:	e783      	b.n	80006e6 <__aeabi_dadd+0x292>
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	000007ff 	.word	0x000007ff
 80007e4:	ff7fffff 	.word	0xff7fffff
 80007e8:	000007fe 	.word	0x000007fe
 80007ec:	464b      	mov	r3, r9
 80007ee:	0777      	lsls	r7, r6, #29
 80007f0:	08d8      	lsrs	r0, r3, #3
 80007f2:	4307      	orrs	r7, r0
 80007f4:	08f0      	lsrs	r0, r6, #3
 80007f6:	e791      	b.n	800071c <__aeabi_dadd+0x2c8>
 80007f8:	4fcd      	ldr	r7, [pc, #820]	@ (8000b30 <__aeabi_dadd+0x6dc>)
 80007fa:	1c61      	adds	r1, r4, #1
 80007fc:	4239      	tst	r1, r7
 80007fe:	d16b      	bne.n	80008d8 <__aeabi_dadd+0x484>
 8000800:	0031      	movs	r1, r6
 8000802:	4648      	mov	r0, r9
 8000804:	4301      	orrs	r1, r0
 8000806:	2c00      	cmp	r4, #0
 8000808:	d000      	beq.n	800080c <__aeabi_dadd+0x3b8>
 800080a:	e14b      	b.n	8000aa4 <__aeabi_dadd+0x650>
 800080c:	001f      	movs	r7, r3
 800080e:	4317      	orrs	r7, r2
 8000810:	2900      	cmp	r1, #0
 8000812:	d100      	bne.n	8000816 <__aeabi_dadd+0x3c2>
 8000814:	e181      	b.n	8000b1a <__aeabi_dadd+0x6c6>
 8000816:	2f00      	cmp	r7, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x3c8>
 800081a:	e74c      	b.n	80006b6 <__aeabi_dadd+0x262>
 800081c:	444a      	add	r2, r9
 800081e:	454a      	cmp	r2, r9
 8000820:	4180      	sbcs	r0, r0
 8000822:	18f6      	adds	r6, r6, r3
 8000824:	4240      	negs	r0, r0
 8000826:	1836      	adds	r6, r6, r0
 8000828:	0233      	lsls	r3, r6, #8
 800082a:	d500      	bpl.n	800082e <__aeabi_dadd+0x3da>
 800082c:	e1b0      	b.n	8000b90 <__aeabi_dadd+0x73c>
 800082e:	0017      	movs	r7, r2
 8000830:	4691      	mov	r9, r2
 8000832:	4337      	orrs	r7, r6
 8000834:	d000      	beq.n	8000838 <__aeabi_dadd+0x3e4>
 8000836:	e73e      	b.n	80006b6 <__aeabi_dadd+0x262>
 8000838:	2600      	movs	r6, #0
 800083a:	e754      	b.n	80006e6 <__aeabi_dadd+0x292>
 800083c:	4649      	mov	r1, r9
 800083e:	1a89      	subs	r1, r1, r2
 8000840:	4688      	mov	r8, r1
 8000842:	45c1      	cmp	r9, r8
 8000844:	41bf      	sbcs	r7, r7
 8000846:	1af1      	subs	r1, r6, r3
 8000848:	427f      	negs	r7, r7
 800084a:	1bc9      	subs	r1, r1, r7
 800084c:	020f      	lsls	r7, r1, #8
 800084e:	d461      	bmi.n	8000914 <__aeabi_dadd+0x4c0>
 8000850:	4647      	mov	r7, r8
 8000852:	430f      	orrs	r7, r1
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x404>
 8000856:	e0bd      	b.n	80009d4 <__aeabi_dadd+0x580>
 8000858:	000e      	movs	r6, r1
 800085a:	4647      	mov	r7, r8
 800085c:	e651      	b.n	8000502 <__aeabi_dadd+0xae>
 800085e:	4cb5      	ldr	r4, [pc, #724]	@ (8000b34 <__aeabi_dadd+0x6e0>)
 8000860:	45a0      	cmp	r8, r4
 8000862:	d100      	bne.n	8000866 <__aeabi_dadd+0x412>
 8000864:	e100      	b.n	8000a68 <__aeabi_dadd+0x614>
 8000866:	2701      	movs	r7, #1
 8000868:	2938      	cmp	r1, #56	@ 0x38
 800086a:	dd00      	ble.n	800086e <__aeabi_dadd+0x41a>
 800086c:	e6b8      	b.n	80005e0 <__aeabi_dadd+0x18c>
 800086e:	2480      	movs	r4, #128	@ 0x80
 8000870:	0424      	lsls	r4, r4, #16
 8000872:	4326      	orrs	r6, r4
 8000874:	e6a3      	b.n	80005be <__aeabi_dadd+0x16a>
 8000876:	4eb0      	ldr	r6, [pc, #704]	@ (8000b38 <__aeabi_dadd+0x6e4>)
 8000878:	1ae4      	subs	r4, r4, r3
 800087a:	4016      	ands	r6, r2
 800087c:	077b      	lsls	r3, r7, #29
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x42e>
 8000880:	e73f      	b.n	8000702 <__aeabi_dadd+0x2ae>
 8000882:	e743      	b.n	800070c <__aeabi_dadd+0x2b8>
 8000884:	000f      	movs	r7, r1
 8000886:	0018      	movs	r0, r3
 8000888:	3f20      	subs	r7, #32
 800088a:	40f8      	lsrs	r0, r7
 800088c:	4684      	mov	ip, r0
 800088e:	2920      	cmp	r1, #32
 8000890:	d003      	beq.n	800089a <__aeabi_dadd+0x446>
 8000892:	2740      	movs	r7, #64	@ 0x40
 8000894:	1a79      	subs	r1, r7, r1
 8000896:	408b      	lsls	r3, r1
 8000898:	431a      	orrs	r2, r3
 800089a:	1e53      	subs	r3, r2, #1
 800089c:	419a      	sbcs	r2, r3
 800089e:	4663      	mov	r3, ip
 80008a0:	0017      	movs	r7, r2
 80008a2:	431f      	orrs	r7, r3
 80008a4:	e622      	b.n	80004ec <__aeabi_dadd+0x98>
 80008a6:	48a4      	ldr	r0, [pc, #656]	@ (8000b38 <__aeabi_dadd+0x6e4>)
 80008a8:	1ae1      	subs	r1, r4, r3
 80008aa:	4010      	ands	r0, r2
 80008ac:	0747      	lsls	r7, r0, #29
 80008ae:	08c0      	lsrs	r0, r0, #3
 80008b0:	e707      	b.n	80006c2 <__aeabi_dadd+0x26e>
 80008b2:	0034      	movs	r4, r6
 80008b4:	4648      	mov	r0, r9
 80008b6:	4304      	orrs	r4, r0
 80008b8:	d100      	bne.n	80008bc <__aeabi_dadd+0x468>
 80008ba:	e0fa      	b.n	8000ab2 <__aeabi_dadd+0x65e>
 80008bc:	1e4c      	subs	r4, r1, #1
 80008be:	2901      	cmp	r1, #1
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x470>
 80008c2:	e0d7      	b.n	8000a74 <__aeabi_dadd+0x620>
 80008c4:	4f9b      	ldr	r7, [pc, #620]	@ (8000b34 <__aeabi_dadd+0x6e0>)
 80008c6:	42b9      	cmp	r1, r7
 80008c8:	d100      	bne.n	80008cc <__aeabi_dadd+0x478>
 80008ca:	e0e2      	b.n	8000a92 <__aeabi_dadd+0x63e>
 80008cc:	2701      	movs	r7, #1
 80008ce:	2c38      	cmp	r4, #56	@ 0x38
 80008d0:	dd00      	ble.n	80008d4 <__aeabi_dadd+0x480>
 80008d2:	e74f      	b.n	8000774 <__aeabi_dadd+0x320>
 80008d4:	0021      	movs	r1, r4
 80008d6:	e73c      	b.n	8000752 <__aeabi_dadd+0x2fe>
 80008d8:	4c96      	ldr	r4, [pc, #600]	@ (8000b34 <__aeabi_dadd+0x6e0>)
 80008da:	42a1      	cmp	r1, r4
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x48c>
 80008de:	e0dd      	b.n	8000a9c <__aeabi_dadd+0x648>
 80008e0:	444a      	add	r2, r9
 80008e2:	454a      	cmp	r2, r9
 80008e4:	4180      	sbcs	r0, r0
 80008e6:	18f3      	adds	r3, r6, r3
 80008e8:	4240      	negs	r0, r0
 80008ea:	1818      	adds	r0, r3, r0
 80008ec:	07c7      	lsls	r7, r0, #31
 80008ee:	0852      	lsrs	r2, r2, #1
 80008f0:	4317      	orrs	r7, r2
 80008f2:	0846      	lsrs	r6, r0, #1
 80008f4:	0752      	lsls	r2, r2, #29
 80008f6:	d005      	beq.n	8000904 <__aeabi_dadd+0x4b0>
 80008f8:	220f      	movs	r2, #15
 80008fa:	000c      	movs	r4, r1
 80008fc:	403a      	ands	r2, r7
 80008fe:	2a04      	cmp	r2, #4
 8000900:	d000      	beq.n	8000904 <__aeabi_dadd+0x4b0>
 8000902:	e62c      	b.n	800055e <__aeabi_dadd+0x10a>
 8000904:	0776      	lsls	r6, r6, #29
 8000906:	08ff      	lsrs	r7, r7, #3
 8000908:	4337      	orrs	r7, r6
 800090a:	0900      	lsrs	r0, r0, #4
 800090c:	e6d9      	b.n	80006c2 <__aeabi_dadd+0x26e>
 800090e:	2700      	movs	r7, #0
 8000910:	2600      	movs	r6, #0
 8000912:	e6e8      	b.n	80006e6 <__aeabi_dadd+0x292>
 8000914:	4649      	mov	r1, r9
 8000916:	1a57      	subs	r7, r2, r1
 8000918:	42ba      	cmp	r2, r7
 800091a:	4192      	sbcs	r2, r2
 800091c:	1b9e      	subs	r6, r3, r6
 800091e:	4252      	negs	r2, r2
 8000920:	4665      	mov	r5, ip
 8000922:	1ab6      	subs	r6, r6, r2
 8000924:	e5ed      	b.n	8000502 <__aeabi_dadd+0xae>
 8000926:	2900      	cmp	r1, #0
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x4d8>
 800092a:	e0c6      	b.n	8000aba <__aeabi_dadd+0x666>
 800092c:	2f00      	cmp	r7, #0
 800092e:	d167      	bne.n	8000a00 <__aeabi_dadd+0x5ac>
 8000930:	2680      	movs	r6, #128	@ 0x80
 8000932:	2500      	movs	r5, #0
 8000934:	4c7f      	ldr	r4, [pc, #508]	@ (8000b34 <__aeabi_dadd+0x6e0>)
 8000936:	0336      	lsls	r6, r6, #12
 8000938:	e6d5      	b.n	80006e6 <__aeabi_dadd+0x292>
 800093a:	4665      	mov	r5, ip
 800093c:	000c      	movs	r4, r1
 800093e:	001e      	movs	r6, r3
 8000940:	08d0      	lsrs	r0, r2, #3
 8000942:	e6e4      	b.n	800070e <__aeabi_dadd+0x2ba>
 8000944:	444a      	add	r2, r9
 8000946:	454a      	cmp	r2, r9
 8000948:	4180      	sbcs	r0, r0
 800094a:	18f3      	adds	r3, r6, r3
 800094c:	4240      	negs	r0, r0
 800094e:	1818      	adds	r0, r3, r0
 8000950:	0011      	movs	r1, r2
 8000952:	0203      	lsls	r3, r0, #8
 8000954:	d400      	bmi.n	8000958 <__aeabi_dadd+0x504>
 8000956:	e096      	b.n	8000a86 <__aeabi_dadd+0x632>
 8000958:	4b77      	ldr	r3, [pc, #476]	@ (8000b38 <__aeabi_dadd+0x6e4>)
 800095a:	0849      	lsrs	r1, r1, #1
 800095c:	4018      	ands	r0, r3
 800095e:	07c3      	lsls	r3, r0, #31
 8000960:	430b      	orrs	r3, r1
 8000962:	0844      	lsrs	r4, r0, #1
 8000964:	0749      	lsls	r1, r1, #29
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x516>
 8000968:	e129      	b.n	8000bbe <__aeabi_dadd+0x76a>
 800096a:	220f      	movs	r2, #15
 800096c:	401a      	ands	r2, r3
 800096e:	2a04      	cmp	r2, #4
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x520>
 8000972:	e0ea      	b.n	8000b4a <__aeabi_dadd+0x6f6>
 8000974:	1d1f      	adds	r7, r3, #4
 8000976:	429f      	cmp	r7, r3
 8000978:	41b6      	sbcs	r6, r6
 800097a:	4276      	negs	r6, r6
 800097c:	1936      	adds	r6, r6, r4
 800097e:	2402      	movs	r4, #2
 8000980:	e6c4      	b.n	800070c <__aeabi_dadd+0x2b8>
 8000982:	4649      	mov	r1, r9
 8000984:	1a8f      	subs	r7, r1, r2
 8000986:	45b9      	cmp	r9, r7
 8000988:	4180      	sbcs	r0, r0
 800098a:	1af6      	subs	r6, r6, r3
 800098c:	4240      	negs	r0, r0
 800098e:	1a36      	subs	r6, r6, r0
 8000990:	0233      	lsls	r3, r6, #8
 8000992:	d406      	bmi.n	80009a2 <__aeabi_dadd+0x54e>
 8000994:	0773      	lsls	r3, r6, #29
 8000996:	08ff      	lsrs	r7, r7, #3
 8000998:	2101      	movs	r1, #1
 800099a:	431f      	orrs	r7, r3
 800099c:	08f0      	lsrs	r0, r6, #3
 800099e:	e690      	b.n	80006c2 <__aeabi_dadd+0x26e>
 80009a0:	4665      	mov	r5, ip
 80009a2:	2401      	movs	r4, #1
 80009a4:	e5ab      	b.n	80004fe <__aeabi_dadd+0xaa>
 80009a6:	464b      	mov	r3, r9
 80009a8:	0777      	lsls	r7, r6, #29
 80009aa:	08d8      	lsrs	r0, r3, #3
 80009ac:	4307      	orrs	r7, r0
 80009ae:	08f0      	lsrs	r0, r6, #3
 80009b0:	e6b4      	b.n	800071c <__aeabi_dadd+0x2c8>
 80009b2:	000f      	movs	r7, r1
 80009b4:	0018      	movs	r0, r3
 80009b6:	3f20      	subs	r7, #32
 80009b8:	40f8      	lsrs	r0, r7
 80009ba:	4684      	mov	ip, r0
 80009bc:	2920      	cmp	r1, #32
 80009be:	d003      	beq.n	80009c8 <__aeabi_dadd+0x574>
 80009c0:	2740      	movs	r7, #64	@ 0x40
 80009c2:	1a79      	subs	r1, r7, r1
 80009c4:	408b      	lsls	r3, r1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	1e53      	subs	r3, r2, #1
 80009ca:	419a      	sbcs	r2, r3
 80009cc:	4663      	mov	r3, ip
 80009ce:	0017      	movs	r7, r2
 80009d0:	431f      	orrs	r7, r3
 80009d2:	e635      	b.n	8000640 <__aeabi_dadd+0x1ec>
 80009d4:	2500      	movs	r5, #0
 80009d6:	2400      	movs	r4, #0
 80009d8:	2600      	movs	r6, #0
 80009da:	e684      	b.n	80006e6 <__aeabi_dadd+0x292>
 80009dc:	000c      	movs	r4, r1
 80009de:	0035      	movs	r5, r6
 80009e0:	3c20      	subs	r4, #32
 80009e2:	40e5      	lsrs	r5, r4
 80009e4:	2920      	cmp	r1, #32
 80009e6:	d005      	beq.n	80009f4 <__aeabi_dadd+0x5a0>
 80009e8:	2440      	movs	r4, #64	@ 0x40
 80009ea:	1a61      	subs	r1, r4, r1
 80009ec:	408e      	lsls	r6, r1
 80009ee:	4649      	mov	r1, r9
 80009f0:	4331      	orrs	r1, r6
 80009f2:	4689      	mov	r9, r1
 80009f4:	4648      	mov	r0, r9
 80009f6:	1e41      	subs	r1, r0, #1
 80009f8:	4188      	sbcs	r0, r1
 80009fa:	0007      	movs	r7, r0
 80009fc:	432f      	orrs	r7, r5
 80009fe:	e5ef      	b.n	80005e0 <__aeabi_dadd+0x18c>
 8000a00:	08d2      	lsrs	r2, r2, #3
 8000a02:	075f      	lsls	r7, r3, #29
 8000a04:	4665      	mov	r5, ip
 8000a06:	4317      	orrs	r7, r2
 8000a08:	08d8      	lsrs	r0, r3, #3
 8000a0a:	e687      	b.n	800071c <__aeabi_dadd+0x2c8>
 8000a0c:	1a17      	subs	r7, r2, r0
 8000a0e:	42ba      	cmp	r2, r7
 8000a10:	4192      	sbcs	r2, r2
 8000a12:	1b9e      	subs	r6, r3, r6
 8000a14:	4252      	negs	r2, r2
 8000a16:	1ab6      	subs	r6, r6, r2
 8000a18:	0233      	lsls	r3, r6, #8
 8000a1a:	d4c1      	bmi.n	80009a0 <__aeabi_dadd+0x54c>
 8000a1c:	0773      	lsls	r3, r6, #29
 8000a1e:	08ff      	lsrs	r7, r7, #3
 8000a20:	4665      	mov	r5, ip
 8000a22:	2101      	movs	r1, #1
 8000a24:	431f      	orrs	r7, r3
 8000a26:	08f0      	lsrs	r0, r6, #3
 8000a28:	e64b      	b.n	80006c2 <__aeabi_dadd+0x26e>
 8000a2a:	2f00      	cmp	r7, #0
 8000a2c:	d07b      	beq.n	8000b26 <__aeabi_dadd+0x6d2>
 8000a2e:	4665      	mov	r5, ip
 8000a30:	001e      	movs	r6, r3
 8000a32:	4691      	mov	r9, r2
 8000a34:	e63f      	b.n	80006b6 <__aeabi_dadd+0x262>
 8000a36:	1a81      	subs	r1, r0, r2
 8000a38:	4688      	mov	r8, r1
 8000a3a:	45c1      	cmp	r9, r8
 8000a3c:	41a4      	sbcs	r4, r4
 8000a3e:	1af1      	subs	r1, r6, r3
 8000a40:	4264      	negs	r4, r4
 8000a42:	1b09      	subs	r1, r1, r4
 8000a44:	2480      	movs	r4, #128	@ 0x80
 8000a46:	0424      	lsls	r4, r4, #16
 8000a48:	4221      	tst	r1, r4
 8000a4a:	d077      	beq.n	8000b3c <__aeabi_dadd+0x6e8>
 8000a4c:	1a10      	subs	r0, r2, r0
 8000a4e:	4282      	cmp	r2, r0
 8000a50:	4192      	sbcs	r2, r2
 8000a52:	0007      	movs	r7, r0
 8000a54:	1b9e      	subs	r6, r3, r6
 8000a56:	4252      	negs	r2, r2
 8000a58:	1ab6      	subs	r6, r6, r2
 8000a5a:	4337      	orrs	r7, r6
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_dadd+0x60c>
 8000a5e:	e0a0      	b.n	8000ba2 <__aeabi_dadd+0x74e>
 8000a60:	4665      	mov	r5, ip
 8000a62:	2400      	movs	r4, #0
 8000a64:	2600      	movs	r6, #0
 8000a66:	e63e      	b.n	80006e6 <__aeabi_dadd+0x292>
 8000a68:	075f      	lsls	r7, r3, #29
 8000a6a:	08d2      	lsrs	r2, r2, #3
 8000a6c:	4665      	mov	r5, ip
 8000a6e:	4317      	orrs	r7, r2
 8000a70:	08d8      	lsrs	r0, r3, #3
 8000a72:	e653      	b.n	800071c <__aeabi_dadd+0x2c8>
 8000a74:	1881      	adds	r1, r0, r2
 8000a76:	4291      	cmp	r1, r2
 8000a78:	4192      	sbcs	r2, r2
 8000a7a:	18f0      	adds	r0, r6, r3
 8000a7c:	4252      	negs	r2, r2
 8000a7e:	1880      	adds	r0, r0, r2
 8000a80:	0203      	lsls	r3, r0, #8
 8000a82:	d500      	bpl.n	8000a86 <__aeabi_dadd+0x632>
 8000a84:	e768      	b.n	8000958 <__aeabi_dadd+0x504>
 8000a86:	0747      	lsls	r7, r0, #29
 8000a88:	08c9      	lsrs	r1, r1, #3
 8000a8a:	430f      	orrs	r7, r1
 8000a8c:	08c0      	lsrs	r0, r0, #3
 8000a8e:	2101      	movs	r1, #1
 8000a90:	e617      	b.n	80006c2 <__aeabi_dadd+0x26e>
 8000a92:	08d2      	lsrs	r2, r2, #3
 8000a94:	075f      	lsls	r7, r3, #29
 8000a96:	4317      	orrs	r7, r2
 8000a98:	08d8      	lsrs	r0, r3, #3
 8000a9a:	e63f      	b.n	800071c <__aeabi_dadd+0x2c8>
 8000a9c:	000c      	movs	r4, r1
 8000a9e:	2600      	movs	r6, #0
 8000aa0:	2700      	movs	r7, #0
 8000aa2:	e620      	b.n	80006e6 <__aeabi_dadd+0x292>
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	d156      	bne.n	8000b56 <__aeabi_dadd+0x702>
 8000aa8:	075f      	lsls	r7, r3, #29
 8000aaa:	08d2      	lsrs	r2, r2, #3
 8000aac:	4317      	orrs	r7, r2
 8000aae:	08d8      	lsrs	r0, r3, #3
 8000ab0:	e634      	b.n	800071c <__aeabi_dadd+0x2c8>
 8000ab2:	000c      	movs	r4, r1
 8000ab4:	001e      	movs	r6, r3
 8000ab6:	08d0      	lsrs	r0, r2, #3
 8000ab8:	e629      	b.n	800070e <__aeabi_dadd+0x2ba>
 8000aba:	08c1      	lsrs	r1, r0, #3
 8000abc:	0770      	lsls	r0, r6, #29
 8000abe:	4301      	orrs	r1, r0
 8000ac0:	08f0      	lsrs	r0, r6, #3
 8000ac2:	2f00      	cmp	r7, #0
 8000ac4:	d062      	beq.n	8000b8c <__aeabi_dadd+0x738>
 8000ac6:	2480      	movs	r4, #128	@ 0x80
 8000ac8:	0324      	lsls	r4, r4, #12
 8000aca:	4220      	tst	r0, r4
 8000acc:	d007      	beq.n	8000ade <__aeabi_dadd+0x68a>
 8000ace:	08de      	lsrs	r6, r3, #3
 8000ad0:	4226      	tst	r6, r4
 8000ad2:	d104      	bne.n	8000ade <__aeabi_dadd+0x68a>
 8000ad4:	4665      	mov	r5, ip
 8000ad6:	0030      	movs	r0, r6
 8000ad8:	08d1      	lsrs	r1, r2, #3
 8000ada:	075b      	lsls	r3, r3, #29
 8000adc:	4319      	orrs	r1, r3
 8000ade:	0f4f      	lsrs	r7, r1, #29
 8000ae0:	00c9      	lsls	r1, r1, #3
 8000ae2:	08c9      	lsrs	r1, r1, #3
 8000ae4:	077f      	lsls	r7, r7, #29
 8000ae6:	430f      	orrs	r7, r1
 8000ae8:	e618      	b.n	800071c <__aeabi_dadd+0x2c8>
 8000aea:	000c      	movs	r4, r1
 8000aec:	0030      	movs	r0, r6
 8000aee:	3c20      	subs	r4, #32
 8000af0:	40e0      	lsrs	r0, r4
 8000af2:	4684      	mov	ip, r0
 8000af4:	2920      	cmp	r1, #32
 8000af6:	d005      	beq.n	8000b04 <__aeabi_dadd+0x6b0>
 8000af8:	2440      	movs	r4, #64	@ 0x40
 8000afa:	1a61      	subs	r1, r4, r1
 8000afc:	408e      	lsls	r6, r1
 8000afe:	4649      	mov	r1, r9
 8000b00:	4331      	orrs	r1, r6
 8000b02:	4689      	mov	r9, r1
 8000b04:	4648      	mov	r0, r9
 8000b06:	1e41      	subs	r1, r0, #1
 8000b08:	4188      	sbcs	r0, r1
 8000b0a:	4661      	mov	r1, ip
 8000b0c:	0007      	movs	r7, r0
 8000b0e:	430f      	orrs	r7, r1
 8000b10:	e630      	b.n	8000774 <__aeabi_dadd+0x320>
 8000b12:	2120      	movs	r1, #32
 8000b14:	2700      	movs	r7, #0
 8000b16:	1a09      	subs	r1, r1, r0
 8000b18:	e50e      	b.n	8000538 <__aeabi_dadd+0xe4>
 8000b1a:	001e      	movs	r6, r3
 8000b1c:	2f00      	cmp	r7, #0
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_dadd+0x6ce>
 8000b20:	e522      	b.n	8000568 <__aeabi_dadd+0x114>
 8000b22:	2400      	movs	r4, #0
 8000b24:	e758      	b.n	80009d8 <__aeabi_dadd+0x584>
 8000b26:	2500      	movs	r5, #0
 8000b28:	2400      	movs	r4, #0
 8000b2a:	2600      	movs	r6, #0
 8000b2c:	e5db      	b.n	80006e6 <__aeabi_dadd+0x292>
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	000007fe 	.word	0x000007fe
 8000b34:	000007ff 	.word	0x000007ff
 8000b38:	ff7fffff 	.word	0xff7fffff
 8000b3c:	4647      	mov	r7, r8
 8000b3e:	430f      	orrs	r7, r1
 8000b40:	d100      	bne.n	8000b44 <__aeabi_dadd+0x6f0>
 8000b42:	e747      	b.n	80009d4 <__aeabi_dadd+0x580>
 8000b44:	000e      	movs	r6, r1
 8000b46:	46c1      	mov	r9, r8
 8000b48:	e5b5      	b.n	80006b6 <__aeabi_dadd+0x262>
 8000b4a:	08df      	lsrs	r7, r3, #3
 8000b4c:	0764      	lsls	r4, r4, #29
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4327      	orrs	r7, r4
 8000b52:	0900      	lsrs	r0, r0, #4
 8000b54:	e5b5      	b.n	80006c2 <__aeabi_dadd+0x26e>
 8000b56:	0019      	movs	r1, r3
 8000b58:	08c0      	lsrs	r0, r0, #3
 8000b5a:	0777      	lsls	r7, r6, #29
 8000b5c:	4307      	orrs	r7, r0
 8000b5e:	4311      	orrs	r1, r2
 8000b60:	08f0      	lsrs	r0, r6, #3
 8000b62:	2900      	cmp	r1, #0
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dadd+0x714>
 8000b66:	e5d9      	b.n	800071c <__aeabi_dadd+0x2c8>
 8000b68:	2180      	movs	r1, #128	@ 0x80
 8000b6a:	0309      	lsls	r1, r1, #12
 8000b6c:	4208      	tst	r0, r1
 8000b6e:	d007      	beq.n	8000b80 <__aeabi_dadd+0x72c>
 8000b70:	08dc      	lsrs	r4, r3, #3
 8000b72:	420c      	tst	r4, r1
 8000b74:	d104      	bne.n	8000b80 <__aeabi_dadd+0x72c>
 8000b76:	08d2      	lsrs	r2, r2, #3
 8000b78:	075b      	lsls	r3, r3, #29
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	0017      	movs	r7, r2
 8000b7e:	0020      	movs	r0, r4
 8000b80:	0f7b      	lsrs	r3, r7, #29
 8000b82:	00ff      	lsls	r7, r7, #3
 8000b84:	08ff      	lsrs	r7, r7, #3
 8000b86:	075b      	lsls	r3, r3, #29
 8000b88:	431f      	orrs	r7, r3
 8000b8a:	e5c7      	b.n	800071c <__aeabi_dadd+0x2c8>
 8000b8c:	000f      	movs	r7, r1
 8000b8e:	e5c5      	b.n	800071c <__aeabi_dadd+0x2c8>
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <__aeabi_dadd+0x788>)
 8000b92:	08d2      	lsrs	r2, r2, #3
 8000b94:	4033      	ands	r3, r6
 8000b96:	075f      	lsls	r7, r3, #29
 8000b98:	025b      	lsls	r3, r3, #9
 8000b9a:	2401      	movs	r4, #1
 8000b9c:	4317      	orrs	r7, r2
 8000b9e:	0b1e      	lsrs	r6, r3, #12
 8000ba0:	e5a1      	b.n	80006e6 <__aeabi_dadd+0x292>
 8000ba2:	4226      	tst	r6, r4
 8000ba4:	d012      	beq.n	8000bcc <__aeabi_dadd+0x778>
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <__aeabi_dadd+0x788>)
 8000ba8:	4665      	mov	r5, ip
 8000baa:	0002      	movs	r2, r0
 8000bac:	2401      	movs	r4, #1
 8000bae:	401e      	ands	r6, r3
 8000bb0:	e4e6      	b.n	8000580 <__aeabi_dadd+0x12c>
 8000bb2:	0021      	movs	r1, r4
 8000bb4:	e585      	b.n	80006c2 <__aeabi_dadd+0x26e>
 8000bb6:	0017      	movs	r7, r2
 8000bb8:	e5a8      	b.n	800070c <__aeabi_dadd+0x2b8>
 8000bba:	003a      	movs	r2, r7
 8000bbc:	e4d4      	b.n	8000568 <__aeabi_dadd+0x114>
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	0764      	lsls	r4, r4, #29
 8000bc2:	431c      	orrs	r4, r3
 8000bc4:	0027      	movs	r7, r4
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	0900      	lsrs	r0, r0, #4
 8000bca:	e57a      	b.n	80006c2 <__aeabi_dadd+0x26e>
 8000bcc:	08c0      	lsrs	r0, r0, #3
 8000bce:	0777      	lsls	r7, r6, #29
 8000bd0:	4307      	orrs	r7, r0
 8000bd2:	4665      	mov	r5, ip
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	08f0      	lsrs	r0, r6, #3
 8000bd8:	e573      	b.n	80006c2 <__aeabi_dadd+0x26e>
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	ff7fffff 	.word	0xff7fffff

08000be0 <__aeabi_dmul>:
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	4657      	mov	r7, sl
 8000be4:	464e      	mov	r6, r9
 8000be6:	46de      	mov	lr, fp
 8000be8:	4645      	mov	r5, r8
 8000bea:	b5e0      	push	{r5, r6, r7, lr}
 8000bec:	001f      	movs	r7, r3
 8000bee:	030b      	lsls	r3, r1, #12
 8000bf0:	0b1b      	lsrs	r3, r3, #12
 8000bf2:	0016      	movs	r6, r2
 8000bf4:	469a      	mov	sl, r3
 8000bf6:	0fca      	lsrs	r2, r1, #31
 8000bf8:	004b      	lsls	r3, r1, #1
 8000bfa:	0004      	movs	r4, r0
 8000bfc:	4691      	mov	r9, r2
 8000bfe:	b085      	sub	sp, #20
 8000c00:	0d5b      	lsrs	r3, r3, #21
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dmul+0x26>
 8000c04:	e1cf      	b.n	8000fa6 <__aeabi_dmul+0x3c6>
 8000c06:	4acd      	ldr	r2, [pc, #820]	@ (8000f3c <__aeabi_dmul+0x35c>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d055      	beq.n	8000cb8 <__aeabi_dmul+0xd8>
 8000c0c:	4651      	mov	r1, sl
 8000c0e:	0f42      	lsrs	r2, r0, #29
 8000c10:	00c9      	lsls	r1, r1, #3
 8000c12:	430a      	orrs	r2, r1
 8000c14:	2180      	movs	r1, #128	@ 0x80
 8000c16:	0409      	lsls	r1, r1, #16
 8000c18:	4311      	orrs	r1, r2
 8000c1a:	00c2      	lsls	r2, r0, #3
 8000c1c:	4690      	mov	r8, r2
 8000c1e:	4ac8      	ldr	r2, [pc, #800]	@ (8000f40 <__aeabi_dmul+0x360>)
 8000c20:	468a      	mov	sl, r1
 8000c22:	4693      	mov	fp, r2
 8000c24:	449b      	add	fp, r3
 8000c26:	2300      	movs	r3, #0
 8000c28:	2500      	movs	r5, #0
 8000c2a:	9302      	str	r3, [sp, #8]
 8000c2c:	033c      	lsls	r4, r7, #12
 8000c2e:	007b      	lsls	r3, r7, #1
 8000c30:	0ffa      	lsrs	r2, r7, #31
 8000c32:	9601      	str	r6, [sp, #4]
 8000c34:	0b24      	lsrs	r4, r4, #12
 8000c36:	0d5b      	lsrs	r3, r3, #21
 8000c38:	9200      	str	r2, [sp, #0]
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_dmul+0x5e>
 8000c3c:	e188      	b.n	8000f50 <__aeabi_dmul+0x370>
 8000c3e:	4abf      	ldr	r2, [pc, #764]	@ (8000f3c <__aeabi_dmul+0x35c>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dmul+0x66>
 8000c44:	e092      	b.n	8000d6c <__aeabi_dmul+0x18c>
 8000c46:	4abe      	ldr	r2, [pc, #760]	@ (8000f40 <__aeabi_dmul+0x360>)
 8000c48:	4694      	mov	ip, r2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	449b      	add	fp, r3
 8000c4e:	2d0a      	cmp	r5, #10
 8000c50:	dc42      	bgt.n	8000cd8 <__aeabi_dmul+0xf8>
 8000c52:	00e4      	lsls	r4, r4, #3
 8000c54:	0f73      	lsrs	r3, r6, #29
 8000c56:	4323      	orrs	r3, r4
 8000c58:	2480      	movs	r4, #128	@ 0x80
 8000c5a:	4649      	mov	r1, r9
 8000c5c:	0424      	lsls	r4, r4, #16
 8000c5e:	431c      	orrs	r4, r3
 8000c60:	00f3      	lsls	r3, r6, #3
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	9b00      	ldr	r3, [sp, #0]
 8000c66:	2000      	movs	r0, #0
 8000c68:	4059      	eors	r1, r3
 8000c6a:	b2cb      	uxtb	r3, r1
 8000c6c:	9303      	str	r3, [sp, #12]
 8000c6e:	2d02      	cmp	r5, #2
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_dmul+0x94>
 8000c72:	e094      	b.n	8000d9e <__aeabi_dmul+0x1be>
 8000c74:	2301      	movs	r3, #1
 8000c76:	40ab      	lsls	r3, r5
 8000c78:	001d      	movs	r5, r3
 8000c7a:	23a6      	movs	r3, #166	@ 0xa6
 8000c7c:	002a      	movs	r2, r5
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	401a      	ands	r2, r3
 8000c82:	421d      	tst	r5, r3
 8000c84:	d000      	beq.n	8000c88 <__aeabi_dmul+0xa8>
 8000c86:	e229      	b.n	80010dc <__aeabi_dmul+0x4fc>
 8000c88:	2390      	movs	r3, #144	@ 0x90
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	421d      	tst	r5, r3
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dmul+0xb2>
 8000c90:	e24d      	b.n	800112e <__aeabi_dmul+0x54e>
 8000c92:	2300      	movs	r3, #0
 8000c94:	2480      	movs	r4, #128	@ 0x80
 8000c96:	4699      	mov	r9, r3
 8000c98:	0324      	lsls	r4, r4, #12
 8000c9a:	4ba8      	ldr	r3, [pc, #672]	@ (8000f3c <__aeabi_dmul+0x35c>)
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	464a      	mov	r2, r9
 8000ca0:	051b      	lsls	r3, r3, #20
 8000ca2:	4323      	orrs	r3, r4
 8000ca4:	07d2      	lsls	r2, r2, #31
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	0019      	movs	r1, r3
 8000caa:	b005      	add	sp, #20
 8000cac:	bcf0      	pop	{r4, r5, r6, r7}
 8000cae:	46bb      	mov	fp, r7
 8000cb0:	46b2      	mov	sl, r6
 8000cb2:	46a9      	mov	r9, r5
 8000cb4:	46a0      	mov	r8, r4
 8000cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb8:	4652      	mov	r2, sl
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	4690      	mov	r8, r2
 8000cbe:	d000      	beq.n	8000cc2 <__aeabi_dmul+0xe2>
 8000cc0:	e1ac      	b.n	800101c <__aeabi_dmul+0x43c>
 8000cc2:	469b      	mov	fp, r3
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	4692      	mov	sl, r2
 8000cc8:	2508      	movs	r5, #8
 8000cca:	9302      	str	r3, [sp, #8]
 8000ccc:	e7ae      	b.n	8000c2c <__aeabi_dmul+0x4c>
 8000cce:	9b00      	ldr	r3, [sp, #0]
 8000cd0:	46a2      	mov	sl, r4
 8000cd2:	4699      	mov	r9, r3
 8000cd4:	9b01      	ldr	r3, [sp, #4]
 8000cd6:	4698      	mov	r8, r3
 8000cd8:	9b02      	ldr	r3, [sp, #8]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dmul+0x100>
 8000cde:	e1ca      	b.n	8001076 <__aeabi_dmul+0x496>
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dmul+0x106>
 8000ce4:	e192      	b.n	800100c <__aeabi_dmul+0x42c>
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d110      	bne.n	8000d0c <__aeabi_dmul+0x12c>
 8000cea:	2300      	movs	r3, #0
 8000cec:	2400      	movs	r4, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7d4      	b.n	8000c9c <__aeabi_dmul+0xbc>
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	087b      	lsrs	r3, r7, #1
 8000cf6:	403a      	ands	r2, r7
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	4652      	mov	r2, sl
 8000cfc:	07d2      	lsls	r2, r2, #31
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	4698      	mov	r8, r3
 8000d02:	4653      	mov	r3, sl
 8000d04:	085b      	lsrs	r3, r3, #1
 8000d06:	469a      	mov	sl, r3
 8000d08:	9b03      	ldr	r3, [sp, #12]
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	465b      	mov	r3, fp
 8000d0e:	1c58      	adds	r0, r3, #1
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	445b      	add	r3, fp
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	dc00      	bgt.n	8000d1c <__aeabi_dmul+0x13c>
 8000d1a:	e1b1      	b.n	8001080 <__aeabi_dmul+0x4a0>
 8000d1c:	4642      	mov	r2, r8
 8000d1e:	0752      	lsls	r2, r2, #29
 8000d20:	d00b      	beq.n	8000d3a <__aeabi_dmul+0x15a>
 8000d22:	220f      	movs	r2, #15
 8000d24:	4641      	mov	r1, r8
 8000d26:	400a      	ands	r2, r1
 8000d28:	2a04      	cmp	r2, #4
 8000d2a:	d006      	beq.n	8000d3a <__aeabi_dmul+0x15a>
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	1d11      	adds	r1, r2, #4
 8000d30:	4541      	cmp	r1, r8
 8000d32:	4192      	sbcs	r2, r2
 8000d34:	4688      	mov	r8, r1
 8000d36:	4252      	negs	r2, r2
 8000d38:	4492      	add	sl, r2
 8000d3a:	4652      	mov	r2, sl
 8000d3c:	01d2      	lsls	r2, r2, #7
 8000d3e:	d506      	bpl.n	8000d4e <__aeabi_dmul+0x16e>
 8000d40:	4652      	mov	r2, sl
 8000d42:	4b80      	ldr	r3, [pc, #512]	@ (8000f44 <__aeabi_dmul+0x364>)
 8000d44:	401a      	ands	r2, r3
 8000d46:	2380      	movs	r3, #128	@ 0x80
 8000d48:	4692      	mov	sl, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	18c3      	adds	r3, r0, r3
 8000d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8000f48 <__aeabi_dmul+0x368>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	dd00      	ble.n	8000d56 <__aeabi_dmul+0x176>
 8000d54:	e18f      	b.n	8001076 <__aeabi_dmul+0x496>
 8000d56:	4642      	mov	r2, r8
 8000d58:	08d1      	lsrs	r1, r2, #3
 8000d5a:	4652      	mov	r2, sl
 8000d5c:	0752      	lsls	r2, r2, #29
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	4651      	mov	r1, sl
 8000d62:	055b      	lsls	r3, r3, #21
 8000d64:	024c      	lsls	r4, r1, #9
 8000d66:	0b24      	lsrs	r4, r4, #12
 8000d68:	0d5b      	lsrs	r3, r3, #21
 8000d6a:	e797      	b.n	8000c9c <__aeabi_dmul+0xbc>
 8000d6c:	4b73      	ldr	r3, [pc, #460]	@ (8000f3c <__aeabi_dmul+0x35c>)
 8000d6e:	4326      	orrs	r6, r4
 8000d70:	469c      	mov	ip, r3
 8000d72:	44e3      	add	fp, ip
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dmul+0x19a>
 8000d78:	e16f      	b.n	800105a <__aeabi_dmul+0x47a>
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	4649      	mov	r1, r9
 8000d7e:	431d      	orrs	r5, r3
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	4059      	eors	r1, r3
 8000d84:	b2cb      	uxtb	r3, r1
 8000d86:	9303      	str	r3, [sp, #12]
 8000d88:	2d0a      	cmp	r5, #10
 8000d8a:	dd00      	ble.n	8000d8e <__aeabi_dmul+0x1ae>
 8000d8c:	e133      	b.n	8000ff6 <__aeabi_dmul+0x416>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	40ab      	lsls	r3, r5
 8000d92:	001d      	movs	r5, r3
 8000d94:	2303      	movs	r3, #3
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	2288      	movs	r2, #136	@ 0x88
 8000d9a:	422a      	tst	r2, r5
 8000d9c:	d197      	bne.n	8000cce <__aeabi_dmul+0xee>
 8000d9e:	4642      	mov	r2, r8
 8000da0:	4643      	mov	r3, r8
 8000da2:	0412      	lsls	r2, r2, #16
 8000da4:	0c12      	lsrs	r2, r2, #16
 8000da6:	0016      	movs	r6, r2
 8000da8:	9801      	ldr	r0, [sp, #4]
 8000daa:	0c1d      	lsrs	r5, r3, #16
 8000dac:	0c03      	lsrs	r3, r0, #16
 8000dae:	0400      	lsls	r0, r0, #16
 8000db0:	0c00      	lsrs	r0, r0, #16
 8000db2:	4346      	muls	r6, r0
 8000db4:	46b4      	mov	ip, r6
 8000db6:	001e      	movs	r6, r3
 8000db8:	436e      	muls	r6, r5
 8000dba:	9600      	str	r6, [sp, #0]
 8000dbc:	0016      	movs	r6, r2
 8000dbe:	0007      	movs	r7, r0
 8000dc0:	435e      	muls	r6, r3
 8000dc2:	4661      	mov	r1, ip
 8000dc4:	46b0      	mov	r8, r6
 8000dc6:	436f      	muls	r7, r5
 8000dc8:	0c0e      	lsrs	r6, r1, #16
 8000dca:	44b8      	add	r8, r7
 8000dcc:	4446      	add	r6, r8
 8000dce:	42b7      	cmp	r7, r6
 8000dd0:	d905      	bls.n	8000dde <__aeabi_dmul+0x1fe>
 8000dd2:	2180      	movs	r1, #128	@ 0x80
 8000dd4:	0249      	lsls	r1, r1, #9
 8000dd6:	4688      	mov	r8, r1
 8000dd8:	9f00      	ldr	r7, [sp, #0]
 8000dda:	4447      	add	r7, r8
 8000ddc:	9700      	str	r7, [sp, #0]
 8000dde:	4661      	mov	r1, ip
 8000de0:	0409      	lsls	r1, r1, #16
 8000de2:	0c09      	lsrs	r1, r1, #16
 8000de4:	0c37      	lsrs	r7, r6, #16
 8000de6:	0436      	lsls	r6, r6, #16
 8000de8:	468c      	mov	ip, r1
 8000dea:	0031      	movs	r1, r6
 8000dec:	4461      	add	r1, ip
 8000dee:	9101      	str	r1, [sp, #4]
 8000df0:	0011      	movs	r1, r2
 8000df2:	0c26      	lsrs	r6, r4, #16
 8000df4:	0424      	lsls	r4, r4, #16
 8000df6:	0c24      	lsrs	r4, r4, #16
 8000df8:	4361      	muls	r1, r4
 8000dfa:	468c      	mov	ip, r1
 8000dfc:	0021      	movs	r1, r4
 8000dfe:	4369      	muls	r1, r5
 8000e00:	4689      	mov	r9, r1
 8000e02:	4661      	mov	r1, ip
 8000e04:	0c09      	lsrs	r1, r1, #16
 8000e06:	4688      	mov	r8, r1
 8000e08:	4372      	muls	r2, r6
 8000e0a:	444a      	add	r2, r9
 8000e0c:	4442      	add	r2, r8
 8000e0e:	4375      	muls	r5, r6
 8000e10:	4591      	cmp	r9, r2
 8000e12:	d903      	bls.n	8000e1c <__aeabi_dmul+0x23c>
 8000e14:	2180      	movs	r1, #128	@ 0x80
 8000e16:	0249      	lsls	r1, r1, #9
 8000e18:	4688      	mov	r8, r1
 8000e1a:	4445      	add	r5, r8
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	4688      	mov	r8, r1
 8000e20:	4661      	mov	r1, ip
 8000e22:	0409      	lsls	r1, r1, #16
 8000e24:	0c09      	lsrs	r1, r1, #16
 8000e26:	468c      	mov	ip, r1
 8000e28:	0412      	lsls	r2, r2, #16
 8000e2a:	4462      	add	r2, ip
 8000e2c:	18b9      	adds	r1, r7, r2
 8000e2e:	9102      	str	r1, [sp, #8]
 8000e30:	4651      	mov	r1, sl
 8000e32:	0c09      	lsrs	r1, r1, #16
 8000e34:	468c      	mov	ip, r1
 8000e36:	4651      	mov	r1, sl
 8000e38:	040f      	lsls	r7, r1, #16
 8000e3a:	0c3f      	lsrs	r7, r7, #16
 8000e3c:	0039      	movs	r1, r7
 8000e3e:	4341      	muls	r1, r0
 8000e40:	4445      	add	r5, r8
 8000e42:	4688      	mov	r8, r1
 8000e44:	4661      	mov	r1, ip
 8000e46:	4341      	muls	r1, r0
 8000e48:	468a      	mov	sl, r1
 8000e4a:	4641      	mov	r1, r8
 8000e4c:	4660      	mov	r0, ip
 8000e4e:	0c09      	lsrs	r1, r1, #16
 8000e50:	4689      	mov	r9, r1
 8000e52:	4358      	muls	r0, r3
 8000e54:	437b      	muls	r3, r7
 8000e56:	4453      	add	r3, sl
 8000e58:	444b      	add	r3, r9
 8000e5a:	459a      	cmp	sl, r3
 8000e5c:	d903      	bls.n	8000e66 <__aeabi_dmul+0x286>
 8000e5e:	2180      	movs	r1, #128	@ 0x80
 8000e60:	0249      	lsls	r1, r1, #9
 8000e62:	4689      	mov	r9, r1
 8000e64:	4448      	add	r0, r9
 8000e66:	0c19      	lsrs	r1, r3, #16
 8000e68:	4689      	mov	r9, r1
 8000e6a:	4641      	mov	r1, r8
 8000e6c:	0409      	lsls	r1, r1, #16
 8000e6e:	0c09      	lsrs	r1, r1, #16
 8000e70:	4688      	mov	r8, r1
 8000e72:	0039      	movs	r1, r7
 8000e74:	4361      	muls	r1, r4
 8000e76:	041b      	lsls	r3, r3, #16
 8000e78:	4443      	add	r3, r8
 8000e7a:	4688      	mov	r8, r1
 8000e7c:	4661      	mov	r1, ip
 8000e7e:	434c      	muls	r4, r1
 8000e80:	4371      	muls	r1, r6
 8000e82:	468c      	mov	ip, r1
 8000e84:	4641      	mov	r1, r8
 8000e86:	4377      	muls	r7, r6
 8000e88:	0c0e      	lsrs	r6, r1, #16
 8000e8a:	193f      	adds	r7, r7, r4
 8000e8c:	19f6      	adds	r6, r6, r7
 8000e8e:	4448      	add	r0, r9
 8000e90:	42b4      	cmp	r4, r6
 8000e92:	d903      	bls.n	8000e9c <__aeabi_dmul+0x2bc>
 8000e94:	2180      	movs	r1, #128	@ 0x80
 8000e96:	0249      	lsls	r1, r1, #9
 8000e98:	4689      	mov	r9, r1
 8000e9a:	44cc      	add	ip, r9
 8000e9c:	9902      	ldr	r1, [sp, #8]
 8000e9e:	9f00      	ldr	r7, [sp, #0]
 8000ea0:	4689      	mov	r9, r1
 8000ea2:	0431      	lsls	r1, r6, #16
 8000ea4:	444f      	add	r7, r9
 8000ea6:	4689      	mov	r9, r1
 8000ea8:	4641      	mov	r1, r8
 8000eaa:	4297      	cmp	r7, r2
 8000eac:	4192      	sbcs	r2, r2
 8000eae:	040c      	lsls	r4, r1, #16
 8000eb0:	0c24      	lsrs	r4, r4, #16
 8000eb2:	444c      	add	r4, r9
 8000eb4:	18ff      	adds	r7, r7, r3
 8000eb6:	4252      	negs	r2, r2
 8000eb8:	1964      	adds	r4, r4, r5
 8000eba:	18a1      	adds	r1, r4, r2
 8000ebc:	429f      	cmp	r7, r3
 8000ebe:	419b      	sbcs	r3, r3
 8000ec0:	4688      	mov	r8, r1
 8000ec2:	4682      	mov	sl, r0
 8000ec4:	425b      	negs	r3, r3
 8000ec6:	4699      	mov	r9, r3
 8000ec8:	4590      	cmp	r8, r2
 8000eca:	4192      	sbcs	r2, r2
 8000ecc:	42ac      	cmp	r4, r5
 8000ece:	41a4      	sbcs	r4, r4
 8000ed0:	44c2      	add	sl, r8
 8000ed2:	44d1      	add	r9, sl
 8000ed4:	4252      	negs	r2, r2
 8000ed6:	4264      	negs	r4, r4
 8000ed8:	4314      	orrs	r4, r2
 8000eda:	4599      	cmp	r9, r3
 8000edc:	419b      	sbcs	r3, r3
 8000ede:	4582      	cmp	sl, r0
 8000ee0:	4192      	sbcs	r2, r2
 8000ee2:	425b      	negs	r3, r3
 8000ee4:	4252      	negs	r2, r2
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	464a      	mov	r2, r9
 8000eea:	0c36      	lsrs	r6, r6, #16
 8000eec:	19a4      	adds	r4, r4, r6
 8000eee:	18e3      	adds	r3, r4, r3
 8000ef0:	4463      	add	r3, ip
 8000ef2:	025b      	lsls	r3, r3, #9
 8000ef4:	0dd2      	lsrs	r2, r2, #23
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	9901      	ldr	r1, [sp, #4]
 8000efa:	4692      	mov	sl, r2
 8000efc:	027a      	lsls	r2, r7, #9
 8000efe:	430a      	orrs	r2, r1
 8000f00:	1e50      	subs	r0, r2, #1
 8000f02:	4182      	sbcs	r2, r0
 8000f04:	0dff      	lsrs	r7, r7, #23
 8000f06:	4317      	orrs	r7, r2
 8000f08:	464a      	mov	r2, r9
 8000f0a:	0252      	lsls	r2, r2, #9
 8000f0c:	4317      	orrs	r7, r2
 8000f0e:	46b8      	mov	r8, r7
 8000f10:	01db      	lsls	r3, r3, #7
 8000f12:	d500      	bpl.n	8000f16 <__aeabi_dmul+0x336>
 8000f14:	e6ed      	b.n	8000cf2 <__aeabi_dmul+0x112>
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <__aeabi_dmul+0x36c>)
 8000f18:	9a03      	ldr	r2, [sp, #12]
 8000f1a:	445b      	add	r3, fp
 8000f1c:	4691      	mov	r9, r2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	dc00      	bgt.n	8000f24 <__aeabi_dmul+0x344>
 8000f22:	e0ac      	b.n	800107e <__aeabi_dmul+0x49e>
 8000f24:	003a      	movs	r2, r7
 8000f26:	0752      	lsls	r2, r2, #29
 8000f28:	d100      	bne.n	8000f2c <__aeabi_dmul+0x34c>
 8000f2a:	e710      	b.n	8000d4e <__aeabi_dmul+0x16e>
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	4658      	mov	r0, fp
 8000f30:	403a      	ands	r2, r7
 8000f32:	2a04      	cmp	r2, #4
 8000f34:	d000      	beq.n	8000f38 <__aeabi_dmul+0x358>
 8000f36:	e6f9      	b.n	8000d2c <__aeabi_dmul+0x14c>
 8000f38:	e709      	b.n	8000d4e <__aeabi_dmul+0x16e>
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	000007ff 	.word	0x000007ff
 8000f40:	fffffc01 	.word	0xfffffc01
 8000f44:	feffffff 	.word	0xfeffffff
 8000f48:	000007fe 	.word	0x000007fe
 8000f4c:	000003ff 	.word	0x000003ff
 8000f50:	0022      	movs	r2, r4
 8000f52:	4332      	orrs	r2, r6
 8000f54:	d06f      	beq.n	8001036 <__aeabi_dmul+0x456>
 8000f56:	2c00      	cmp	r4, #0
 8000f58:	d100      	bne.n	8000f5c <__aeabi_dmul+0x37c>
 8000f5a:	e0c2      	b.n	80010e2 <__aeabi_dmul+0x502>
 8000f5c:	0020      	movs	r0, r4
 8000f5e:	f000 f98f 	bl	8001280 <__clzsi2>
 8000f62:	0002      	movs	r2, r0
 8000f64:	0003      	movs	r3, r0
 8000f66:	3a0b      	subs	r2, #11
 8000f68:	201d      	movs	r0, #29
 8000f6a:	1a82      	subs	r2, r0, r2
 8000f6c:	0030      	movs	r0, r6
 8000f6e:	0019      	movs	r1, r3
 8000f70:	40d0      	lsrs	r0, r2
 8000f72:	3908      	subs	r1, #8
 8000f74:	408c      	lsls	r4, r1
 8000f76:	0002      	movs	r2, r0
 8000f78:	4322      	orrs	r2, r4
 8000f7a:	0034      	movs	r4, r6
 8000f7c:	408c      	lsls	r4, r1
 8000f7e:	4659      	mov	r1, fp
 8000f80:	1acb      	subs	r3, r1, r3
 8000f82:	4986      	ldr	r1, [pc, #536]	@ (800119c <__aeabi_dmul+0x5bc>)
 8000f84:	468b      	mov	fp, r1
 8000f86:	449b      	add	fp, r3
 8000f88:	2d0a      	cmp	r5, #10
 8000f8a:	dd00      	ble.n	8000f8e <__aeabi_dmul+0x3ae>
 8000f8c:	e6a4      	b.n	8000cd8 <__aeabi_dmul+0xf8>
 8000f8e:	4649      	mov	r1, r9
 8000f90:	9b00      	ldr	r3, [sp, #0]
 8000f92:	9401      	str	r4, [sp, #4]
 8000f94:	4059      	eors	r1, r3
 8000f96:	b2cb      	uxtb	r3, r1
 8000f98:	0014      	movs	r4, r2
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	9303      	str	r3, [sp, #12]
 8000f9e:	2d02      	cmp	r5, #2
 8000fa0:	dd00      	ble.n	8000fa4 <__aeabi_dmul+0x3c4>
 8000fa2:	e667      	b.n	8000c74 <__aeabi_dmul+0x94>
 8000fa4:	e6fb      	b.n	8000d9e <__aeabi_dmul+0x1be>
 8000fa6:	4653      	mov	r3, sl
 8000fa8:	4303      	orrs	r3, r0
 8000faa:	4698      	mov	r8, r3
 8000fac:	d03c      	beq.n	8001028 <__aeabi_dmul+0x448>
 8000fae:	4653      	mov	r3, sl
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_dmul+0x3d6>
 8000fb4:	e0a3      	b.n	80010fe <__aeabi_dmul+0x51e>
 8000fb6:	4650      	mov	r0, sl
 8000fb8:	f000 f962 	bl	8001280 <__clzsi2>
 8000fbc:	230b      	movs	r3, #11
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	469c      	mov	ip, r3
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	4484      	add	ip, r0
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	4650      	mov	r0, sl
 8000fca:	3908      	subs	r1, #8
 8000fcc:	4088      	lsls	r0, r1
 8000fce:	231d      	movs	r3, #29
 8000fd0:	4680      	mov	r8, r0
 8000fd2:	4660      	mov	r0, ip
 8000fd4:	1a1b      	subs	r3, r3, r0
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	40d8      	lsrs	r0, r3
 8000fda:	0003      	movs	r3, r0
 8000fdc:	4640      	mov	r0, r8
 8000fde:	4303      	orrs	r3, r0
 8000fe0:	469a      	mov	sl, r3
 8000fe2:	0023      	movs	r3, r4
 8000fe4:	408b      	lsls	r3, r1
 8000fe6:	4698      	mov	r8, r3
 8000fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800119c <__aeabi_dmul+0x5bc>)
 8000fea:	2500      	movs	r5, #0
 8000fec:	1a9b      	subs	r3, r3, r2
 8000fee:	469b      	mov	fp, r3
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	e61a      	b.n	8000c2c <__aeabi_dmul+0x4c>
 8000ff6:	2d0f      	cmp	r5, #15
 8000ff8:	d000      	beq.n	8000ffc <__aeabi_dmul+0x41c>
 8000ffa:	e0c9      	b.n	8001190 <__aeabi_dmul+0x5b0>
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	4652      	mov	r2, sl
 8001000:	031b      	lsls	r3, r3, #12
 8001002:	421a      	tst	r2, r3
 8001004:	d002      	beq.n	800100c <__aeabi_dmul+0x42c>
 8001006:	421c      	tst	r4, r3
 8001008:	d100      	bne.n	800100c <__aeabi_dmul+0x42c>
 800100a:	e092      	b.n	8001132 <__aeabi_dmul+0x552>
 800100c:	2480      	movs	r4, #128	@ 0x80
 800100e:	4653      	mov	r3, sl
 8001010:	0324      	lsls	r4, r4, #12
 8001012:	431c      	orrs	r4, r3
 8001014:	0324      	lsls	r4, r4, #12
 8001016:	4642      	mov	r2, r8
 8001018:	0b24      	lsrs	r4, r4, #12
 800101a:	e63e      	b.n	8000c9a <__aeabi_dmul+0xba>
 800101c:	469b      	mov	fp, r3
 800101e:	2303      	movs	r3, #3
 8001020:	4680      	mov	r8, r0
 8001022:	250c      	movs	r5, #12
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	e601      	b.n	8000c2c <__aeabi_dmul+0x4c>
 8001028:	2300      	movs	r3, #0
 800102a:	469a      	mov	sl, r3
 800102c:	469b      	mov	fp, r3
 800102e:	3301      	adds	r3, #1
 8001030:	2504      	movs	r5, #4
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	e5fa      	b.n	8000c2c <__aeabi_dmul+0x4c>
 8001036:	2101      	movs	r1, #1
 8001038:	430d      	orrs	r5, r1
 800103a:	2d0a      	cmp	r5, #10
 800103c:	dd00      	ble.n	8001040 <__aeabi_dmul+0x460>
 800103e:	e64b      	b.n	8000cd8 <__aeabi_dmul+0xf8>
 8001040:	4649      	mov	r1, r9
 8001042:	9800      	ldr	r0, [sp, #0]
 8001044:	4041      	eors	r1, r0
 8001046:	b2c9      	uxtb	r1, r1
 8001048:	9103      	str	r1, [sp, #12]
 800104a:	2d02      	cmp	r5, #2
 800104c:	dc00      	bgt.n	8001050 <__aeabi_dmul+0x470>
 800104e:	e096      	b.n	800117e <__aeabi_dmul+0x59e>
 8001050:	2300      	movs	r3, #0
 8001052:	2400      	movs	r4, #0
 8001054:	2001      	movs	r0, #1
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	e60c      	b.n	8000c74 <__aeabi_dmul+0x94>
 800105a:	4649      	mov	r1, r9
 800105c:	2302      	movs	r3, #2
 800105e:	9a00      	ldr	r2, [sp, #0]
 8001060:	432b      	orrs	r3, r5
 8001062:	4051      	eors	r1, r2
 8001064:	b2ca      	uxtb	r2, r1
 8001066:	9203      	str	r2, [sp, #12]
 8001068:	2b0a      	cmp	r3, #10
 800106a:	dd00      	ble.n	800106e <__aeabi_dmul+0x48e>
 800106c:	e634      	b.n	8000cd8 <__aeabi_dmul+0xf8>
 800106e:	2d00      	cmp	r5, #0
 8001070:	d157      	bne.n	8001122 <__aeabi_dmul+0x542>
 8001072:	9b03      	ldr	r3, [sp, #12]
 8001074:	4699      	mov	r9, r3
 8001076:	2400      	movs	r4, #0
 8001078:	2200      	movs	r2, #0
 800107a:	4b49      	ldr	r3, [pc, #292]	@ (80011a0 <__aeabi_dmul+0x5c0>)
 800107c:	e60e      	b.n	8000c9c <__aeabi_dmul+0xbc>
 800107e:	4658      	mov	r0, fp
 8001080:	2101      	movs	r1, #1
 8001082:	1ac9      	subs	r1, r1, r3
 8001084:	2938      	cmp	r1, #56	@ 0x38
 8001086:	dd00      	ble.n	800108a <__aeabi_dmul+0x4aa>
 8001088:	e62f      	b.n	8000cea <__aeabi_dmul+0x10a>
 800108a:	291f      	cmp	r1, #31
 800108c:	dd56      	ble.n	800113c <__aeabi_dmul+0x55c>
 800108e:	221f      	movs	r2, #31
 8001090:	4654      	mov	r4, sl
 8001092:	4252      	negs	r2, r2
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	40dc      	lsrs	r4, r3
 8001098:	2920      	cmp	r1, #32
 800109a:	d007      	beq.n	80010ac <__aeabi_dmul+0x4cc>
 800109c:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <__aeabi_dmul+0x5c4>)
 800109e:	4642      	mov	r2, r8
 80010a0:	469c      	mov	ip, r3
 80010a2:	4653      	mov	r3, sl
 80010a4:	4460      	add	r0, ip
 80010a6:	4083      	lsls	r3, r0
 80010a8:	431a      	orrs	r2, r3
 80010aa:	4690      	mov	r8, r2
 80010ac:	4642      	mov	r2, r8
 80010ae:	2107      	movs	r1, #7
 80010b0:	1e53      	subs	r3, r2, #1
 80010b2:	419a      	sbcs	r2, r3
 80010b4:	000b      	movs	r3, r1
 80010b6:	4322      	orrs	r2, r4
 80010b8:	4013      	ands	r3, r2
 80010ba:	2400      	movs	r4, #0
 80010bc:	4211      	tst	r1, r2
 80010be:	d009      	beq.n	80010d4 <__aeabi_dmul+0x4f4>
 80010c0:	230f      	movs	r3, #15
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d05d      	beq.n	8001184 <__aeabi_dmul+0x5a4>
 80010c8:	1d11      	adds	r1, r2, #4
 80010ca:	4291      	cmp	r1, r2
 80010cc:	419b      	sbcs	r3, r3
 80010ce:	000a      	movs	r2, r1
 80010d0:	425b      	negs	r3, r3
 80010d2:	075b      	lsls	r3, r3, #29
 80010d4:	08d2      	lsrs	r2, r2, #3
 80010d6:	431a      	orrs	r2, r3
 80010d8:	2300      	movs	r3, #0
 80010da:	e5df      	b.n	8000c9c <__aeabi_dmul+0xbc>
 80010dc:	9b03      	ldr	r3, [sp, #12]
 80010de:	4699      	mov	r9, r3
 80010e0:	e5fa      	b.n	8000cd8 <__aeabi_dmul+0xf8>
 80010e2:	9801      	ldr	r0, [sp, #4]
 80010e4:	f000 f8cc 	bl	8001280 <__clzsi2>
 80010e8:	0002      	movs	r2, r0
 80010ea:	0003      	movs	r3, r0
 80010ec:	3215      	adds	r2, #21
 80010ee:	3320      	adds	r3, #32
 80010f0:	2a1c      	cmp	r2, #28
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dmul+0x516>
 80010f4:	e738      	b.n	8000f68 <__aeabi_dmul+0x388>
 80010f6:	9a01      	ldr	r2, [sp, #4]
 80010f8:	3808      	subs	r0, #8
 80010fa:	4082      	lsls	r2, r0
 80010fc:	e73f      	b.n	8000f7e <__aeabi_dmul+0x39e>
 80010fe:	f000 f8bf 	bl	8001280 <__clzsi2>
 8001102:	2315      	movs	r3, #21
 8001104:	469c      	mov	ip, r3
 8001106:	4484      	add	ip, r0
 8001108:	0002      	movs	r2, r0
 800110a:	4663      	mov	r3, ip
 800110c:	3220      	adds	r2, #32
 800110e:	2b1c      	cmp	r3, #28
 8001110:	dc00      	bgt.n	8001114 <__aeabi_dmul+0x534>
 8001112:	e758      	b.n	8000fc6 <__aeabi_dmul+0x3e6>
 8001114:	2300      	movs	r3, #0
 8001116:	4698      	mov	r8, r3
 8001118:	0023      	movs	r3, r4
 800111a:	3808      	subs	r0, #8
 800111c:	4083      	lsls	r3, r0
 800111e:	469a      	mov	sl, r3
 8001120:	e762      	b.n	8000fe8 <__aeabi_dmul+0x408>
 8001122:	001d      	movs	r5, r3
 8001124:	2300      	movs	r3, #0
 8001126:	2400      	movs	r4, #0
 8001128:	2002      	movs	r0, #2
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	e5a2      	b.n	8000c74 <__aeabi_dmul+0x94>
 800112e:	9002      	str	r0, [sp, #8]
 8001130:	e632      	b.n	8000d98 <__aeabi_dmul+0x1b8>
 8001132:	431c      	orrs	r4, r3
 8001134:	9b00      	ldr	r3, [sp, #0]
 8001136:	9a01      	ldr	r2, [sp, #4]
 8001138:	4699      	mov	r9, r3
 800113a:	e5ae      	b.n	8000c9a <__aeabi_dmul+0xba>
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <__aeabi_dmul+0x5c8>)
 800113e:	4652      	mov	r2, sl
 8001140:	18c3      	adds	r3, r0, r3
 8001142:	4640      	mov	r0, r8
 8001144:	409a      	lsls	r2, r3
 8001146:	40c8      	lsrs	r0, r1
 8001148:	4302      	orrs	r2, r0
 800114a:	4640      	mov	r0, r8
 800114c:	4098      	lsls	r0, r3
 800114e:	0003      	movs	r3, r0
 8001150:	1e58      	subs	r0, r3, #1
 8001152:	4183      	sbcs	r3, r0
 8001154:	4654      	mov	r4, sl
 8001156:	431a      	orrs	r2, r3
 8001158:	40cc      	lsrs	r4, r1
 800115a:	0753      	lsls	r3, r2, #29
 800115c:	d009      	beq.n	8001172 <__aeabi_dmul+0x592>
 800115e:	230f      	movs	r3, #15
 8001160:	4013      	ands	r3, r2
 8001162:	2b04      	cmp	r3, #4
 8001164:	d005      	beq.n	8001172 <__aeabi_dmul+0x592>
 8001166:	1d13      	adds	r3, r2, #4
 8001168:	4293      	cmp	r3, r2
 800116a:	4192      	sbcs	r2, r2
 800116c:	4252      	negs	r2, r2
 800116e:	18a4      	adds	r4, r4, r2
 8001170:	001a      	movs	r2, r3
 8001172:	0223      	lsls	r3, r4, #8
 8001174:	d508      	bpl.n	8001188 <__aeabi_dmul+0x5a8>
 8001176:	2301      	movs	r3, #1
 8001178:	2400      	movs	r4, #0
 800117a:	2200      	movs	r2, #0
 800117c:	e58e      	b.n	8000c9c <__aeabi_dmul+0xbc>
 800117e:	4689      	mov	r9, r1
 8001180:	2400      	movs	r4, #0
 8001182:	e58b      	b.n	8000c9c <__aeabi_dmul+0xbc>
 8001184:	2300      	movs	r3, #0
 8001186:	e7a5      	b.n	80010d4 <__aeabi_dmul+0x4f4>
 8001188:	0763      	lsls	r3, r4, #29
 800118a:	0264      	lsls	r4, r4, #9
 800118c:	0b24      	lsrs	r4, r4, #12
 800118e:	e7a1      	b.n	80010d4 <__aeabi_dmul+0x4f4>
 8001190:	9b00      	ldr	r3, [sp, #0]
 8001192:	46a2      	mov	sl, r4
 8001194:	4699      	mov	r9, r3
 8001196:	9b01      	ldr	r3, [sp, #4]
 8001198:	4698      	mov	r8, r3
 800119a:	e737      	b.n	800100c <__aeabi_dmul+0x42c>
 800119c:	fffffc0d 	.word	0xfffffc0d
 80011a0:	000007ff 	.word	0x000007ff
 80011a4:	0000043e 	.word	0x0000043e
 80011a8:	0000041e 	.word	0x0000041e

080011ac <__aeabi_d2iz>:
 80011ac:	000b      	movs	r3, r1
 80011ae:	0002      	movs	r2, r0
 80011b0:	b570      	push	{r4, r5, r6, lr}
 80011b2:	4d16      	ldr	r5, [pc, #88]	@ (800120c <__aeabi_d2iz+0x60>)
 80011b4:	030c      	lsls	r4, r1, #12
 80011b6:	b082      	sub	sp, #8
 80011b8:	0049      	lsls	r1, r1, #1
 80011ba:	2000      	movs	r0, #0
 80011bc:	9200      	str	r2, [sp, #0]
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	0b24      	lsrs	r4, r4, #12
 80011c2:	0d49      	lsrs	r1, r1, #21
 80011c4:	0fde      	lsrs	r6, r3, #31
 80011c6:	42a9      	cmp	r1, r5
 80011c8:	dd04      	ble.n	80011d4 <__aeabi_d2iz+0x28>
 80011ca:	4811      	ldr	r0, [pc, #68]	@ (8001210 <__aeabi_d2iz+0x64>)
 80011cc:	4281      	cmp	r1, r0
 80011ce:	dd03      	ble.n	80011d8 <__aeabi_d2iz+0x2c>
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <__aeabi_d2iz+0x68>)
 80011d2:	18f0      	adds	r0, r6, r3
 80011d4:	b002      	add	sp, #8
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
 80011d8:	2080      	movs	r0, #128	@ 0x80
 80011da:	0340      	lsls	r0, r0, #13
 80011dc:	4320      	orrs	r0, r4
 80011de:	4c0e      	ldr	r4, [pc, #56]	@ (8001218 <__aeabi_d2iz+0x6c>)
 80011e0:	1a64      	subs	r4, r4, r1
 80011e2:	2c1f      	cmp	r4, #31
 80011e4:	dd08      	ble.n	80011f8 <__aeabi_d2iz+0x4c>
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <__aeabi_d2iz+0x70>)
 80011e8:	1a5b      	subs	r3, r3, r1
 80011ea:	40d8      	lsrs	r0, r3
 80011ec:	0003      	movs	r3, r0
 80011ee:	4258      	negs	r0, r3
 80011f0:	2e00      	cmp	r6, #0
 80011f2:	d1ef      	bne.n	80011d4 <__aeabi_d2iz+0x28>
 80011f4:	0018      	movs	r0, r3
 80011f6:	e7ed      	b.n	80011d4 <__aeabi_d2iz+0x28>
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <__aeabi_d2iz+0x74>)
 80011fa:	9a00      	ldr	r2, [sp, #0]
 80011fc:	469c      	mov	ip, r3
 80011fe:	0003      	movs	r3, r0
 8001200:	4461      	add	r1, ip
 8001202:	408b      	lsls	r3, r1
 8001204:	40e2      	lsrs	r2, r4
 8001206:	4313      	orrs	r3, r2
 8001208:	e7f1      	b.n	80011ee <__aeabi_d2iz+0x42>
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	000003fe 	.word	0x000003fe
 8001210:	0000041d 	.word	0x0000041d
 8001214:	7fffffff 	.word	0x7fffffff
 8001218:	00000433 	.word	0x00000433
 800121c:	00000413 	.word	0x00000413
 8001220:	fffffbed 	.word	0xfffffbed

08001224 <__aeabi_i2d>:
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	2800      	cmp	r0, #0
 8001228:	d016      	beq.n	8001258 <__aeabi_i2d+0x34>
 800122a:	17c3      	asrs	r3, r0, #31
 800122c:	18c5      	adds	r5, r0, r3
 800122e:	405d      	eors	r5, r3
 8001230:	0fc4      	lsrs	r4, r0, #31
 8001232:	0028      	movs	r0, r5
 8001234:	f000 f824 	bl	8001280 <__clzsi2>
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <__aeabi_i2d+0x58>)
 800123a:	1a1b      	subs	r3, r3, r0
 800123c:	055b      	lsls	r3, r3, #21
 800123e:	0d5b      	lsrs	r3, r3, #21
 8001240:	280a      	cmp	r0, #10
 8001242:	dc14      	bgt.n	800126e <__aeabi_i2d+0x4a>
 8001244:	0002      	movs	r2, r0
 8001246:	002e      	movs	r6, r5
 8001248:	3215      	adds	r2, #21
 800124a:	4096      	lsls	r6, r2
 800124c:	220b      	movs	r2, #11
 800124e:	1a12      	subs	r2, r2, r0
 8001250:	40d5      	lsrs	r5, r2
 8001252:	032d      	lsls	r5, r5, #12
 8001254:	0b2d      	lsrs	r5, r5, #12
 8001256:	e003      	b.n	8001260 <__aeabi_i2d+0x3c>
 8001258:	2400      	movs	r4, #0
 800125a:	2300      	movs	r3, #0
 800125c:	2500      	movs	r5, #0
 800125e:	2600      	movs	r6, #0
 8001260:	051b      	lsls	r3, r3, #20
 8001262:	432b      	orrs	r3, r5
 8001264:	07e4      	lsls	r4, r4, #31
 8001266:	4323      	orrs	r3, r4
 8001268:	0030      	movs	r0, r6
 800126a:	0019      	movs	r1, r3
 800126c:	bd70      	pop	{r4, r5, r6, pc}
 800126e:	380b      	subs	r0, #11
 8001270:	4085      	lsls	r5, r0
 8001272:	032d      	lsls	r5, r5, #12
 8001274:	2600      	movs	r6, #0
 8001276:	0b2d      	lsrs	r5, r5, #12
 8001278:	e7f2      	b.n	8001260 <__aeabi_i2d+0x3c>
 800127a:	46c0      	nop			@ (mov r8, r8)
 800127c:	0000041e 	.word	0x0000041e

08001280 <__clzsi2>:
 8001280:	211c      	movs	r1, #28
 8001282:	2301      	movs	r3, #1
 8001284:	041b      	lsls	r3, r3, #16
 8001286:	4298      	cmp	r0, r3
 8001288:	d301      	bcc.n	800128e <__clzsi2+0xe>
 800128a:	0c00      	lsrs	r0, r0, #16
 800128c:	3910      	subs	r1, #16
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	4298      	cmp	r0, r3
 8001292:	d301      	bcc.n	8001298 <__clzsi2+0x18>
 8001294:	0a00      	lsrs	r0, r0, #8
 8001296:	3908      	subs	r1, #8
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	4298      	cmp	r0, r3
 800129c:	d301      	bcc.n	80012a2 <__clzsi2+0x22>
 800129e:	0900      	lsrs	r0, r0, #4
 80012a0:	3904      	subs	r1, #4
 80012a2:	a202      	add	r2, pc, #8	@ (adr r2, 80012ac <__clzsi2+0x2c>)
 80012a4:	5c10      	ldrb	r0, [r2, r0]
 80012a6:	1840      	adds	r0, r0, r1
 80012a8:	4770      	bx	lr
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	02020304 	.word	0x02020304
 80012b0:	01010101 	.word	0x01010101
	...

080012bc <__clzdi2>:
 80012bc:	b510      	push	{r4, lr}
 80012be:	2900      	cmp	r1, #0
 80012c0:	d103      	bne.n	80012ca <__clzdi2+0xe>
 80012c2:	f7ff ffdd 	bl	8001280 <__clzsi2>
 80012c6:	3020      	adds	r0, #32
 80012c8:	e002      	b.n	80012d0 <__clzdi2+0x14>
 80012ca:	0008      	movs	r0, r1
 80012cc:	f7ff ffd8 	bl	8001280 <__clzsi2>
 80012d0:	bd10      	pop	{r4, pc}
 80012d2:	46c0      	nop			@ (mov r8, r8)

080012d4 <Send_Trame>:

#include "Driver_USART_HAL.h"
#include "LOW_POWER_PMOS.h"

void Send_Trame (uint8_t NumCapteur, uint8_t TypeDonnee, uint16_t Info, UART_HandleTypeDef* huart){
 80012d4:	b5b0      	push	{r4, r5, r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	0004      	movs	r4, r0
 80012dc:	0008      	movs	r0, r1
 80012de:	0011      	movs	r1, r2
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	1c22      	adds	r2, r4, #0
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	1dbb      	adds	r3, r7, #6
 80012ea:	1c02      	adds	r2, r0, #0
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	1c0a      	adds	r2, r1, #0
 80012f2:	801a      	strh	r2, [r3, #0]
	//Définition du delai utilisé pour le transmit
	uint32_t delai = 50;
 80012f4:	2332      	movs	r3, #50	@ 0x32
 80012f6:	60fb      	str	r3, [r7, #12]

	//Concatenation de NumCapteur et TypeDonnee dans un seul octet
	uint8_t Octet_NumEtType = (NumCapteur & 0x0F) << 4 | (TypeDonnee & 0x0F);
 80012f8:	1dfb      	adds	r3, r7, #7
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	b25a      	sxtb	r2, r3
 8001302:	1dbb      	adds	r3, r7, #6
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b25b      	sxtb	r3, r3
 8001308:	210f      	movs	r1, #15
 800130a:	400b      	ands	r3, r1
 800130c:	b25b      	sxtb	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b25b      	sxtb	r3, r3
 8001312:	b2da      	uxtb	r2, r3
 8001314:	210b      	movs	r1, #11
 8001316:	187b      	adds	r3, r7, r1
 8001318:	701a      	strb	r2, [r3, #0]

	//On split les données contenues dans Info (16bits) dans deux octets distincts
	//On décale vers la droite les 8 premiers bits de Info, puis on les récupère avec un masque ET
	uint8_t Octet_Info_Split_1 = (Info >> 8) & 0xFF;
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	b29b      	uxth	r3, r3
 8001322:	b2da      	uxtb	r2, r3
 8001324:	240a      	movs	r4, #10
 8001326:	193b      	adds	r3, r7, r4
 8001328:	701a      	strb	r2, [r3, #0]
	uint8_t Octet_Info_Split_2 = Info & 0xFF;
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	2509      	movs	r5, #9
 8001332:	197b      	adds	r3, r7, r5
 8001334:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(huart, &Octet_NumEtType, sizeof(Octet_NumEtType), delai);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	1879      	adds	r1, r7, r1
 800133a:	6838      	ldr	r0, [r7, #0]
 800133c:	2201      	movs	r2, #1
 800133e:	f002 fd45 	bl	8003dcc <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, &Octet_Info_Split_1, sizeof(Octet_Info_Split_1), delai);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1939      	adds	r1, r7, r4
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	2201      	movs	r2, #1
 800134a:	f002 fd3f 	bl	8003dcc <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, &Octet_Info_Split_2, sizeof(Octet_Info_Split_2), delai);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1979      	adds	r1, r7, r5
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	2201      	movs	r2, #1
 8001356:	f002 fd39 	bl	8003dcc <HAL_UART_Transmit>

}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b004      	add	sp, #16
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001364 <getValue>:

int getValue(ADC_HandleTypeDef* hadc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	SENSOR_ON();
 800136c:	23a0      	movs	r3, #160	@ 0xa0
 800136e:	05db      	lsls	r3, r3, #23
 8001370:	2200      	movs	r2, #0
 8001372:	2104      	movs	r1, #4
 8001374:	0018      	movs	r0, r3
 8001376:	f001 faff 	bl	8002978 <HAL_GPIO_WritePin>
	HAL_ADC_Start(hadc);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	0018      	movs	r0, r3
 800137e:	f000 fe1d 	bl	8001fbc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 100);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2164      	movs	r1, #100	@ 0x64
 8001386:	0018      	movs	r0, r3
 8001388:	f000 fe6c 	bl	8002064 <HAL_ADC_PollForConversion>
	int sensorValue = HAL_ADC_GetValue(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	0018      	movs	r0, r3
 8001390:	f000 ff04 	bl	800219c <HAL_ADC_GetValue>
 8001394:	0003      	movs	r3, r0
 8001396:	60fb      	str	r3, [r7, #12]
	SENSOR_OFF();
 8001398:	23a0      	movs	r3, #160	@ 0xa0
 800139a:	05db      	lsls	r3, r3, #23
 800139c:	2201      	movs	r2, #1
 800139e:	2104      	movs	r1, #4
 80013a0:	0018      	movs	r0, r3
 80013a2:	f001 fae9 	bl	8002978 <HAL_GPIO_WritePin>

	if (sensorValue < 2375)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4a13      	ldr	r2, [pc, #76]	@ (80013f8 <getValue+0x94>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	dc02      	bgt.n	80013b4 <getValue+0x50>
	{
		sensorValue *= const1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e01a      	b.n	80013ea <getValue+0x86>
	}
	else {
		sensorValue = 0.6 + (sensorValue-2375)*const2;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <getValue+0x98>)
 80013b8:	4694      	mov	ip, r2
 80013ba:	4463      	add	r3, ip
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff ff31 	bl	8001224 <__aeabi_i2d>
 80013c2:	2200      	movs	r2, #0
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <getValue+0x9c>)
 80013c6:	f7ff fc0b 	bl	8000be0 <__aeabi_dmul>
 80013ca:	0002      	movs	r2, r0
 80013cc:	000b      	movs	r3, r1
 80013ce:	0010      	movs	r0, r2
 80013d0:	0019      	movs	r1, r3
 80013d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001404 <getValue+0xa0>)
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <getValue+0xa4>)
 80013d6:	f7ff f83d 	bl	8000454 <__aeabi_dadd>
 80013da:	0002      	movs	r2, r0
 80013dc:	000b      	movs	r3, r1
 80013de:	0010      	movs	r0, r2
 80013e0:	0019      	movs	r1, r3
 80013e2:	f7ff fee3 	bl	80011ac <__aeabi_d2iz>
 80013e6:	0003      	movs	r3, r0
 80013e8:	60fb      	str	r3, [r7, #12]
	}

	return 100 * sensorValue;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2264      	movs	r2, #100	@ 0x64
 80013ee:	4353      	muls	r3, r2
}
 80013f0:	0018      	movs	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b004      	add	sp, #16
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	00000946 	.word	0x00000946
 80013fc:	fffff6b9 	.word	0xfffff6b9
 8001400:	40858000 	.word	0x40858000
 8001404:	33333333 	.word	0x33333333
 8001408:	3fe33333 	.word	0x3fe33333

0800140c <isAck>:


int isAck(uint8_t NumCapteur, uint8_t TypeDonnee, uint8_t OctetRecu) {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	0004      	movs	r4, r0
 8001414:	0008      	movs	r0, r1
 8001416:	0011      	movs	r1, r2
 8001418:	1dfb      	adds	r3, r7, #7
 800141a:	1c22      	adds	r2, r4, #0
 800141c:	701a      	strb	r2, [r3, #0]
 800141e:	1dbb      	adds	r3, r7, #6
 8001420:	1c02      	adds	r2, r0, #0
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	1d7b      	adds	r3, r7, #5
 8001426:	1c0a      	adds	r2, r1, #0
 8001428:	701a      	strb	r2, [r3, #0]
    return ((OctetRecu >> 4) == NumCapteur) && (((OctetRecu >> 1) & 0x7) == TypeDonnee) && ((OctetRecu & 1) == 1);
 800142a:	1d7b      	adds	r3, r7, #5
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	b2db      	uxtb	r3, r3
 8001432:	1dfa      	adds	r2, r7, #7
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d111      	bne.n	800145e <isAck+0x52>
 800143a:	1d7b      	adds	r3, r7, #5
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	001a      	movs	r2, r3
 8001444:	2307      	movs	r3, #7
 8001446:	401a      	ands	r2, r3
 8001448:	1dbb      	adds	r3, r7, #6
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d106      	bne.n	800145e <isAck+0x52>
 8001450:	1d7b      	adds	r3, r7, #5
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2201      	movs	r2, #1
 8001456:	4013      	ands	r3, r2
 8001458:	d001      	beq.n	800145e <isAck+0x52>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <isAck+0x54>
 800145e:	2300      	movs	r3, #0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b003      	add	sp, #12
 8001466:	bd90      	pop	{r4, r7, pc}

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f000 fb9e 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 f8aa 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f000 f9f8 	bl	8001868 <MX_GPIO_Init>
  MX_ADC_Init();
 8001478:	f000 f92a 	bl	80016d0 <MX_ADC_Init>
  MX_USART2_UART_Init();
 800147c:	f000 f9b8 	bl	80017f0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001480:	f000 f98c 	bl	800179c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  /* ### Indicator light : STM32 is ON ### */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001484:	23a0      	movs	r3, #160	@ 0xa0
 8001486:	05db      	lsls	r3, r3, #23
 8001488:	2201      	movs	r2, #1
 800148a:	2102      	movs	r1, #2
 800148c:	0018      	movs	r0, r3
 800148e:	f001 fa73 	bl	8002978 <HAL_GPIO_WritePin>

  /* ### Wake up from STAND-BY mode ### */
  /* STEP 1 : Check if the stand by (SBF - Stand By Flag) mode is set => Test if the STM is waking up from SB mode */
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8001492:	4b44      	ldr	r3, [pc, #272]	@ (80015a4 <main+0x13c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	2b02      	cmp	r3, #2
 800149c:	d157      	bne.n	800154e <main+0xe6>
  {
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); //Clear SBF
 800149e:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <main+0x13c>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b40      	ldr	r3, [pc, #256]	@ (80015a4 <main+0x13c>)
 80014a4:	2108      	movs	r1, #8
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]

    /* STEP 2 : Detect wake up source (Wake-up pin or RTC Alarm) */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF)) {
 80014aa:	4b3f      	ldr	r3, [pc, #252]	@ (80015a8 <main+0x140>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	2380      	movs	r3, #128	@ 0x80
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4013      	ands	r3, r2
 80014b6:	d00b      	beq.n	80014d0 <main+0x68>
      // Wake up from RTC Alarm
      Send_Trame(NUM_CAPTEUR, DATA_HUM, getValue(&hadc), &huart2);
 80014b8:	4b3c      	ldr	r3, [pc, #240]	@ (80015ac <main+0x144>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f7ff ff52 	bl	8001364 <getValue>
 80014c0:	0003      	movs	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b3a      	ldr	r3, [pc, #232]	@ (80015b0 <main+0x148>)
 80014c6:	2102      	movs	r1, #2
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff ff03 	bl	80012d4 <Send_Trame>
 80014ce:	e035      	b.n	800153c <main+0xd4>
    }
    else {
      // Wake up from Reset Pin
      Send_Trame(NUM_CAPTEUR, DATA_SWITCH, 0, &huart2);
 80014d0:	4b37      	ldr	r3, [pc, #220]	@ (80015b0 <main+0x148>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	2101      	movs	r1, #1
 80014d6:	2001      	movs	r0, #1
 80014d8:	f7ff fefc 	bl	80012d4 <Send_Trame>
      HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80014dc:	4935      	ldr	r1, [pc, #212]	@ (80015b4 <main+0x14c>)
 80014de:	4b34      	ldr	r3, [pc, #208]	@ (80015b0 <main+0x148>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	0018      	movs	r0, r3
 80014e4:	f002 fd12 	bl	8003f0c <HAL_UART_Receive_IT>
      HAL_Delay(10000);
 80014e8:	4b33      	ldr	r3, [pc, #204]	@ (80015b8 <main+0x150>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 fbce 	bl	8001c8c <HAL_Delay>

      if (isRec && isAck(NUM_CAPTEUR, DATA_SWITCH, rx_data))
 80014f0:	4b32      	ldr	r3, [pc, #200]	@ (80015bc <main+0x154>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d021      	beq.n	800153c <main+0xd4>
 80014f8:	4b2e      	ldr	r3, [pc, #184]	@ (80015b4 <main+0x14c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	001a      	movs	r2, r3
 80014fe:	2101      	movs	r1, #1
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff ff83 	bl	800140c <isAck>
 8001506:	1e03      	subs	r3, r0, #0
 8001508:	d018      	beq.n	800153c <main+0xd4>
      {
    	  LED_ON();
 800150a:	23a0      	movs	r3, #160	@ 0xa0
 800150c:	05db      	lsls	r3, r3, #23
 800150e:	2200      	movs	r2, #0
 8001510:	2102      	movs	r1, #2
 8001512:	0018      	movs	r0, r3
 8001514:	f001 fa30 	bl	8002978 <HAL_GPIO_WritePin>
          Send_Trame(3, DATA_SWITCH, 0, &huart2);
 8001518:	4b25      	ldr	r3, [pc, #148]	@ (80015b0 <main+0x148>)
 800151a:	2200      	movs	r2, #0
 800151c:	2101      	movs	r1, #1
 800151e:	2003      	movs	r0, #3
 8001520:	f7ff fed8 	bl	80012d4 <Send_Trame>
    	  HAL_Delay(1000);
 8001524:	23fa      	movs	r3, #250	@ 0xfa
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	0018      	movs	r0, r3
 800152a:	f000 fbaf 	bl	8001c8c <HAL_Delay>
    	  LED_OFF();
 800152e:	23a0      	movs	r3, #160	@ 0xa0
 8001530:	05db      	lsls	r3, r3, #23
 8001532:	2201      	movs	r2, #1
 8001534:	2102      	movs	r1, #2
 8001536:	0018      	movs	r0, r3
 8001538:	f001 fa1e 	bl	8002978 <HAL_GPIO_WritePin>
//      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
//      HAL_Delay(500);
//    }

    /* STEP 4 : Disable the wake up pin (A0) */
    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	0018      	movs	r0, r3
 8001542:	f001 fa55 	bl	80029f0 <HAL_PWR_DisableWakeUpPin>

    /* STEP 5 : Disable RTC Wake Up */
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <main+0x140>)
 8001548:	0018      	movs	r0, r3
 800154a:	f002 fb4f 	bl	8003bec <HAL_RTCEx_DeactivateWakeUpTimer>
  }

  XBEE_OFF();
 800154e:	23a0      	movs	r3, #160	@ 0xa0
 8001550:	05db      	lsls	r3, r3, #23
 8001552:	2201      	movs	r2, #1
 8001554:	2108      	movs	r1, #8
 8001556:	0018      	movs	r0, r3
 8001558:	f001 fa0e 	bl	8002978 <HAL_GPIO_WritePin>
//  HAL_Delay(3000);
  /* ### End program ### */

  /* ### Enter STAND-BY mode ### */
  /* STEP 1 : Clear the Wake-Up (WU) flag and RTC Wake-Up Timer (WUTF) flag*/
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); //Clear Wake Up Flag
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <main+0x13c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <main+0x13c>)
 8001562:	2104      	movs	r1, #4
 8001564:	430a      	orrs	r2, r1
 8001566:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF); //Clear RTC Wake Up Flag
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <main+0x140>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	22ff      	movs	r2, #255	@ 0xff
 8001570:	401a      	ands	r2, r3
 8001572:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <main+0x140>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4912      	ldr	r1, [pc, #72]	@ (80015c0 <main+0x158>)
 8001578:	430a      	orrs	r2, r1
 800157a:	60da      	str	r2, [r3, #12]
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
//  HAL_Delay(2000);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

  /* STEP 3 : Enable the Wake-Up (WU) pin */
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	0018      	movs	r0, r3
 8001582:	f001 fa25 	bl	80029d0 <HAL_PWR_EnableWakeUpPin>
   * To configure the wake up timer to 5s the WakeUpCounter is set to 0x2710
   * RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
   * Wake-up time base = 16 /(32kHz) = 0.0005 seconds
   * ==> WakeUpCounter = ~5s/0.0005s = 20000 = 0x2710
   */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x9C40, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001586:	490f      	ldr	r1, [pc, #60]	@ (80015c4 <main+0x15c>)
 8001588:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <main+0x140>)
 800158a:	2200      	movs	r2, #0
 800158c:	0018      	movs	r0, r3
 800158e:	f002 fa55 	bl	8003a3c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001592:	1e03      	subs	r3, r0, #0
 8001594:	d001      	beq.n	800159a <main+0x132>
  {
   Error_Handler();
 8001596:	f000 f9e5 	bl	8001964 <Error_Handler>
  }

  /* STEP 5 : Enter Stand-by mode */
  HAL_PWR_EnterSTANDBYMode();
 800159a:	f001 fa3b 	bl	8002a14 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	e7fd      	b.n	800159e <main+0x136>
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	40007000 	.word	0x40007000
 80015a8:	20000084 	.word	0x20000084
 80015ac:	20000028 	.word	0x20000028
 80015b0:	200000a8 	.word	0x200000a8
 80015b4:	20000130 	.word	0x20000130
 80015b8:	00002710 	.word	0x00002710
 80015bc:	20000131 	.word	0x20000131
 80015c0:	fffffb7f 	.word	0xfffffb7f
 80015c4:	00009c40 	.word	0x00009c40

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b099      	sub	sp, #100	@ 0x64
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	242c      	movs	r4, #44	@ 0x2c
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	0018      	movs	r0, r3
 80015d4:	2334      	movs	r3, #52	@ 0x34
 80015d6:	001a      	movs	r2, r3
 80015d8:	2100      	movs	r1, #0
 80015da:	f003 ff3f 	bl	800545c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015de:	2318      	movs	r3, #24
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	0018      	movs	r0, r3
 80015e4:	2314      	movs	r3, #20
 80015e6:	001a      	movs	r2, r3
 80015e8:	2100      	movs	r1, #0
 80015ea:	f003 ff37 	bl	800545c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ee:	003b      	movs	r3, r7
 80015f0:	0018      	movs	r0, r3
 80015f2:	2318      	movs	r3, #24
 80015f4:	001a      	movs	r2, r3
 80015f6:	2100      	movs	r1, #0
 80015f8:	f003 ff30 	bl	800545c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fc:	4b31      	ldr	r3, [pc, #196]	@ (80016c4 <SystemClock_Config+0xfc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a31      	ldr	r2, [pc, #196]	@ (80016c8 <SystemClock_Config+0x100>)
 8001602:	401a      	ands	r2, r3
 8001604:	4b2f      	ldr	r3, [pc, #188]	@ (80016c4 <SystemClock_Config+0xfc>)
 8001606:	2180      	movs	r1, #128	@ 0x80
 8001608:	0109      	lsls	r1, r1, #4
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800160e:	f001 f9d1 	bl	80029b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001612:	4b2e      	ldr	r3, [pc, #184]	@ (80016cc <SystemClock_Config+0x104>)
 8001614:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001616:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <SystemClock_Config+0x104>)
 8001618:	492b      	ldr	r1, [pc, #172]	@ (80016c8 <SystemClock_Config+0x100>)
 800161a:	400a      	ands	r2, r1
 800161c:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800161e:	193b      	adds	r3, r7, r4
 8001620:	2206      	movs	r2, #6
 8001622:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001624:	193b      	adds	r3, r7, r4
 8001626:	2280      	movs	r2, #128	@ 0x80
 8001628:	0052      	lsls	r2, r2, #1
 800162a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162c:	0021      	movs	r1, r4
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2201      	movs	r2, #1
 8001632:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2210      	movs	r2, #16
 8001638:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2202      	movs	r2, #2
 800163e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2200      	movs	r2, #0
 8001644:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	2280      	movs	r2, #128	@ 0x80
 800164a:	02d2      	lsls	r2, r2, #11
 800164c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800164e:	187b      	adds	r3, r7, r1
 8001650:	2280      	movs	r2, #128	@ 0x80
 8001652:	03d2      	lsls	r2, r2, #15
 8001654:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001656:	187b      	adds	r3, r7, r1
 8001658:	0018      	movs	r0, r3
 800165a:	f001 f9f1 	bl	8002a40 <HAL_RCC_OscConfig>
 800165e:	1e03      	subs	r3, r0, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001662:	f000 f97f 	bl	8001964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001666:	2118      	movs	r1, #24
 8001668:	187b      	adds	r3, r7, r1
 800166a:	220f      	movs	r2, #15
 800166c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2203      	movs	r2, #3
 8001672:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001674:	187b      	adds	r3, r7, r1
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800167a:	187b      	adds	r3, r7, r1
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001680:	187b      	adds	r3, r7, r1
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2101      	movs	r1, #1
 800168a:	0018      	movs	r0, r3
 800168c:	f001 fd54 	bl	8003138 <HAL_RCC_ClockConfig>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001694:	f000 f966 	bl	8001964 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8001698:	003b      	movs	r3, r7
 800169a:	2222      	movs	r2, #34	@ 0x22
 800169c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800169e:	003b      	movs	r3, r7
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016a4:	003b      	movs	r3, r7
 80016a6:	2280      	movs	r2, #128	@ 0x80
 80016a8:	0252      	lsls	r2, r2, #9
 80016aa:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ac:	003b      	movs	r3, r7
 80016ae:	0018      	movs	r0, r3
 80016b0:	f001 ff66 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 80016b4:	1e03      	subs	r3, r0, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80016b8:	f000 f954 	bl	8001964 <Error_Handler>
  }
}
 80016bc:	46c0      	nop			@ (mov r8, r8)
 80016be:	46bd      	mov	sp, r7
 80016c0:	b019      	add	sp, #100	@ 0x64
 80016c2:	bd90      	pop	{r4, r7, pc}
 80016c4:	40007000 	.word	0x40007000
 80016c8:	ffffe7ff 	.word	0xffffe7ff
 80016cc:	40021000 	.word	0x40021000

080016d0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016d6:	003b      	movs	r3, r7
 80016d8:	0018      	movs	r0, r3
 80016da:	2308      	movs	r3, #8
 80016dc:	001a      	movs	r2, r3
 80016de:	2100      	movs	r1, #0
 80016e0:	f003 febc 	bl	800545c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80016e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001790 <MX_ADC_Init+0xc0>)
 80016e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001794 <MX_ADC_Init+0xc4>)
 80016e8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80016ea:	4b29      	ldr	r3, [pc, #164]	@ (8001790 <MX_ADC_Init+0xc0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016f0:	4b27      	ldr	r3, [pc, #156]	@ (8001790 <MX_ADC_Init+0xc0>)
 80016f2:	2280      	movs	r2, #128	@ 0x80
 80016f4:	05d2      	lsls	r2, r2, #23
 80016f6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80016f8:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <MX_ADC_Init+0xc0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016fe:	4b24      	ldr	r3, [pc, #144]	@ (8001790 <MX_ADC_Init+0xc0>)
 8001700:	2200      	movs	r2, #0
 8001702:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001704:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <MX_ADC_Init+0xc0>)
 8001706:	2201      	movs	r2, #1
 8001708:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800170a:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <MX_ADC_Init+0xc0>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <MX_ADC_Init+0xc0>)
 8001712:	2220      	movs	r2, #32
 8001714:	2100      	movs	r1, #0
 8001716:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001718:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <MX_ADC_Init+0xc0>)
 800171a:	2221      	movs	r2, #33	@ 0x21
 800171c:	2100      	movs	r1, #0
 800171e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <MX_ADC_Init+0xc0>)
 8001722:	2200      	movs	r2, #0
 8001724:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <MX_ADC_Init+0xc0>)
 8001728:	22c2      	movs	r2, #194	@ 0xc2
 800172a:	32ff      	adds	r2, #255	@ 0xff
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800172e:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <MX_ADC_Init+0xc0>)
 8001730:	222c      	movs	r2, #44	@ 0x2c
 8001732:	2100      	movs	r1, #0
 8001734:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001736:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <MX_ADC_Init+0xc0>)
 8001738:	2204      	movs	r2, #4
 800173a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <MX_ADC_Init+0xc0>)
 800173e:	2200      	movs	r2, #0
 8001740:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001742:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <MX_ADC_Init+0xc0>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <MX_ADC_Init+0xc0>)
 800174a:	2200      	movs	r2, #0
 800174c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <MX_ADC_Init+0xc0>)
 8001750:	2200      	movs	r2, #0
 8001752:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <MX_ADC_Init+0xc0>)
 8001756:	0018      	movs	r0, r3
 8001758:	f000 fabc 	bl	8001cd4 <HAL_ADC_Init>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d001      	beq.n	8001764 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001760:	f000 f900 	bl	8001964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001764:	003b      	movs	r3, r7
 8001766:	4a0c      	ldr	r2, [pc, #48]	@ (8001798 <MX_ADC_Init+0xc8>)
 8001768:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800176a:	003b      	movs	r3, r7
 800176c:	2280      	movs	r2, #128	@ 0x80
 800176e:	0152      	lsls	r2, r2, #5
 8001770:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001772:	003a      	movs	r2, r7
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <MX_ADC_Init+0xc0>)
 8001776:	0011      	movs	r1, r2
 8001778:	0018      	movs	r0, r3
 800177a:	f000 fd1b 	bl	80021b4 <HAL_ADC_ConfigChannel>
 800177e:	1e03      	subs	r3, r0, #0
 8001780:	d001      	beq.n	8001786 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001782:	f000 f8ef 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	20000028 	.word	0x20000028
 8001794:	40012400 	.word	0x40012400
 8001798:	1c000080 	.word	0x1c000080

0800179c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <MX_RTC_Init+0x4c>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <MX_RTC_Init+0x50>)
 80017a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <MX_RTC_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <MX_RTC_Init+0x4c>)
 80017ae:	227f      	movs	r2, #127	@ 0x7f
 80017b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017b2:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <MX_RTC_Init+0x4c>)
 80017b4:	22ff      	movs	r2, #255	@ 0xff
 80017b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <MX_RTC_Init+0x4c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017be:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <MX_RTC_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <MX_RTC_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017ca:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <MX_RTC_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <MX_RTC_Init+0x4c>)
 80017d2:	0018      	movs	r0, r3
 80017d4:	f002 f800 	bl	80037d8 <HAL_RTC_Init>
 80017d8:	1e03      	subs	r3, r0, #0
 80017da:	d001      	beq.n	80017e0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80017dc:	f000 f8c2 	bl	8001964 <Error_Handler>
  //    Error_Handler();
  //  }

  /* USER CODE END RTC_Init 2 */

}
 80017e0:	46c0      	nop			@ (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	20000084 	.word	0x20000084
 80017ec:	40002800 	.word	0x40002800

080017f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f4:	4b19      	ldr	r3, [pc, #100]	@ (800185c <MX_USART2_UART_Init+0x6c>)
 80017f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001860 <MX_USART2_UART_Init+0x70>)
 80017f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017fa:	4b18      	ldr	r3, [pc, #96]	@ (800185c <MX_USART2_UART_Init+0x6c>)
 80017fc:	2296      	movs	r2, #150	@ 0x96
 80017fe:	0192      	lsls	r2, r2, #6
 8001800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <MX_USART2_UART_Init+0x6c>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <MX_USART2_UART_Init+0x6c>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <MX_USART2_UART_Init+0x6c>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <MX_USART2_UART_Init+0x6c>)
 8001816:	220c      	movs	r2, #12
 8001818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <MX_USART2_UART_Init+0x6c>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001820:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <MX_USART2_UART_Init+0x6c>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001826:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <MX_USART2_UART_Init+0x6c>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182c:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <MX_USART2_UART_Init+0x6c>)
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <MX_USART2_UART_Init+0x6c>)
 8001834:	0018      	movs	r0, r3
 8001836:	f002 fa75 	bl	8003d24 <HAL_UART_Init>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d001      	beq.n	8001842 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800183e:	f000 f891 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  if (HAL_UART_Receive_IT(&huart2, &rx_data, 1) != HAL_OK)
 8001842:	4908      	ldr	r1, [pc, #32]	@ (8001864 <MX_USART2_UART_Init+0x74>)
 8001844:	4b05      	ldr	r3, [pc, #20]	@ (800185c <MX_USART2_UART_Init+0x6c>)
 8001846:	2201      	movs	r2, #1
 8001848:	0018      	movs	r0, r3
 800184a:	f002 fb5f 	bl	8003f0c <HAL_UART_Receive_IT>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d001      	beq.n	8001856 <MX_USART2_UART_Init+0x66>
	{
		Error_Handler();
 8001852:	f000 f887 	bl	8001964 <Error_Handler>
	}
  /* USER CODE END USART2_Init 2 */

}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200000a8 	.word	0x200000a8
 8001860:	40004400 	.word	0x40004400
 8001864:	20000130 	.word	0x20000130

08001868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	240c      	movs	r4, #12
 8001870:	193b      	adds	r3, r7, r4
 8001872:	0018      	movs	r0, r3
 8001874:	2314      	movs	r3, #20
 8001876:	001a      	movs	r2, r3
 8001878:	2100      	movs	r1, #0
 800187a:	f003 fdef 	bl	800545c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	4b2d      	ldr	r3, [pc, #180]	@ (8001934 <MX_GPIO_Init+0xcc>)
 8001880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001882:	4b2c      	ldr	r3, [pc, #176]	@ (8001934 <MX_GPIO_Init+0xcc>)
 8001884:	2104      	movs	r1, #4
 8001886:	430a      	orrs	r2, r1
 8001888:	62da      	str	r2, [r3, #44]	@ 0x2c
 800188a:	4b2a      	ldr	r3, [pc, #168]	@ (8001934 <MX_GPIO_Init+0xcc>)
 800188c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188e:	2204      	movs	r2, #4
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b27      	ldr	r3, [pc, #156]	@ (8001934 <MX_GPIO_Init+0xcc>)
 8001898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800189a:	4b26      	ldr	r3, [pc, #152]	@ (8001934 <MX_GPIO_Init+0xcc>)
 800189c:	2101      	movs	r1, #1
 800189e:	430a      	orrs	r2, r1
 80018a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018a2:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <MX_GPIO_Init+0xcc>)
 80018a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a6:	2201      	movs	r2, #1
 80018a8:	4013      	ands	r3, r2
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <MX_GPIO_Init+0xcc>)
 80018b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018b2:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <MX_GPIO_Init+0xcc>)
 80018b4:	2102      	movs	r1, #2
 80018b6:	430a      	orrs	r2, r1
 80018b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <MX_GPIO_Init+0xcc>)
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80018c6:	23a0      	movs	r3, #160	@ 0xa0
 80018c8:	05db      	lsls	r3, r3, #23
 80018ca:	2200      	movs	r2, #0
 80018cc:	2102      	movs	r1, #2
 80018ce:	0018      	movs	r0, r3
 80018d0:	f001 f852 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_GPIO_Init+0xd0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	2108      	movs	r1, #8
 80018da:	0018      	movs	r0, r3
 80018dc:	f001 f84c 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018e0:	193b      	adds	r3, r7, r4
 80018e2:	2202      	movs	r2, #2
 80018e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	2201      	movs	r2, #1
 80018ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	193b      	adds	r3, r7, r4
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	193a      	adds	r2, r7, r4
 80018fa:	23a0      	movs	r3, #160	@ 0xa0
 80018fc:	05db      	lsls	r3, r3, #23
 80018fe:	0011      	movs	r1, r2
 8001900:	0018      	movs	r0, r3
 8001902:	f000 fecb 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001906:	0021      	movs	r1, r4
 8001908:	187b      	adds	r3, r7, r1
 800190a:	2208      	movs	r2, #8
 800190c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	187b      	adds	r3, r7, r1
 8001910:	2201      	movs	r2, #1
 8001912:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	187b      	adds	r3, r7, r1
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	187b      	adds	r3, r7, r1
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	187b      	adds	r3, r7, r1
 8001922:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <MX_GPIO_Init+0xd0>)
 8001924:	0019      	movs	r1, r3
 8001926:	0010      	movs	r0, r2
 8001928:	f000 feb8 	bl	800269c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800192c:	46c0      	nop			@ (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b009      	add	sp, #36	@ 0x24
 8001932:	bd90      	pop	{r4, r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	50000400 	.word	0x50000400

0800193c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <HAL_UART_RxCpltCallback+0x20>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d102      	bne.n	8001954 <HAL_UART_RxCpltCallback+0x18>
	{
//		HAL_UART_Transmit(&huart2, &rx_data, 1, HAL_MAX_DELAY);
		isRec = 1;
 800194e:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <HAL_UART_RxCpltCallback+0x24>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
	}
}
 8001954:	46c0      	nop			@ (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40004400 	.word	0x40004400
 8001960:	20000131 	.word	0x20000131

08001964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001968:	b672      	cpsid	i
}
 800196a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196c:	46c0      	nop			@ (mov r8, r8)
 800196e:	e7fd      	b.n	800196c <Error_Handler+0x8>

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001974:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <HAL_MspInit+0x24>)
 8001976:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_MspInit+0x24>)
 800197a:	2101      	movs	r1, #1
 800197c:	430a      	orrs	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001980:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <HAL_MspInit+0x24>)
 8001982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001984:	4b03      	ldr	r3, [pc, #12]	@ (8001994 <HAL_MspInit+0x24>)
 8001986:	2180      	movs	r1, #128	@ 0x80
 8001988:	0549      	lsls	r1, r1, #21
 800198a:	430a      	orrs	r2, r1
 800198c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	240c      	movs	r4, #12
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	0018      	movs	r0, r3
 80019a6:	2314      	movs	r3, #20
 80019a8:	001a      	movs	r2, r3
 80019aa:	2100      	movs	r1, #0
 80019ac:	f003 fd56 	bl	800545c <memset>
  if(hadc->Instance==ADC1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a14      	ldr	r2, [pc, #80]	@ (8001a08 <HAL_ADC_MspInit+0x70>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d122      	bne.n	8001a00 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019ba:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_ADC_MspInit+0x74>)
 80019bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <HAL_ADC_MspInit+0x74>)
 80019c0:	2180      	movs	r1, #128	@ 0x80
 80019c2:	0089      	lsls	r1, r1, #2
 80019c4:	430a      	orrs	r2, r1
 80019c6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <HAL_ADC_MspInit+0x74>)
 80019ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <HAL_ADC_MspInit+0x74>)
 80019ce:	2101      	movs	r1, #1
 80019d0:	430a      	orrs	r2, r1
 80019d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019d4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <HAL_ADC_MspInit+0x74>)
 80019d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d8:	2201      	movs	r2, #1
 80019da:	4013      	ands	r3, r2
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2280      	movs	r2, #128	@ 0x80
 80019e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	2203      	movs	r2, #3
 80019ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	193b      	adds	r3, r7, r4
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	193a      	adds	r2, r7, r4
 80019f4:	23a0      	movs	r3, #160	@ 0xa0
 80019f6:	05db      	lsls	r3, r3, #23
 80019f8:	0011      	movs	r1, r2
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 fe4e 	bl	800269c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a00:	46c0      	nop			@ (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b009      	add	sp, #36	@ 0x24
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	40012400 	.word	0x40012400
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <HAL_RTC_MspInit+0x38>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10e      	bne.n	8001a40 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <HAL_RTC_MspInit+0x3c>)
 8001a24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <HAL_RTC_MspInit+0x3c>)
 8001a28:	2180      	movs	r1, #128	@ 0x80
 8001a2a:	02c9      	lsls	r1, r1, #11
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	2002      	movs	r0, #2
 8001a36:	f000 fd77 	bl	8002528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	f000 fd89 	bl	8002552 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40002800 	.word	0x40002800
 8001a4c:	40021000 	.word	0x40021000

08001a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	240c      	movs	r4, #12
 8001a5a:	193b      	adds	r3, r7, r4
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	2314      	movs	r3, #20
 8001a60:	001a      	movs	r2, r3
 8001a62:	2100      	movs	r1, #0
 8001a64:	f003 fcfa 	bl	800545c <memset>
  if(huart->Instance==USART2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <HAL_UART_MspInit+0x90>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d132      	bne.n	8001ad8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae4 <HAL_UART_MspInit+0x94>)
 8001a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <HAL_UART_MspInit+0x94>)
 8001a78:	2180      	movs	r1, #128	@ 0x80
 8001a7a:	0289      	lsls	r1, r1, #10
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <HAL_UART_MspInit+0x94>)
 8001a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a84:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <HAL_UART_MspInit+0x94>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <HAL_UART_MspInit+0x94>)
 8001a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a90:	2201      	movs	r2, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	22c0      	movs	r2, #192	@ 0xc0
 8001a9c:	00d2      	lsls	r2, r2, #3
 8001a9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	0021      	movs	r1, r4
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	187a      	adds	r2, r7, r1
 8001abc:	23a0      	movs	r3, #160	@ 0xa0
 8001abe:	05db      	lsls	r3, r3, #23
 8001ac0:	0011      	movs	r1, r2
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 fdea 	bl	800269c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	201c      	movs	r0, #28
 8001ace:	f000 fd2b 	bl	8002528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ad2:	201c      	movs	r0, #28
 8001ad4:	f000 fd3d 	bl	8002552 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ad8:	46c0      	nop			@ (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b009      	add	sp, #36	@ 0x24
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	40004400 	.word	0x40004400
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aec:	46c0      	nop			@ (mov r8, r8)
 8001aee:	e7fd      	b.n	8001aec <NMI_Handler+0x4>

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	46c0      	nop			@ (mov r8, r8)
 8001af6:	e7fd      	b.n	8001af4 <HardFault_Handler+0x4>

08001af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001afc:	46c0      	nop			@ (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 f8a0 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	46c0      	nop			@ (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <RTC_IRQHandler+0x14>)
 8001b22:	0018      	movs	r0, r3
 8001b24:	f002 f8c6 	bl	8003cb4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001b28:	46c0      	nop			@ (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	20000084 	.word	0x20000084

08001b34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <USART2_IRQHandler+0x14>)
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f002 fa44 	bl	8003fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	200000a8 	.word	0x200000a8

08001b4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	46c0      	nop			@ (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001b58:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001b5a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b5c:	f7ff fff6 	bl	8001b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b60:	480c      	ldr	r0, [pc, #48]	@ (8001b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b62:	490d      	ldr	r1, [pc, #52]	@ (8001b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <LoopForever+0xe>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba4 <LoopForever+0x16>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f003 fc71 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8a:	f7ff fc6d 	bl	8001468 <main>

08001b8e <LoopForever>:

LoopForever:
    b LoopForever
 8001b8e:	e7fe      	b.n	8001b8e <LoopForever>
   ldr   r0, =_estack
 8001b90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b9c:	08005548 	.word	0x08005548
  ldr r2, =_sbss
 8001ba0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ba4:	20000138 	.word	0x20000138

08001ba8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_COMP_IRQHandler>
	...

08001bac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_Init+0x3c>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <HAL_Init+0x3c>)
 8001bbe:	2140      	movs	r1, #64	@ 0x40
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 f811 	bl	8001bec <HAL_InitTick>
 8001bca:	1e03      	subs	r3, r0, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	e001      	b.n	8001bda <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bd6:	f7ff fecb 	bl	8001970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bda:	1dfb      	adds	r3, r7, #7
 8001bdc:	781b      	ldrb	r3, [r3, #0]
}
 8001bde:	0018      	movs	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	40022000 	.word	0x40022000

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <HAL_InitTick+0x5c>)
 8001bf6:	681c      	ldr	r4, [r3, #0]
 8001bf8:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <HAL_InitTick+0x60>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	23fa      	movs	r3, #250	@ 0xfa
 8001c00:	0098      	lsls	r0, r3, #2
 8001c02:	f7fe fa81 	bl	8000108 <__udivsi3>
 8001c06:	0003      	movs	r3, r0
 8001c08:	0019      	movs	r1, r3
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	f7fe fa7c 	bl	8000108 <__udivsi3>
 8001c10:	0003      	movs	r3, r0
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 fcad 	bl	8002572 <HAL_SYSTICK_Config>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e00f      	b.n	8001c40 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d80b      	bhi.n	8001c3e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 fc7a 	bl	8002528 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <HAL_InitTick+0x64>)
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b003      	add	sp, #12
 8001c46:	bd90      	pop	{r4, r7, pc}
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_IncTick+0x1c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	18d2      	adds	r2, r2, r3
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c66:	601a      	str	r2, [r3, #0]
}
 8001c68:	46c0      	nop			@ (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	20000008 	.word	0x20000008
 8001c74:	20000134 	.word	0x20000134

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	@ (8001c88 <HAL_GetTick+0x10>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	20000134 	.word	0x20000134

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff fff0 	bl	8001c78 <HAL_GetTick>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	001a      	movs	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	189b      	adds	r3, r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	f7ff ffe0 	bl	8001c78 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	46c0      	nop			@ (mov r8, r8)
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b004      	add	sp, #16
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	20000008 	.word	0x20000008

08001cd4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e159      	b.n	8001f9a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10a      	bne.n	8001d04 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2250      	movs	r2, #80	@ 0x50
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f7ff fe4a 	bl	8001998 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d08:	2210      	movs	r2, #16
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d005      	beq.n	8001d1c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2204      	movs	r2, #4
 8001d18:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001d1a:	d00b      	beq.n	8001d34 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d20:	2210      	movs	r2, #16
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2250      	movs	r2, #80	@ 0x50
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e132      	b.n	8001f9a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d38:	4a9a      	ldr	r2, [pc, #616]	@ (8001fa4 <HAL_ADC_Init+0x2d0>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d108      	bne.n	8001d64 <HAL_ADC_Init+0x90>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_Init+0x90>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_ADC_Init+0x92>
 8001d64:	2300      	movs	r3, #0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d149      	bne.n	8001dfe <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	23c0      	movs	r3, #192	@ 0xc0
 8001d70:	061b      	lsls	r3, r3, #24
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d00b      	beq.n	8001d8e <HAL_ADC_Init+0xba>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	2380      	movs	r3, #128	@ 0x80
 8001d7c:	05db      	lsls	r3, r3, #23
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d005      	beq.n	8001d8e <HAL_ADC_Init+0xba>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	2380      	movs	r3, #128	@ 0x80
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d111      	bne.n	8001db2 <HAL_ADC_Init+0xde>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	0892      	lsrs	r2, r2, #2
 8001d9c:	611a      	str	r2, [r3, #16]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6919      	ldr	r1, [r3, #16]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	611a      	str	r2, [r3, #16]
 8001db0:	e014      	b.n	8001ddc <HAL_ADC_Init+0x108>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	0892      	lsrs	r2, r2, #2
 8001dc0:	611a      	str	r2, [r3, #16]
 8001dc2:	4b79      	ldr	r3, [pc, #484]	@ (8001fa8 <HAL_ADC_Init+0x2d4>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b78      	ldr	r3, [pc, #480]	@ (8001fa8 <HAL_ADC_Init+0x2d4>)
 8001dc8:	4978      	ldr	r1, [pc, #480]	@ (8001fac <HAL_ADC_Init+0x2d8>)
 8001dca:	400a      	ands	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	4b76      	ldr	r3, [pc, #472]	@ (8001fa8 <HAL_ADC_Init+0x2d4>)
 8001dd0:	6819      	ldr	r1, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4b74      	ldr	r3, [pc, #464]	@ (8001fa8 <HAL_ADC_Init+0x2d4>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2118      	movs	r1, #24
 8001de8:	438a      	bics	r2, r1
 8001dea:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68d9      	ldr	r1, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa8 <HAL_ADC_Init+0x2d4>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4b69      	ldr	r3, [pc, #420]	@ (8001fa8 <HAL_ADC_Init+0x2d4>)
 8001e04:	496a      	ldr	r1, [pc, #424]	@ (8001fb0 <HAL_ADC_Init+0x2dc>)
 8001e06:	400a      	ands	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001e0a:	4b67      	ldr	r3, [pc, #412]	@ (8001fa8 <HAL_ADC_Init+0x2d4>)
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e12:	065a      	lsls	r2, r3, #25
 8001e14:	4b64      	ldr	r3, [pc, #400]	@ (8001fa8 <HAL_ADC_Init+0x2d4>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	055b      	lsls	r3, r3, #21
 8001e24:	4013      	ands	r3, r2
 8001e26:	d108      	bne.n	8001e3a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2180      	movs	r1, #128	@ 0x80
 8001e34:	0549      	lsls	r1, r1, #21
 8001e36:	430a      	orrs	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	495b      	ldr	r1, [pc, #364]	@ (8001fb4 <HAL_ADC_Init+0x2e0>)
 8001e46:	400a      	ands	r2, r1
 8001e48:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68d9      	ldr	r1, [r3, #12]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_Init+0x18c>
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	e000      	b.n	8001e62 <HAL_ADC_Init+0x18e>
 8001e60:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e62:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2020      	movs	r0, #32
 8001e68:	5c1b      	ldrb	r3, [r3, r0]
 8001e6a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001e6c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	202c      	movs	r0, #44	@ 0x2c
 8001e72:	5c1b      	ldrb	r3, [r3, r0]
 8001e74:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e76:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e7c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001e84:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001e8c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e9a:	23c2      	movs	r3, #194	@ 0xc2
 8001e9c:	33ff      	adds	r3, #255	@ 0xff
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d00b      	beq.n	8001eba <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68d9      	ldr	r1, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2221      	movs	r2, #33	@ 0x21
 8001ebe:	5c9b      	ldrb	r3, [r3, r2]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d11a      	bne.n	8001efa <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	5c9b      	ldrb	r3, [r3, r2]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2180      	movs	r1, #128	@ 0x80
 8001eda:	0249      	lsls	r1, r1, #9
 8001edc:	430a      	orrs	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]
 8001ee0:	e00b      	b.n	8001efa <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d11f      	bne.n	8001f42 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	492a      	ldr	r1, [pc, #168]	@ (8001fb8 <HAL_ADC_Init+0x2e4>)
 8001f0e:	400a      	ands	r2, r1
 8001f10:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6919      	ldr	r1, [r3, #16]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001f20:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001f26:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	611a      	str	r2, [r3, #16]
 8001f40:	e00e      	b.n	8001f60 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2107      	movs	r1, #7
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6959      	ldr	r1, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	4393      	bics	r3, r2
 8001f90:	2201      	movs	r2, #1
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b002      	add	sp, #8
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	fffffefd 	.word	0xfffffefd
 8001fa8:	40012708 	.word	0x40012708
 8001fac:	ffc3ffff 	.word	0xffc3ffff
 8001fb0:	fdffffff 	.word	0xfdffffff
 8001fb4:	fffe0219 	.word	0xfffe0219
 8001fb8:	fffffc03 	.word	0xfffffc03

08001fbc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d138      	bne.n	800204a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2250      	movs	r2, #80	@ 0x50
 8001fdc:	5c9b      	ldrb	r3, [r3, r2]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_Start+0x2a>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e038      	b.n	8002058 <HAL_ADC_Start+0x9c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2250      	movs	r2, #80	@ 0x50
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d007      	beq.n	8002006 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001ff6:	230f      	movs	r3, #15
 8001ff8:	18fc      	adds	r4, r7, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 f95f 	bl	80022c0 <ADC_Enable>
 8002002:	0003      	movs	r3, r0
 8002004:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002006:	230f      	movs	r3, #15
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d120      	bne.n	8002052 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002014:	4a12      	ldr	r2, [pc, #72]	@ (8002060 <HAL_ADC_Start+0xa4>)
 8002016:	4013      	ands	r3, r2
 8002018:	2280      	movs	r2, #128	@ 0x80
 800201a:	0052      	lsls	r2, r2, #1
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2250      	movs	r2, #80	@ 0x50
 800202c:	2100      	movs	r1, #0
 800202e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	221c      	movs	r2, #28
 8002036:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2104      	movs	r1, #4
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	e003      	b.n	8002052 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800204a:	230f      	movs	r3, #15
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2202      	movs	r2, #2
 8002050:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002052:	230f      	movs	r3, #15
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	781b      	ldrb	r3, [r3, #0]
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b005      	add	sp, #20
 800205e:	bd90      	pop	{r4, r7, pc}
 8002060:	fffff0fe 	.word	0xfffff0fe

08002064 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b08      	cmp	r3, #8
 800207c:	d102      	bne.n	8002084 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800207e:	2308      	movs	r3, #8
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e014      	b.n	80020ae <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	4013      	ands	r3, r2
 800208e:	2b01      	cmp	r3, #1
 8002090:	d10b      	bne.n	80020aa <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002096:	2220      	movs	r2, #32
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2250      	movs	r2, #80	@ 0x50
 80020a2:	2100      	movs	r1, #0
 80020a4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e072      	b.n	8002190 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80020aa:	230c      	movs	r3, #12
 80020ac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80020ae:	f7ff fde3 	bl	8001c78 <HAL_GetTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80020b6:	e01f      	b.n	80020f8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	d01c      	beq.n	80020f8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_ADC_PollForConversion+0x70>
 80020c4:	f7ff fdd8 	bl	8001c78 <HAL_GetTick>
 80020c8:	0002      	movs	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d211      	bcs.n	80020f8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	d10b      	bne.n	80020f8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e4:	2204      	movs	r2, #4
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2250      	movs	r2, #80	@ 0x50
 80020f0:	2100      	movs	r1, #0
 80020f2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e04b      	b.n	8002190 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	d0d9      	beq.n	80020b8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	2280      	movs	r2, #128	@ 0x80
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	23c0      	movs	r3, #192	@ 0xc0
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	4013      	ands	r3, r2
 800211e:	d12e      	bne.n	800217e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002126:	2b00      	cmp	r3, #0
 8002128:	d129      	bne.n	800217e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2208      	movs	r2, #8
 8002132:	4013      	ands	r3, r2
 8002134:	2b08      	cmp	r3, #8
 8002136:	d122      	bne.n	800217e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2204      	movs	r2, #4
 8002140:	4013      	ands	r3, r2
 8002142:	d110      	bne.n	8002166 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	210c      	movs	r1, #12
 8002150:	438a      	bics	r2, r1
 8002152:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002158:	4a0f      	ldr	r2, [pc, #60]	@ (8002198 <HAL_ADC_PollForConversion+0x134>)
 800215a:	4013      	ands	r3, r2
 800215c:	2201      	movs	r2, #1
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	655a      	str	r2, [r3, #84]	@ 0x54
 8002164:	e00b      	b.n	800217e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216a:	2220      	movs	r2, #32
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	2201      	movs	r2, #1
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	220c      	movs	r2, #12
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	b004      	add	sp, #16
 8002196:	bd80      	pop	{r7, pc}
 8002198:	fffffefe 	.word	0xfffffefe

0800219c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b002      	add	sp, #8
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2250      	movs	r2, #80	@ 0x50
 80021c2:	5c9b      	ldrb	r3, [r3, r2]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x18>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e06c      	b.n	80022a6 <HAL_ADC_ConfigChannel+0xf2>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2250      	movs	r2, #80	@ 0x50
 80021d0:	2101      	movs	r1, #1
 80021d2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2204      	movs	r2, #4
 80021dc:	4013      	ands	r3, r2
 80021de:	d00b      	beq.n	80021f8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	2220      	movs	r2, #32
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2250      	movs	r2, #80	@ 0x50
 80021f0:	2100      	movs	r1, #0
 80021f2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e056      	b.n	80022a6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a2c      	ldr	r2, [pc, #176]	@ (80022b0 <HAL_ADC_ConfigChannel+0xfc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d028      	beq.n	8002254 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	035b      	lsls	r3, r3, #13
 800220e:	0b5a      	lsrs	r2, r3, #13
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	02db      	lsls	r3, r3, #11
 8002220:	4013      	ands	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002224:	4b23      	ldr	r3, [pc, #140]	@ (80022b4 <HAL_ADC_ConfigChannel+0x100>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b22      	ldr	r3, [pc, #136]	@ (80022b4 <HAL_ADC_ConfigChannel+0x100>)
 800222a:	2180      	movs	r1, #128	@ 0x80
 800222c:	0409      	lsls	r1, r1, #16
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002232:	200a      	movs	r0, #10
 8002234:	f000 f8ac 	bl	8002390 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	029b      	lsls	r3, r3, #10
 8002240:	4013      	ands	r3, r2
 8002242:	d02b      	beq.n	800229c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002244:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <HAL_ADC_ConfigChannel+0x100>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <HAL_ADC_ConfigChannel+0x100>)
 800224a:	2180      	movs	r1, #128	@ 0x80
 800224c:	03c9      	lsls	r1, r1, #15
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e023      	b.n	800229c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	035b      	lsls	r3, r3, #13
 8002260:	0b5b      	lsrs	r3, r3, #13
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	400a      	ands	r2, r1
 800226a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	02db      	lsls	r3, r3, #11
 8002274:	4013      	ands	r3, r2
 8002276:	d005      	beq.n	8002284 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002278:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <HAL_ADC_ConfigChannel+0x100>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <HAL_ADC_ConfigChannel+0x100>)
 800227e:	490e      	ldr	r1, [pc, #56]	@ (80022b8 <HAL_ADC_ConfigChannel+0x104>)
 8002280:	400a      	ands	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	@ 0x80
 800228a:	029b      	lsls	r3, r3, #10
 800228c:	4013      	ands	r3, r2
 800228e:	d005      	beq.n	800229c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002290:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <HAL_ADC_ConfigChannel+0x100>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <HAL_ADC_ConfigChannel+0x100>)
 8002296:	4909      	ldr	r1, [pc, #36]	@ (80022bc <HAL_ADC_ConfigChannel+0x108>)
 8002298:	400a      	ands	r2, r1
 800229a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2250      	movs	r2, #80	@ 0x50
 80022a0:	2100      	movs	r1, #0
 80022a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	0018      	movs	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b002      	add	sp, #8
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	00001001 	.word	0x00001001
 80022b4:	40012708 	.word	0x40012708
 80022b8:	ff7fffff 	.word	0xff7fffff
 80022bc:	ffbfffff 	.word	0xffbfffff

080022c0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2203      	movs	r2, #3
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d108      	bne.n	80022ec <ADC_Enable+0x2c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2201      	movs	r2, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <ADC_Enable+0x2c>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <ADC_Enable+0x2e>
 80022ec:	2300      	movs	r3, #0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d146      	bne.n	8002380 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4a24      	ldr	r2, [pc, #144]	@ (800238c <ADC_Enable+0xcc>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	d00d      	beq.n	800231a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002302:	2210      	movs	r2, #16
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230e:	2201      	movs	r2, #1
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e033      	b.n	8002382 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2101      	movs	r1, #1
 8002326:	430a      	orrs	r2, r1
 8002328:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800232a:	2001      	movs	r0, #1
 800232c:	f000 f830 	bl	8002390 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002330:	f7ff fca2 	bl	8001c78 <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002338:	e01b      	b.n	8002372 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800233a:	f7ff fc9d 	bl	8001c78 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b0a      	cmp	r3, #10
 8002346:	d914      	bls.n	8002372 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	4013      	ands	r3, r2
 8002352:	2b01      	cmp	r3, #1
 8002354:	d00d      	beq.n	8002372 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235a:	2210      	movs	r2, #16
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	2201      	movs	r2, #1
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e007      	b.n	8002382 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2201      	movs	r2, #1
 800237a:	4013      	ands	r3, r2
 800237c:	2b01      	cmp	r3, #1
 800237e:	d1dc      	bne.n	800233a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	0018      	movs	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	b004      	add	sp, #16
 8002388:	bd80      	pop	{r7, pc}
 800238a:	46c0      	nop			@ (mov r8, r8)
 800238c:	80000017 	.word	0x80000017

08002390 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002398:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <ADC_DelayMicroSecond+0x38>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	490b      	ldr	r1, [pc, #44]	@ (80023cc <ADC_DelayMicroSecond+0x3c>)
 800239e:	0018      	movs	r0, r3
 80023a0:	f7fd feb2 	bl	8000108 <__udivsi3>
 80023a4:	0003      	movs	r3, r0
 80023a6:	001a      	movs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4353      	muls	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80023ae:	e002      	b.n	80023b6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f9      	bne.n	80023b0 <ADC_DelayMicroSecond+0x20>
  }
}
 80023bc:	46c0      	nop			@ (mov r8, r8)
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b004      	add	sp, #16
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	20000000 	.word	0x20000000
 80023cc:	000f4240 	.word	0x000f4240

080023d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	0002      	movs	r2, r0
 80023d8:	1dfb      	adds	r3, r7, #7
 80023da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	1dfb      	adds	r3, r7, #7
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80023e2:	d809      	bhi.n	80023f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e4:	1dfb      	adds	r3, r7, #7
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	001a      	movs	r2, r3
 80023ea:	231f      	movs	r3, #31
 80023ec:	401a      	ands	r2, r3
 80023ee:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <__NVIC_EnableIRQ+0x30>)
 80023f0:	2101      	movs	r1, #1
 80023f2:	4091      	lsls	r1, r2
 80023f4:	000a      	movs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
  }
}
 80023f8:	46c0      	nop			@ (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b002      	add	sp, #8
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	0002      	movs	r2, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b7f      	cmp	r3, #127	@ 0x7f
 8002418:	d828      	bhi.n	800246c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800241a:	4a2f      	ldr	r2, [pc, #188]	@ (80024d8 <__NVIC_SetPriority+0xd4>)
 800241c:	1dfb      	adds	r3, r7, #7
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b25b      	sxtb	r3, r3
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	33c0      	adds	r3, #192	@ 0xc0
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	589b      	ldr	r3, [r3, r2]
 800242a:	1dfa      	adds	r2, r7, #7
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	0011      	movs	r1, r2
 8002430:	2203      	movs	r2, #3
 8002432:	400a      	ands	r2, r1
 8002434:	00d2      	lsls	r2, r2, #3
 8002436:	21ff      	movs	r1, #255	@ 0xff
 8002438:	4091      	lsls	r1, r2
 800243a:	000a      	movs	r2, r1
 800243c:	43d2      	mvns	r2, r2
 800243e:	401a      	ands	r2, r3
 8002440:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	019b      	lsls	r3, r3, #6
 8002446:	22ff      	movs	r2, #255	@ 0xff
 8002448:	401a      	ands	r2, r3
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	0018      	movs	r0, r3
 8002450:	2303      	movs	r3, #3
 8002452:	4003      	ands	r3, r0
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002458:	481f      	ldr	r0, [pc, #124]	@ (80024d8 <__NVIC_SetPriority+0xd4>)
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b25b      	sxtb	r3, r3
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	430a      	orrs	r2, r1
 8002464:	33c0      	adds	r3, #192	@ 0xc0
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800246a:	e031      	b.n	80024d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800246c:	4a1b      	ldr	r2, [pc, #108]	@ (80024dc <__NVIC_SetPriority+0xd8>)
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	0019      	movs	r1, r3
 8002474:	230f      	movs	r3, #15
 8002476:	400b      	ands	r3, r1
 8002478:	3b08      	subs	r3, #8
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3306      	adds	r3, #6
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	18d3      	adds	r3, r2, r3
 8002482:	3304      	adds	r3, #4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1dfa      	adds	r2, r7, #7
 8002488:	7812      	ldrb	r2, [r2, #0]
 800248a:	0011      	movs	r1, r2
 800248c:	2203      	movs	r2, #3
 800248e:	400a      	ands	r2, r1
 8002490:	00d2      	lsls	r2, r2, #3
 8002492:	21ff      	movs	r1, #255	@ 0xff
 8002494:	4091      	lsls	r1, r2
 8002496:	000a      	movs	r2, r1
 8002498:	43d2      	mvns	r2, r2
 800249a:	401a      	ands	r2, r3
 800249c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	22ff      	movs	r2, #255	@ 0xff
 80024a4:	401a      	ands	r2, r3
 80024a6:	1dfb      	adds	r3, r7, #7
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	0018      	movs	r0, r3
 80024ac:	2303      	movs	r3, #3
 80024ae:	4003      	ands	r3, r0
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b4:	4809      	ldr	r0, [pc, #36]	@ (80024dc <__NVIC_SetPriority+0xd8>)
 80024b6:	1dfb      	adds	r3, r7, #7
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	001c      	movs	r4, r3
 80024bc:	230f      	movs	r3, #15
 80024be:	4023      	ands	r3, r4
 80024c0:	3b08      	subs	r3, #8
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	430a      	orrs	r2, r1
 80024c6:	3306      	adds	r3, #6
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	18c3      	adds	r3, r0, r3
 80024cc:	3304      	adds	r3, #4
 80024ce:	601a      	str	r2, [r3, #0]
}
 80024d0:	46c0      	nop			@ (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b003      	add	sp, #12
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	e000e100 	.word	0xe000e100
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	045b      	lsls	r3, r3, #17
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d301      	bcc.n	80024f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f4:	2301      	movs	r3, #1
 80024f6:	e010      	b.n	800251a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <SysTick_Config+0x44>)
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	3a01      	subs	r2, #1
 80024fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002500:	2301      	movs	r3, #1
 8002502:	425b      	negs	r3, r3
 8002504:	2103      	movs	r1, #3
 8002506:	0018      	movs	r0, r3
 8002508:	f7ff ff7c 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <SysTick_Config+0x44>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <SysTick_Config+0x44>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	210f      	movs	r1, #15
 8002534:	187b      	adds	r3, r7, r1
 8002536:	1c02      	adds	r2, r0, #0
 8002538:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	187b      	adds	r3, r7, r1
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b25b      	sxtb	r3, r3
 8002542:	0011      	movs	r1, r2
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff ff5d 	bl	8002404 <__NVIC_SetPriority>
}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	0002      	movs	r2, r0
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b25b      	sxtb	r3, r3
 8002564:	0018      	movs	r0, r3
 8002566:	f7ff ff33 	bl	80023d0 <__NVIC_EnableIRQ>
}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff ffaf 	bl	80024e0 <SysTick_Config>
 8002582:	0003      	movs	r3, r0
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	230f      	movs	r3, #15
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2225      	movs	r2, #37	@ 0x25
 80025a0:	5c9b      	ldrb	r3, [r3, r2]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2204      	movs	r2, #4
 80025ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2224      	movs	r2, #36	@ 0x24
 80025b2:	2100      	movs	r1, #0
 80025b4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e024      	b.n	8002604 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	210e      	movs	r1, #14
 80025c6:	438a      	bics	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	438a      	bics	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	221c      	movs	r2, #28
 80025e0:	401a      	ands	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	2101      	movs	r1, #1
 80025e8:	4091      	lsls	r1, r2
 80025ea:	000a      	movs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2225      	movs	r2, #37	@ 0x25
 80025f2:	2101      	movs	r1, #1
 80025f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2224      	movs	r2, #36	@ 0x24
 80025fa:	2100      	movs	r1, #0
 80025fc:	5499      	strb	r1, [r3, r2]

    return status;
 80025fe:	230f      	movs	r3, #15
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b004      	add	sp, #16
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002614:	210f      	movs	r1, #15
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2225      	movs	r2, #37	@ 0x25
 8002620:	5c9b      	ldrb	r3, [r3, r2]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d006      	beq.n	8002636 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2204      	movs	r2, #4
 800262c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800262e:	187b      	adds	r3, r7, r1
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e02a      	b.n	800268c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	210e      	movs	r1, #14
 8002642:	438a      	bics	r2, r1
 8002644:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	438a      	bics	r2, r1
 8002654:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	221c      	movs	r2, #28
 800265c:	401a      	ands	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	2101      	movs	r1, #1
 8002664:	4091      	lsls	r1, r2
 8002666:	000a      	movs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2225      	movs	r2, #37	@ 0x25
 800266e:	2101      	movs	r1, #1
 8002670:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2224      	movs	r2, #36	@ 0x24
 8002676:	2100      	movs	r1, #0
 8002678:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267e:	2b00      	cmp	r3, #0
 8002680:	d004      	beq.n	800268c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	0010      	movs	r0, r2
 800268a:	4798      	blx	r3
    }
  }
  return status;
 800268c:	230f      	movs	r3, #15
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	781b      	ldrb	r3, [r3, #0]
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b004      	add	sp, #16
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80026b2:	e149      	b.n	8002948 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4091      	lsls	r1, r2
 80026be:	000a      	movs	r2, r1
 80026c0:	4013      	ands	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d100      	bne.n	80026cc <HAL_GPIO_Init+0x30>
 80026ca:	e13a      	b.n	8002942 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2203      	movs	r2, #3
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d005      	beq.n	80026e4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2203      	movs	r2, #3
 80026de:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d130      	bne.n	8002746 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2203      	movs	r2, #3
 80026f0:	409a      	lsls	r2, r3
 80026f2:	0013      	movs	r3, r2
 80026f4:	43da      	mvns	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	409a      	lsls	r2, r3
 8002706:	0013      	movs	r3, r2
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800271a:	2201      	movs	r2, #1
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
 8002720:	0013      	movs	r3, r2
 8002722:	43da      	mvns	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	2201      	movs	r2, #1
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
 8002738:	0013      	movs	r3, r2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2203      	movs	r2, #3
 800274c:	4013      	ands	r3, r2
 800274e:	2b03      	cmp	r3, #3
 8002750:	d017      	beq.n	8002782 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	2203      	movs	r2, #3
 800275e:	409a      	lsls	r2, r3
 8002760:	0013      	movs	r3, r2
 8002762:	43da      	mvns	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	409a      	lsls	r2, r3
 8002774:	0013      	movs	r3, r2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2203      	movs	r2, #3
 8002788:	4013      	ands	r3, r2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d123      	bne.n	80027d6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	08da      	lsrs	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3208      	adds	r2, #8
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	58d3      	ldr	r3, [r2, r3]
 800279a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2207      	movs	r2, #7
 80027a0:	4013      	ands	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	220f      	movs	r2, #15
 80027a6:	409a      	lsls	r2, r3
 80027a8:	0013      	movs	r3, r2
 80027aa:	43da      	mvns	r2, r3
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4013      	ands	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2107      	movs	r1, #7
 80027ba:	400b      	ands	r3, r1
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	409a      	lsls	r2, r3
 80027c0:	0013      	movs	r3, r2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	6939      	ldr	r1, [r7, #16]
 80027d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2203      	movs	r2, #3
 80027e2:	409a      	lsls	r2, r3
 80027e4:	0013      	movs	r3, r2
 80027e6:	43da      	mvns	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2203      	movs	r2, #3
 80027f4:	401a      	ands	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	409a      	lsls	r2, r3
 80027fc:	0013      	movs	r3, r2
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	23c0      	movs	r3, #192	@ 0xc0
 8002810:	029b      	lsls	r3, r3, #10
 8002812:	4013      	ands	r3, r2
 8002814:	d100      	bne.n	8002818 <HAL_GPIO_Init+0x17c>
 8002816:	e094      	b.n	8002942 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002818:	4b51      	ldr	r3, [pc, #324]	@ (8002960 <HAL_GPIO_Init+0x2c4>)
 800281a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800281c:	4b50      	ldr	r3, [pc, #320]	@ (8002960 <HAL_GPIO_Init+0x2c4>)
 800281e:	2101      	movs	r1, #1
 8002820:	430a      	orrs	r2, r1
 8002822:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002824:	4a4f      	ldr	r2, [pc, #316]	@ (8002964 <HAL_GPIO_Init+0x2c8>)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3302      	adds	r3, #2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	589b      	ldr	r3, [r3, r2]
 8002830:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2203      	movs	r2, #3
 8002836:	4013      	ands	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	220f      	movs	r2, #15
 800283c:	409a      	lsls	r2, r3
 800283e:	0013      	movs	r3, r2
 8002840:	43da      	mvns	r2, r3
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	23a0      	movs	r3, #160	@ 0xa0
 800284c:	05db      	lsls	r3, r3, #23
 800284e:	429a      	cmp	r2, r3
 8002850:	d013      	beq.n	800287a <HAL_GPIO_Init+0x1de>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a44      	ldr	r2, [pc, #272]	@ (8002968 <HAL_GPIO_Init+0x2cc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00d      	beq.n	8002876 <HAL_GPIO_Init+0x1da>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a43      	ldr	r2, [pc, #268]	@ (800296c <HAL_GPIO_Init+0x2d0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <HAL_GPIO_Init+0x1d6>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a42      	ldr	r2, [pc, #264]	@ (8002970 <HAL_GPIO_Init+0x2d4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_GPIO_Init+0x1d2>
 800286a:	2305      	movs	r3, #5
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x1e0>
 800286e:	2306      	movs	r3, #6
 8002870:	e004      	b.n	800287c <HAL_GPIO_Init+0x1e0>
 8002872:	2302      	movs	r3, #2
 8002874:	e002      	b.n	800287c <HAL_GPIO_Init+0x1e0>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_GPIO_Init+0x1e0>
 800287a:	2300      	movs	r3, #0
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	2103      	movs	r1, #3
 8002880:	400a      	ands	r2, r1
 8002882:	0092      	lsls	r2, r2, #2
 8002884:	4093      	lsls	r3, r2
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800288c:	4935      	ldr	r1, [pc, #212]	@ (8002964 <HAL_GPIO_Init+0x2c8>)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	3302      	adds	r3, #2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289a:	4b36      	ldr	r3, [pc, #216]	@ (8002974 <HAL_GPIO_Init+0x2d8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	43da      	mvns	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	2380      	movs	r3, #128	@ 0x80
 80028b0:	035b      	lsls	r3, r3, #13
 80028b2:	4013      	ands	r3, r2
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028be:	4b2d      	ldr	r3, [pc, #180]	@ (8002974 <HAL_GPIO_Init+0x2d8>)
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80028c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002974 <HAL_GPIO_Init+0x2d8>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	43da      	mvns	r2, r3
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	039b      	lsls	r3, r3, #14
 80028dc:	4013      	ands	r3, r2
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028e8:	4b22      	ldr	r3, [pc, #136]	@ (8002974 <HAL_GPIO_Init+0x2d8>)
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80028ee:	4b21      	ldr	r3, [pc, #132]	@ (8002974 <HAL_GPIO_Init+0x2d8>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	43da      	mvns	r2, r3
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	2380      	movs	r3, #128	@ 0x80
 8002904:	029b      	lsls	r3, r3, #10
 8002906:	4013      	ands	r3, r2
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002912:	4b18      	ldr	r3, [pc, #96]	@ (8002974 <HAL_GPIO_Init+0x2d8>)
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002918:	4b16      	ldr	r3, [pc, #88]	@ (8002974 <HAL_GPIO_Init+0x2d8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	43da      	mvns	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	2380      	movs	r3, #128	@ 0x80
 800292e:	025b      	lsls	r3, r3, #9
 8002930:	4013      	ands	r3, r2
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800293c:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <HAL_GPIO_Init+0x2d8>)
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3301      	adds	r3, #1
 8002946:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	40da      	lsrs	r2, r3
 8002950:	1e13      	subs	r3, r2, #0
 8002952:	d000      	beq.n	8002956 <HAL_GPIO_Init+0x2ba>
 8002954:	e6ae      	b.n	80026b4 <HAL_GPIO_Init+0x18>
  }
}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b006      	add	sp, #24
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	40010000 	.word	0x40010000
 8002968:	50000400 	.word	0x50000400
 800296c:	50000800 	.word	0x50000800
 8002970:	50001c00 	.word	0x50001c00
 8002974:	40010400 	.word	0x40010400

08002978 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	0008      	movs	r0, r1
 8002982:	0011      	movs	r1, r2
 8002984:	1cbb      	adds	r3, r7, #2
 8002986:	1c02      	adds	r2, r0, #0
 8002988:	801a      	strh	r2, [r3, #0]
 800298a:	1c7b      	adds	r3, r7, #1
 800298c:	1c0a      	adds	r2, r1, #0
 800298e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002990:	1c7b      	adds	r3, r7, #1
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002998:	1cbb      	adds	r3, r7, #2
 800299a:	881a      	ldrh	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80029a0:	e003      	b.n	80029aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80029a2:	1cbb      	adds	r3, r7, #2
 80029a4:	881a      	ldrh	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029aa:	46c0      	nop			@ (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b002      	add	sp, #8
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b8:	4b04      	ldr	r3, [pc, #16]	@ (80029cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b03      	ldr	r3, [pc, #12]	@ (80029cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80029be:	2180      	movs	r1, #128	@ 0x80
 80029c0:	0049      	lsls	r1, r1, #1
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40007000 	.word	0x40007000

080029d0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <HAL_PWR_EnableWakeUpPin+0x1c>)
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <HAL_PWR_EnableWakeUpPin+0x1c>)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
}
 80029e4:	46c0      	nop			@ (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40007000 	.word	0x40007000

080029f0 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2  
  *           @arg PWR_WAKEUP_PIN3  for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 80029f8:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_PWR_DisableWakeUpPin+0x20>)
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	4b03      	ldr	r3, [pc, #12]	@ (8002a10 <HAL_PWR_DisableWakeUpPin+0x20>)
 8002a02:	400a      	ands	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
}
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b002      	add	sp, #8
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	40007000 	.word	0x40007000

08002a14 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002a18:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8002a1e:	2102      	movs	r1, #2
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002a2a:	2104      	movs	r1, #4
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002a30:	bf30      	wfi
}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b08a      	sub	sp, #40	@ 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f000 fb6c 	bl	800312c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a54:	4bc8      	ldr	r3, [pc, #800]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	220c      	movs	r2, #12
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a5e:	4bc6      	ldr	r3, [pc, #792]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	2380      	movs	r3, #128	@ 0x80
 8002a64:	025b      	lsls	r3, r3, #9
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4013      	ands	r3, r2
 8002a72:	d100      	bne.n	8002a76 <HAL_RCC_OscConfig+0x36>
 8002a74:	e07d      	b.n	8002b72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d007      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d112      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x68>
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	025b      	lsls	r3, r3, #9
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d10d      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	4bba      	ldr	r3, [pc, #744]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	029b      	lsls	r3, r3, #10
 8002a94:	4013      	ands	r3, r2
 8002a96:	d100      	bne.n	8002a9a <HAL_RCC_OscConfig+0x5a>
 8002a98:	e06a      	b.n	8002b70 <HAL_RCC_OscConfig+0x130>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d166      	bne.n	8002b70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f000 fb42 	bl	800312c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	2380      	movs	r3, #128	@ 0x80
 8002aae:	025b      	lsls	r3, r3, #9
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x84>
 8002ab4:	4bb0      	ldr	r3, [pc, #704]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4baf      	ldr	r3, [pc, #700]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002aba:	2180      	movs	r1, #128	@ 0x80
 8002abc:	0249      	lsls	r1, r1, #9
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e027      	b.n	8002b14 <HAL_RCC_OscConfig+0xd4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	23a0      	movs	r3, #160	@ 0xa0
 8002aca:	02db      	lsls	r3, r3, #11
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d10e      	bne.n	8002aee <HAL_RCC_OscConfig+0xae>
 8002ad0:	4ba9      	ldr	r3, [pc, #676]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4ba8      	ldr	r3, [pc, #672]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002ad6:	2180      	movs	r1, #128	@ 0x80
 8002ad8:	02c9      	lsls	r1, r1, #11
 8002ada:	430a      	orrs	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	4ba6      	ldr	r3, [pc, #664]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4ba5      	ldr	r3, [pc, #660]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002ae4:	2180      	movs	r1, #128	@ 0x80
 8002ae6:	0249      	lsls	r1, r1, #9
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	e012      	b.n	8002b14 <HAL_RCC_OscConfig+0xd4>
 8002aee:	4ba2      	ldr	r3, [pc, #648]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4ba1      	ldr	r3, [pc, #644]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002af4:	49a1      	ldr	r1, [pc, #644]	@ (8002d7c <HAL_RCC_OscConfig+0x33c>)
 8002af6:	400a      	ands	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	4b9f      	ldr	r3, [pc, #636]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	025b      	lsls	r3, r3, #9
 8002b02:	4013      	ands	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4b9b      	ldr	r3, [pc, #620]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b9a      	ldr	r3, [pc, #616]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b0e:	499c      	ldr	r1, [pc, #624]	@ (8002d80 <HAL_RCC_OscConfig+0x340>)
 8002b10:	400a      	ands	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d014      	beq.n	8002b46 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7ff f8ac 	bl	8001c78 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b26:	f7ff f8a7 	bl	8001c78 <HAL_GetTick>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b64      	cmp	r3, #100	@ 0x64
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e2f9      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b38:	4b8f      	ldr	r3, [pc, #572]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	029b      	lsls	r3, r3, #10
 8002b40:	4013      	ands	r3, r2
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0xe6>
 8002b44:	e015      	b.n	8002b72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7ff f897 	bl	8001c78 <HAL_GetTick>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b50:	f7ff f892 	bl	8001c78 <HAL_GetTick>
 8002b54:	0002      	movs	r2, r0
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	@ 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e2e4      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b62:	4b85      	ldr	r3, [pc, #532]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	029b      	lsls	r3, r3, #10
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x110>
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2202      	movs	r2, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d100      	bne.n	8002b7e <HAL_RCC_OscConfig+0x13e>
 8002b7c:	e099      	b.n	8002cb2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	2220      	movs	r2, #32
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d009      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002b8c:	4b7a      	ldr	r3, [pc, #488]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b79      	ldr	r3, [pc, #484]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b92:	2120      	movs	r1, #32
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	4393      	bics	r3, r2
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d005      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d13e      	bne.n	8002c2a <HAL_RCC_OscConfig+0x1ea>
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d13b      	bne.n	8002c2a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002bb2:	4b71      	ldr	r3, [pc, #452]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x186>
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e2b2      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc6:	4b6c      	ldr	r3, [pc, #432]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4a6e      	ldr	r2, [pc, #440]	@ (8002d84 <HAL_RCC_OscConfig+0x344>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	021a      	lsls	r2, r3, #8
 8002bd6:	4b68      	ldr	r3, [pc, #416]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002bdc:	4b66      	ldr	r3, [pc, #408]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2209      	movs	r2, #9
 8002be2:	4393      	bics	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	4b64      	ldr	r3, [pc, #400]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bee:	f000 fbeb 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8002bf2:	0001      	movs	r1, r0
 8002bf4:	4b60      	ldr	r3, [pc, #384]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	4a62      	ldr	r2, [pc, #392]	@ (8002d88 <HAL_RCC_OscConfig+0x348>)
 8002c00:	5cd3      	ldrb	r3, [r2, r3]
 8002c02:	000a      	movs	r2, r1
 8002c04:	40da      	lsrs	r2, r3
 8002c06:	4b61      	ldr	r3, [pc, #388]	@ (8002d8c <HAL_RCC_OscConfig+0x34c>)
 8002c08:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002c0a:	4b61      	ldr	r3, [pc, #388]	@ (8002d90 <HAL_RCC_OscConfig+0x350>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2513      	movs	r5, #19
 8002c10:	197c      	adds	r4, r7, r5
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7fe ffea 	bl	8001bec <HAL_InitTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002c1c:	197b      	adds	r3, r7, r5
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d046      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002c24:	197b      	adds	r3, r7, r5
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	e280      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d027      	beq.n	8002c80 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c30:	4b51      	ldr	r3, [pc, #324]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2209      	movs	r2, #9
 8002c36:	4393      	bics	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7ff f819 	bl	8001c78 <HAL_GetTick>
 8002c46:	0003      	movs	r3, r0
 8002c48:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4c:	f7ff f814 	bl	8001c78 <HAL_GetTick>
 8002c50:	0002      	movs	r2, r0
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e266      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c5e:	4b46      	ldr	r3, [pc, #280]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2204      	movs	r2, #4
 8002c64:	4013      	ands	r3, r2
 8002c66:	d0f1      	beq.n	8002c4c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c68:	4b43      	ldr	r3, [pc, #268]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	4a45      	ldr	r2, [pc, #276]	@ (8002d84 <HAL_RCC_OscConfig+0x344>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	021a      	lsls	r2, r3, #8
 8002c78:	4b3f      	ldr	r3, [pc, #252]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	e018      	b.n	8002cb2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c80:	4b3d      	ldr	r3, [pc, #244]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b3c      	ldr	r3, [pc, #240]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c86:	2101      	movs	r1, #1
 8002c88:	438a      	bics	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fff4 	bl	8001c78 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c96:	f7fe ffef 	bl	8001c78 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e241      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ca8:	4b33      	ldr	r3, [pc, #204]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2204      	movs	r2, #4
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d1f1      	bne.n	8002c96 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d100      	bne.n	8002cbe <HAL_RCC_OscConfig+0x27e>
 8002cbc:	e0a1      	b.n	8002e02 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d140      	bne.n	8002d46 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	2380      	movs	r3, #128	@ 0x80
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_OscConfig+0x29c>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e227      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cdc:	4b26      	ldr	r3, [pc, #152]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d94 <HAL_RCC_OscConfig+0x354>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	4b23      	ldr	r3, [pc, #140]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cf0:	4b21      	ldr	r3, [pc, #132]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	021b      	lsls	r3, r3, #8
 8002cf6:	0a19      	lsrs	r1, r3, #8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	061a      	lsls	r2, r3, #24
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	0b5b      	lsrs	r3, r3, #13
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	2280      	movs	r2, #128	@ 0x80
 8002d0e:	0212      	lsls	r2, r2, #8
 8002d10:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d12:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	210f      	movs	r1, #15
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	491a      	ldr	r1, [pc, #104]	@ (8002d88 <HAL_RCC_OscConfig+0x348>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d22:	4b1a      	ldr	r3, [pc, #104]	@ (8002d8c <HAL_RCC_OscConfig+0x34c>)
 8002d24:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002d26:	4b1a      	ldr	r3, [pc, #104]	@ (8002d90 <HAL_RCC_OscConfig+0x350>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2513      	movs	r5, #19
 8002d2c:	197c      	adds	r4, r7, r5
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7fe ff5c 	bl	8001bec <HAL_InitTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002d38:	197b      	adds	r3, r7, r5
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d060      	beq.n	8002e02 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002d40:	197b      	adds	r3, r7, r5
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	e1f2      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d03f      	beq.n	8002dce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002d54:	2180      	movs	r1, #128	@ 0x80
 8002d56:	0049      	lsls	r1, r1, #1
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe ff8c 	bl	8001c78 <HAL_GetTick>
 8002d60:	0003      	movs	r3, r0
 8002d62:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d64:	e018      	b.n	8002d98 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d66:	f7fe ff87 	bl	8001c78 <HAL_GetTick>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d911      	bls.n	8002d98 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1d9      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	fffeffff 	.word	0xfffeffff
 8002d80:	fffbffff 	.word	0xfffbffff
 8002d84:	ffffe0ff 	.word	0xffffe0ff
 8002d88:	080054cc 	.word	0x080054cc
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	20000004 	.word	0x20000004
 8002d94:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d98:	4bc9      	ldr	r3, [pc, #804]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4013      	ands	r3, r2
 8002da2:	d0e0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da4:	4bc6      	ldr	r3, [pc, #792]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4ac6      	ldr	r2, [pc, #792]	@ (80030c4 <HAL_RCC_OscConfig+0x684>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	0019      	movs	r1, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1a      	ldr	r2, [r3, #32]
 8002db2:	4bc3      	ldr	r3, [pc, #780]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002db4:	430a      	orrs	r2, r1
 8002db6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002db8:	4bc1      	ldr	r3, [pc, #772]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	0a19      	lsrs	r1, r3, #8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	061a      	lsls	r2, r3, #24
 8002dc6:	4bbe      	ldr	r3, [pc, #760]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	e019      	b.n	8002e02 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dce:	4bbc      	ldr	r3, [pc, #752]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4bbb      	ldr	r3, [pc, #748]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002dd4:	49bc      	ldr	r1, [pc, #752]	@ (80030c8 <HAL_RCC_OscConfig+0x688>)
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe ff4d 	bl	8001c78 <HAL_GetTick>
 8002dde:	0003      	movs	r3, r0
 8002de0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002de4:	f7fe ff48 	bl	8001c78 <HAL_GetTick>
 8002de8:	0002      	movs	r2, r0
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e19a      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002df6:	4bb2      	ldr	r3, [pc, #712]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	2380      	movs	r3, #128	@ 0x80
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2208      	movs	r2, #8
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d036      	beq.n	8002e7a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d019      	beq.n	8002e48 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e14:	4baa      	ldr	r3, [pc, #680]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002e16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e18:	4ba9      	ldr	r3, [pc, #676]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e20:	f7fe ff2a 	bl	8001c78 <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2a:	f7fe ff25 	bl	8001c78 <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e177      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e3c:	4ba0      	ldr	r3, [pc, #640]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e40:	2202      	movs	r2, #2
 8002e42:	4013      	ands	r3, r2
 8002e44:	d0f1      	beq.n	8002e2a <HAL_RCC_OscConfig+0x3ea>
 8002e46:	e018      	b.n	8002e7a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e48:	4b9d      	ldr	r3, [pc, #628]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002e4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e4c:	4b9c      	ldr	r3, [pc, #624]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002e4e:	2101      	movs	r1, #1
 8002e50:	438a      	bics	r2, r1
 8002e52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e54:	f7fe ff10 	bl	8001c78 <HAL_GetTick>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5e:	f7fe ff0b 	bl	8001c78 <HAL_GetTick>
 8002e62:	0002      	movs	r2, r0
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e15d      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e70:	4b93      	ldr	r3, [pc, #588]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e74:	2202      	movs	r2, #2
 8002e76:	4013      	ands	r3, r2
 8002e78:	d1f1      	bne.n	8002e5e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	4013      	ands	r3, r2
 8002e82:	d100      	bne.n	8002e86 <HAL_RCC_OscConfig+0x446>
 8002e84:	e0ae      	b.n	8002fe4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e86:	2023      	movs	r0, #35	@ 0x23
 8002e88:	183b      	adds	r3, r7, r0
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8e:	4b8c      	ldr	r3, [pc, #560]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	055b      	lsls	r3, r3, #21
 8002e96:	4013      	ands	r3, r2
 8002e98:	d109      	bne.n	8002eae <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	4b89      	ldr	r3, [pc, #548]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e9e:	4b88      	ldr	r3, [pc, #544]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002ea0:	2180      	movs	r1, #128	@ 0x80
 8002ea2:	0549      	lsls	r1, r1, #21
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002ea8:	183b      	adds	r3, r7, r0
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eae:	4b87      	ldr	r3, [pc, #540]	@ (80030cc <HAL_RCC_OscConfig+0x68c>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d11a      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eba:	4b84      	ldr	r3, [pc, #528]	@ (80030cc <HAL_RCC_OscConfig+0x68c>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4b83      	ldr	r3, [pc, #524]	@ (80030cc <HAL_RCC_OscConfig+0x68c>)
 8002ec0:	2180      	movs	r1, #128	@ 0x80
 8002ec2:	0049      	lsls	r1, r1, #1
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fed6 	bl	8001c78 <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed2:	f7fe fed1 	bl	8001c78 <HAL_GetTick>
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b64      	cmp	r3, #100	@ 0x64
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e123      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	4b79      	ldr	r3, [pc, #484]	@ (80030cc <HAL_RCC_OscConfig+0x68c>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	2380      	movs	r3, #128	@ 0x80
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4013      	ands	r3, r2
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_OscConfig+0x4cc>
 8002efc:	4b70      	ldr	r3, [pc, #448]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002efe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f00:	4b6f      	ldr	r3, [pc, #444]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f02:	2180      	movs	r1, #128	@ 0x80
 8002f04:	0049      	lsls	r1, r1, #1
 8002f06:	430a      	orrs	r2, r1
 8002f08:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f0a:	e031      	b.n	8002f70 <HAL_RCC_OscConfig+0x530>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10c      	bne.n	8002f2e <HAL_RCC_OscConfig+0x4ee>
 8002f14:	4b6a      	ldr	r3, [pc, #424]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f18:	4b69      	ldr	r3, [pc, #420]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f1a:	496b      	ldr	r1, [pc, #428]	@ (80030c8 <HAL_RCC_OscConfig+0x688>)
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f20:	4b67      	ldr	r3, [pc, #412]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f24:	4b66      	ldr	r3, [pc, #408]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f26:	496a      	ldr	r1, [pc, #424]	@ (80030d0 <HAL_RCC_OscConfig+0x690>)
 8002f28:	400a      	ands	r2, r1
 8002f2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f2c:	e020      	b.n	8002f70 <HAL_RCC_OscConfig+0x530>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	23a0      	movs	r3, #160	@ 0xa0
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d10e      	bne.n	8002f58 <HAL_RCC_OscConfig+0x518>
 8002f3a:	4b61      	ldr	r3, [pc, #388]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f3e:	4b60      	ldr	r3, [pc, #384]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f40:	2180      	movs	r1, #128	@ 0x80
 8002f42:	00c9      	lsls	r1, r1, #3
 8002f44:	430a      	orrs	r2, r1
 8002f46:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f48:	4b5d      	ldr	r3, [pc, #372]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f4e:	2180      	movs	r1, #128	@ 0x80
 8002f50:	0049      	lsls	r1, r1, #1
 8002f52:	430a      	orrs	r2, r1
 8002f54:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f56:	e00b      	b.n	8002f70 <HAL_RCC_OscConfig+0x530>
 8002f58:	4b59      	ldr	r3, [pc, #356]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f5c:	4b58      	ldr	r3, [pc, #352]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f5e:	495a      	ldr	r1, [pc, #360]	@ (80030c8 <HAL_RCC_OscConfig+0x688>)
 8002f60:	400a      	ands	r2, r1
 8002f62:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f64:	4b56      	ldr	r3, [pc, #344]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f68:	4b55      	ldr	r3, [pc, #340]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f6a:	4959      	ldr	r1, [pc, #356]	@ (80030d0 <HAL_RCC_OscConfig+0x690>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d015      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f78:	f7fe fe7e 	bl	8001c78 <HAL_GetTick>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f80:	e009      	b.n	8002f96 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fe fe79 	bl	8001c78 <HAL_GetTick>
 8002f86:	0002      	movs	r2, r0
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	4a51      	ldr	r2, [pc, #324]	@ (80030d4 <HAL_RCC_OscConfig+0x694>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e0ca      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f96:	4b4a      	ldr	r3, [pc, #296]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d0ef      	beq.n	8002f82 <HAL_RCC_OscConfig+0x542>
 8002fa2:	e014      	b.n	8002fce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa4:	f7fe fe68 	bl	8001c78 <HAL_GetTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fac:	e009      	b.n	8002fc2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fe fe63 	bl	8001c78 <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	4a46      	ldr	r2, [pc, #280]	@ (80030d4 <HAL_RCC_OscConfig+0x694>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e0b4      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fc2:	4b3f      	ldr	r3, [pc, #252]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002fc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d1ef      	bne.n	8002fae <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fce:	2323      	movs	r3, #35	@ 0x23
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d105      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd8:	4b39      	ldr	r3, [pc, #228]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fdc:	4b38      	ldr	r3, [pc, #224]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002fde:	493e      	ldr	r1, [pc, #248]	@ (80030d8 <HAL_RCC_OscConfig+0x698>)
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d100      	bne.n	8002fee <HAL_RCC_OscConfig+0x5ae>
 8002fec:	e09d      	b.n	800312a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d100      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x5b6>
 8002ff4:	e076      	b.n	80030e4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d145      	bne.n	800308a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b30      	ldr	r3, [pc, #192]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4b2f      	ldr	r3, [pc, #188]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8003004:	4935      	ldr	r1, [pc, #212]	@ (80030dc <HAL_RCC_OscConfig+0x69c>)
 8003006:	400a      	ands	r2, r1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fe fe35 	bl	8001c78 <HAL_GetTick>
 800300e:	0003      	movs	r3, r0
 8003010:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fe30 	bl	8001c78 <HAL_GetTick>
 8003018:	0002      	movs	r2, r0
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e082      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003026:	4b26      	ldr	r3, [pc, #152]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	2380      	movs	r3, #128	@ 0x80
 800302c:	049b      	lsls	r3, r3, #18
 800302e:	4013      	ands	r3, r2
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003032:	4b23      	ldr	r3, [pc, #140]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4a2a      	ldr	r2, [pc, #168]	@ (80030e0 <HAL_RCC_OscConfig+0x6a0>)
 8003038:	4013      	ands	r3, r2
 800303a:	0019      	movs	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	431a      	orrs	r2, r3
 800304c:	4b1c      	ldr	r3, [pc, #112]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 800304e:	430a      	orrs	r2, r1
 8003050:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003052:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b1a      	ldr	r3, [pc, #104]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8003058:	2180      	movs	r1, #128	@ 0x80
 800305a:	0449      	lsls	r1, r1, #17
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe fe0a 	bl	8001c78 <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306a:	f7fe fe05 	bl	8001c78 <HAL_GetTick>
 800306e:	0002      	movs	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e057      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800307c:	4b10      	ldr	r3, [pc, #64]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	2380      	movs	r3, #128	@ 0x80
 8003082:	049b      	lsls	r3, r3, #18
 8003084:	4013      	ands	r3, r2
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x62a>
 8003088:	e04f      	b.n	800312a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308a:	4b0d      	ldr	r3, [pc, #52]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 8003090:	4912      	ldr	r1, [pc, #72]	@ (80030dc <HAL_RCC_OscConfig+0x69c>)
 8003092:	400a      	ands	r2, r1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fe fdef 	bl	8001c78 <HAL_GetTick>
 800309a:	0003      	movs	r3, r0
 800309c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fe fdea 	bl	8001c78 <HAL_GetTick>
 80030a4:	0002      	movs	r2, r0
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e03c      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030b2:	4b03      	ldr	r3, [pc, #12]	@ (80030c0 <HAL_RCC_OscConfig+0x680>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	2380      	movs	r3, #128	@ 0x80
 80030b8:	049b      	lsls	r3, r3, #18
 80030ba:	4013      	ands	r3, r2
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x660>
 80030be:	e034      	b.n	800312a <HAL_RCC_OscConfig+0x6ea>
 80030c0:	40021000 	.word	0x40021000
 80030c4:	ffff1fff 	.word	0xffff1fff
 80030c8:	fffffeff 	.word	0xfffffeff
 80030cc:	40007000 	.word	0x40007000
 80030d0:	fffffbff 	.word	0xfffffbff
 80030d4:	00001388 	.word	0x00001388
 80030d8:	efffffff 	.word	0xefffffff
 80030dc:	feffffff 	.word	0xfeffffff
 80030e0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e01d      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030f0:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <HAL_RCC_OscConfig+0x6f4>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	2380      	movs	r3, #128	@ 0x80
 80030fa:	025b      	lsls	r3, r3, #9
 80030fc:	401a      	ands	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003102:	429a      	cmp	r2, r3
 8003104:	d10f      	bne.n	8003126 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	23f0      	movs	r3, #240	@ 0xf0
 800310a:	039b      	lsls	r3, r3, #14
 800310c:	401a      	ands	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d107      	bne.n	8003126 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	23c0      	movs	r3, #192	@ 0xc0
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	401a      	ands	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d001      	beq.n	800312a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b00a      	add	sp, #40	@ 0x28
 8003132:	bdb0      	pop	{r4, r5, r7, pc}
 8003134:	40021000 	.word	0x40021000

08003138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b5b0      	push	{r4, r5, r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e128      	b.n	800339e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b96      	ldr	r3, [pc, #600]	@ (80033a8 <HAL_RCC_ClockConfig+0x270>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2201      	movs	r2, #1
 8003152:	4013      	ands	r3, r2
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d91e      	bls.n	8003198 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b93      	ldr	r3, [pc, #588]	@ (80033a8 <HAL_RCC_ClockConfig+0x270>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2201      	movs	r2, #1
 8003160:	4393      	bics	r3, r2
 8003162:	0019      	movs	r1, r3
 8003164:	4b90      	ldr	r3, [pc, #576]	@ (80033a8 <HAL_RCC_ClockConfig+0x270>)
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800316c:	f7fe fd84 	bl	8001c78 <HAL_GetTick>
 8003170:	0003      	movs	r3, r0
 8003172:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003174:	e009      	b.n	800318a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003176:	f7fe fd7f 	bl	8001c78 <HAL_GetTick>
 800317a:	0002      	movs	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	4a8a      	ldr	r2, [pc, #552]	@ (80033ac <HAL_RCC_ClockConfig+0x274>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e109      	b.n	800339e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b87      	ldr	r3, [pc, #540]	@ (80033a8 <HAL_RCC_ClockConfig+0x270>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2201      	movs	r2, #1
 8003190:	4013      	ands	r3, r2
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d1ee      	bne.n	8003176 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2202      	movs	r2, #2
 800319e:	4013      	ands	r3, r2
 80031a0:	d009      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a2:	4b83      	ldr	r3, [pc, #524]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	22f0      	movs	r2, #240	@ 0xf0
 80031a8:	4393      	bics	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	4b7f      	ldr	r3, [pc, #508]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 80031b2:	430a      	orrs	r2, r1
 80031b4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2201      	movs	r2, #1
 80031bc:	4013      	ands	r3, r2
 80031be:	d100      	bne.n	80031c2 <HAL_RCC_ClockConfig+0x8a>
 80031c0:	e089      	b.n	80032d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031ca:	4b79      	ldr	r3, [pc, #484]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	029b      	lsls	r3, r3, #10
 80031d2:	4013      	ands	r3, r2
 80031d4:	d120      	bne.n	8003218 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0e1      	b.n	800339e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031e2:	4b73      	ldr	r3, [pc, #460]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	2380      	movs	r3, #128	@ 0x80
 80031e8:	049b      	lsls	r3, r3, #18
 80031ea:	4013      	ands	r3, r2
 80031ec:	d114      	bne.n	8003218 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0d5      	b.n	800339e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031fa:	4b6d      	ldr	r3, [pc, #436]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2204      	movs	r2, #4
 8003200:	4013      	ands	r3, r2
 8003202:	d109      	bne.n	8003218 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0ca      	b.n	800339e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003208:	4b69      	ldr	r3, [pc, #420]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4013      	ands	r3, r2
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0c2      	b.n	800339e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003218:	4b65      	ldr	r3, [pc, #404]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2203      	movs	r2, #3
 800321e:	4393      	bics	r3, r2
 8003220:	0019      	movs	r1, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4b62      	ldr	r3, [pc, #392]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 8003228:	430a      	orrs	r2, r1
 800322a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800322c:	f7fe fd24 	bl	8001c78 <HAL_GetTick>
 8003230:	0003      	movs	r3, r0
 8003232:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d111      	bne.n	8003260 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800323c:	e009      	b.n	8003252 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323e:	f7fe fd1b 	bl	8001c78 <HAL_GetTick>
 8003242:	0002      	movs	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	4a58      	ldr	r2, [pc, #352]	@ (80033ac <HAL_RCC_ClockConfig+0x274>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e0a5      	b.n	800339e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003252:	4b57      	ldr	r3, [pc, #348]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	220c      	movs	r2, #12
 8003258:	4013      	ands	r3, r2
 800325a:	2b08      	cmp	r3, #8
 800325c:	d1ef      	bne.n	800323e <HAL_RCC_ClockConfig+0x106>
 800325e:	e03a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d111      	bne.n	800328c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003268:	e009      	b.n	800327e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800326a:	f7fe fd05 	bl	8001c78 <HAL_GetTick>
 800326e:	0002      	movs	r2, r0
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	4a4d      	ldr	r2, [pc, #308]	@ (80033ac <HAL_RCC_ClockConfig+0x274>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e08f      	b.n	800339e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800327e:	4b4c      	ldr	r3, [pc, #304]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	220c      	movs	r2, #12
 8003284:	4013      	ands	r3, r2
 8003286:	2b0c      	cmp	r3, #12
 8003288:	d1ef      	bne.n	800326a <HAL_RCC_ClockConfig+0x132>
 800328a:	e024      	b.n	80032d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d11b      	bne.n	80032cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003294:	e009      	b.n	80032aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003296:	f7fe fcef 	bl	8001c78 <HAL_GetTick>
 800329a:	0002      	movs	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	4a42      	ldr	r2, [pc, #264]	@ (80033ac <HAL_RCC_ClockConfig+0x274>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e079      	b.n	800339e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032aa:	4b41      	ldr	r3, [pc, #260]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	220c      	movs	r2, #12
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d1ef      	bne.n	8003296 <HAL_RCC_ClockConfig+0x15e>
 80032b6:	e00e      	b.n	80032d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b8:	f7fe fcde 	bl	8001c78 <HAL_GetTick>
 80032bc:	0002      	movs	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	4a3a      	ldr	r2, [pc, #232]	@ (80033ac <HAL_RCC_ClockConfig+0x274>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e068      	b.n	800339e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80032cc:	4b38      	ldr	r3, [pc, #224]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	220c      	movs	r2, #12
 80032d2:	4013      	ands	r3, r2
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d6:	4b34      	ldr	r3, [pc, #208]	@ (80033a8 <HAL_RCC_ClockConfig+0x270>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2201      	movs	r2, #1
 80032dc:	4013      	ands	r3, r2
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d21e      	bcs.n	8003322 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e4:	4b30      	ldr	r3, [pc, #192]	@ (80033a8 <HAL_RCC_ClockConfig+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2201      	movs	r2, #1
 80032ea:	4393      	bics	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	4b2e      	ldr	r3, [pc, #184]	@ (80033a8 <HAL_RCC_ClockConfig+0x270>)
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032f6:	f7fe fcbf 	bl	8001c78 <HAL_GetTick>
 80032fa:	0003      	movs	r3, r0
 80032fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	e009      	b.n	8003314 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003300:	f7fe fcba 	bl	8001c78 <HAL_GetTick>
 8003304:	0002      	movs	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	4a28      	ldr	r2, [pc, #160]	@ (80033ac <HAL_RCC_ClockConfig+0x274>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e044      	b.n	800339e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003314:	4b24      	ldr	r3, [pc, #144]	@ (80033a8 <HAL_RCC_ClockConfig+0x270>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2201      	movs	r2, #1
 800331a:	4013      	ands	r3, r2
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d1ee      	bne.n	8003300 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2204      	movs	r2, #4
 8003328:	4013      	ands	r3, r2
 800332a:	d009      	beq.n	8003340 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800332c:	4b20      	ldr	r3, [pc, #128]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a20      	ldr	r2, [pc, #128]	@ (80033b4 <HAL_RCC_ClockConfig+0x27c>)
 8003332:	4013      	ands	r3, r2
 8003334:	0019      	movs	r1, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 800333c:	430a      	orrs	r2, r1
 800333e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2208      	movs	r2, #8
 8003346:	4013      	ands	r3, r2
 8003348:	d00a      	beq.n	8003360 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800334a:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	4a1a      	ldr	r2, [pc, #104]	@ (80033b8 <HAL_RCC_ClockConfig+0x280>)
 8003350:	4013      	ands	r3, r2
 8003352:	0019      	movs	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	00da      	lsls	r2, r3, #3
 800335a:	4b15      	ldr	r3, [pc, #84]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 800335c:	430a      	orrs	r2, r1
 800335e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003360:	f000 f832 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8003364:	0001      	movs	r1, r0
 8003366:	4b12      	ldr	r3, [pc, #72]	@ (80033b0 <HAL_RCC_ClockConfig+0x278>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	220f      	movs	r2, #15
 800336e:	4013      	ands	r3, r2
 8003370:	4a12      	ldr	r2, [pc, #72]	@ (80033bc <HAL_RCC_ClockConfig+0x284>)
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	000a      	movs	r2, r1
 8003376:	40da      	lsrs	r2, r3
 8003378:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <HAL_RCC_ClockConfig+0x288>)
 800337a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800337c:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <HAL_RCC_ClockConfig+0x28c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	250b      	movs	r5, #11
 8003382:	197c      	adds	r4, r7, r5
 8003384:	0018      	movs	r0, r3
 8003386:	f7fe fc31 	bl	8001bec <HAL_InitTick>
 800338a:	0003      	movs	r3, r0
 800338c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800338e:	197b      	adds	r3, r7, r5
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003396:	197b      	adds	r3, r7, r5
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	e000      	b.n	800339e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b004      	add	sp, #16
 80033a4:	bdb0      	pop	{r4, r5, r7, pc}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	40022000 	.word	0x40022000
 80033ac:	00001388 	.word	0x00001388
 80033b0:	40021000 	.word	0x40021000
 80033b4:	fffff8ff 	.word	0xfffff8ff
 80033b8:	ffffc7ff 	.word	0xffffc7ff
 80033bc:	080054cc 	.word	0x080054cc
 80033c0:	20000000 	.word	0x20000000
 80033c4:	20000004 	.word	0x20000004

080033c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b08e      	sub	sp, #56	@ 0x38
 80033cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80033ce:	4b4c      	ldr	r3, [pc, #304]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x138>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033d6:	230c      	movs	r3, #12
 80033d8:	4013      	ands	r3, r2
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	d014      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x40>
 80033de:	d900      	bls.n	80033e2 <HAL_RCC_GetSysClockFreq+0x1a>
 80033e0:	e07b      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x112>
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d002      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x24>
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d00b      	beq.n	8003402 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ea:	e076      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80033ec:	4b44      	ldr	r3, [pc, #272]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x138>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2210      	movs	r2, #16
 80033f2:	4013      	ands	r3, r2
 80033f4:	d002      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80033f6:	4b43      	ldr	r3, [pc, #268]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x13c>)
 80033f8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80033fa:	e07c      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80033fc:	4b42      	ldr	r3, [pc, #264]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x140>)
 80033fe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003400:	e079      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003402:	4b42      	ldr	r3, [pc, #264]	@ (800350c <HAL_RCC_GetSysClockFreq+0x144>)
 8003404:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003406:	e076      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340a:	0c9a      	lsrs	r2, r3, #18
 800340c:	230f      	movs	r3, #15
 800340e:	401a      	ands	r2, r3
 8003410:	4b3f      	ldr	r3, [pc, #252]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x148>)
 8003412:	5c9b      	ldrb	r3, [r3, r2]
 8003414:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003418:	0d9a      	lsrs	r2, r3, #22
 800341a:	2303      	movs	r3, #3
 800341c:	4013      	ands	r3, r2
 800341e:	3301      	adds	r3, #1
 8003420:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003422:	4b37      	ldr	r3, [pc, #220]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x138>)
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	2380      	movs	r3, #128	@ 0x80
 8003428:	025b      	lsls	r3, r3, #9
 800342a:	4013      	ands	r3, r2
 800342c:	d01a      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800342e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	4a35      	ldr	r2, [pc, #212]	@ (800350c <HAL_RCC_GetSysClockFreq+0x144>)
 8003438:	2300      	movs	r3, #0
 800343a:	69b8      	ldr	r0, [r7, #24]
 800343c:	69f9      	ldr	r1, [r7, #28]
 800343e:	f7fc ff0f 	bl	8000260 <__aeabi_lmul>
 8003442:	0002      	movs	r2, r0
 8003444:	000b      	movs	r3, r1
 8003446:	0010      	movs	r0, r2
 8003448:	0019      	movs	r1, r3
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f7fc fee3 	bl	8000220 <__aeabi_uldivmod>
 800345a:	0002      	movs	r2, r0
 800345c:	000b      	movs	r3, r1
 800345e:	0013      	movs	r3, r2
 8003460:	637b      	str	r3, [r7, #52]	@ 0x34
 8003462:	e037      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003464:	4b26      	ldr	r3, [pc, #152]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x138>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2210      	movs	r2, #16
 800346a:	4013      	ands	r3, r2
 800346c:	d01a      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800346e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	4a23      	ldr	r2, [pc, #140]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003478:	2300      	movs	r3, #0
 800347a:	68b8      	ldr	r0, [r7, #8]
 800347c:	68f9      	ldr	r1, [r7, #12]
 800347e:	f7fc feef 	bl	8000260 <__aeabi_lmul>
 8003482:	0002      	movs	r2, r0
 8003484:	000b      	movs	r3, r1
 8003486:	0010      	movs	r0, r2
 8003488:	0019      	movs	r1, r3
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	2300      	movs	r3, #0
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f7fc fec3 	bl	8000220 <__aeabi_uldivmod>
 800349a:	0002      	movs	r2, r0
 800349c:	000b      	movs	r3, r1
 800349e:	0013      	movs	r3, r2
 80034a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80034a2:	e017      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a6:	0018      	movs	r0, r3
 80034a8:	2300      	movs	r3, #0
 80034aa:	0019      	movs	r1, r3
 80034ac:	4a16      	ldr	r2, [pc, #88]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x140>)
 80034ae:	2300      	movs	r3, #0
 80034b0:	f7fc fed6 	bl	8000260 <__aeabi_lmul>
 80034b4:	0002      	movs	r2, r0
 80034b6:	000b      	movs	r3, r1
 80034b8:	0010      	movs	r0, r2
 80034ba:	0019      	movs	r1, r3
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	001c      	movs	r4, r3
 80034c0:	2300      	movs	r3, #0
 80034c2:	001d      	movs	r5, r3
 80034c4:	0022      	movs	r2, r4
 80034c6:	002b      	movs	r3, r5
 80034c8:	f7fc feaa 	bl	8000220 <__aeabi_uldivmod>
 80034cc:	0002      	movs	r2, r0
 80034ce:	000b      	movs	r3, r1
 80034d0:	0013      	movs	r3, r2
 80034d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80034d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80034d8:	e00d      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80034da:	4b09      	ldr	r3, [pc, #36]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x138>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	0b5b      	lsrs	r3, r3, #13
 80034e0:	2207      	movs	r2, #7
 80034e2:	4013      	ands	r3, r2
 80034e4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	3301      	adds	r3, #1
 80034ea:	2280      	movs	r2, #128	@ 0x80
 80034ec:	0212      	lsls	r2, r2, #8
 80034ee:	409a      	lsls	r2, r3
 80034f0:	0013      	movs	r3, r2
 80034f2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80034f4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80034f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b00e      	add	sp, #56	@ 0x38
 80034fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	003d0900 	.word	0x003d0900
 8003508:	00f42400 	.word	0x00f42400
 800350c:	007a1200 	.word	0x007a1200
 8003510:	080054e4 	.word	0x080054e4

08003514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003518:	4b02      	ldr	r3, [pc, #8]	@ (8003524 <HAL_RCC_GetHCLKFreq+0x10>)
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	20000000 	.word	0x20000000

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800352c:	f7ff fff2 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 8003530:	0001      	movs	r1, r0
 8003532:	4b06      	ldr	r3, [pc, #24]	@ (800354c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	0a1b      	lsrs	r3, r3, #8
 8003538:	2207      	movs	r2, #7
 800353a:	4013      	ands	r3, r2
 800353c:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800353e:	5cd3      	ldrb	r3, [r2, r3]
 8003540:	40d9      	lsrs	r1, r3
 8003542:	000b      	movs	r3, r1
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)
 800354c:	40021000 	.word	0x40021000
 8003550:	080054dc 	.word	0x080054dc

08003554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003558:	f7ff ffdc 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 800355c:	0001      	movs	r1, r0
 800355e:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	0adb      	lsrs	r3, r3, #11
 8003564:	2207      	movs	r2, #7
 8003566:	4013      	ands	r3, r2
 8003568:	4a04      	ldr	r2, [pc, #16]	@ (800357c <HAL_RCC_GetPCLK2Freq+0x28>)
 800356a:	5cd3      	ldrb	r3, [r2, r3]
 800356c:	40d9      	lsrs	r1, r3
 800356e:	000b      	movs	r3, r1
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	40021000 	.word	0x40021000
 800357c:	080054dc 	.word	0x080054dc

08003580 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003588:	2017      	movs	r0, #23
 800358a:	183b      	adds	r3, r7, r0
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2220      	movs	r2, #32
 8003596:	4013      	ands	r3, r2
 8003598:	d100      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800359a:	e0c7      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359c:	4b84      	ldr	r3, [pc, #528]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800359e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	055b      	lsls	r3, r3, #21
 80035a4:	4013      	ands	r3, r2
 80035a6:	d109      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a8:	4b81      	ldr	r3, [pc, #516]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ac:	4b80      	ldr	r3, [pc, #512]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035ae:	2180      	movs	r1, #128	@ 0x80
 80035b0:	0549      	lsls	r1, r1, #21
 80035b2:	430a      	orrs	r2, r1
 80035b4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80035b6:	183b      	adds	r3, r7, r0
 80035b8:	2201      	movs	r2, #1
 80035ba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	4b7d      	ldr	r3, [pc, #500]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2380      	movs	r3, #128	@ 0x80
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4013      	ands	r3, r2
 80035c6:	d11a      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c8:	4b7a      	ldr	r3, [pc, #488]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b79      	ldr	r3, [pc, #484]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80035ce:	2180      	movs	r1, #128	@ 0x80
 80035d0:	0049      	lsls	r1, r1, #1
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d6:	f7fe fb4f 	bl	8001c78 <HAL_GetTick>
 80035da:	0003      	movs	r3, r0
 80035dc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	e008      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e0:	f7fe fb4a 	bl	8001c78 <HAL_GetTick>
 80035e4:	0002      	movs	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	@ 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e0d9      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f2:	4b70      	ldr	r3, [pc, #448]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	2380      	movs	r3, #128	@ 0x80
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4013      	ands	r3, r2
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80035fe:	4b6c      	ldr	r3, [pc, #432]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	23c0      	movs	r3, #192	@ 0xc0
 8003604:	039b      	lsls	r3, r3, #14
 8003606:	4013      	ands	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	23c0      	movs	r3, #192	@ 0xc0
 8003610:	039b      	lsls	r3, r3, #14
 8003612:	4013      	ands	r3, r2
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	429a      	cmp	r2, r3
 8003618:	d013      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	23c0      	movs	r3, #192	@ 0xc0
 8003620:	029b      	lsls	r3, r3, #10
 8003622:	401a      	ands	r2, r3
 8003624:	23c0      	movs	r3, #192	@ 0xc0
 8003626:	029b      	lsls	r3, r3, #10
 8003628:	429a      	cmp	r2, r3
 800362a:	d10a      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800362c:	4b60      	ldr	r3, [pc, #384]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	029b      	lsls	r3, r3, #10
 8003634:	401a      	ands	r2, r3
 8003636:	2380      	movs	r3, #128	@ 0x80
 8003638:	029b      	lsls	r3, r3, #10
 800363a:	429a      	cmp	r2, r3
 800363c:	d101      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0b1      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003642:	4b5b      	ldr	r3, [pc, #364]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003644:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003646:	23c0      	movs	r3, #192	@ 0xc0
 8003648:	029b      	lsls	r3, r3, #10
 800364a:	4013      	ands	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d03b      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	23c0      	movs	r3, #192	@ 0xc0
 800365a:	029b      	lsls	r3, r3, #10
 800365c:	4013      	ands	r3, r2
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	429a      	cmp	r2, r3
 8003662:	d033      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2220      	movs	r2, #32
 800366a:	4013      	ands	r3, r2
 800366c:	d02e      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800366e:	4b50      	ldr	r3, [pc, #320]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003672:	4a51      	ldr	r2, [pc, #324]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003674:	4013      	ands	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003678:	4b4d      	ldr	r3, [pc, #308]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800367a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800367c:	4b4c      	ldr	r3, [pc, #304]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800367e:	2180      	movs	r1, #128	@ 0x80
 8003680:	0309      	lsls	r1, r1, #12
 8003682:	430a      	orrs	r2, r1
 8003684:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003686:	4b4a      	ldr	r3, [pc, #296]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003688:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800368a:	4b49      	ldr	r3, [pc, #292]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800368c:	494b      	ldr	r1, [pc, #300]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800368e:	400a      	ands	r2, r1
 8003690:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003692:	4b47      	ldr	r3, [pc, #284]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	2380      	movs	r3, #128	@ 0x80
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4013      	ands	r3, r2
 80036a0:	d014      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fe fae9 	bl	8001c78 <HAL_GetTick>
 80036a6:	0003      	movs	r3, r0
 80036a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036aa:	e009      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fe fae4 	bl	8001c78 <HAL_GetTick>
 80036b0:	0002      	movs	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	4a42      	ldr	r2, [pc, #264]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e072      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036c0:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4013      	ands	r3, r2
 80036ca:	d0ef      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2220      	movs	r2, #32
 80036d2:	4013      	ands	r3, r2
 80036d4:	d01f      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	23c0      	movs	r3, #192	@ 0xc0
 80036dc:	029b      	lsls	r3, r3, #10
 80036de:	401a      	ands	r2, r3
 80036e0:	23c0      	movs	r3, #192	@ 0xc0
 80036e2:	029b      	lsls	r3, r3, #10
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d10c      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80036e8:	4b31      	ldr	r3, [pc, #196]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a35      	ldr	r2, [pc, #212]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	0019      	movs	r1, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	23c0      	movs	r3, #192	@ 0xc0
 80036f8:	039b      	lsls	r3, r3, #14
 80036fa:	401a      	ands	r2, r3
 80036fc:	4b2c      	ldr	r3, [pc, #176]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	4b2b      	ldr	r3, [pc, #172]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003704:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	23c0      	movs	r3, #192	@ 0xc0
 800370c:	029b      	lsls	r3, r3, #10
 800370e:	401a      	ands	r2, r3
 8003710:	4b27      	ldr	r3, [pc, #156]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003712:	430a      	orrs	r2, r1
 8003714:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003716:	2317      	movs	r3, #23
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003720:	4b23      	ldr	r3, [pc, #140]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003724:	4b22      	ldr	r3, [pc, #136]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003726:	4928      	ldr	r1, [pc, #160]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003728:	400a      	ands	r2, r1
 800372a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2202      	movs	r2, #2
 8003732:	4013      	ands	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003736:	4b1e      	ldr	r3, [pc, #120]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373a:	220c      	movs	r2, #12
 800373c:	4393      	bics	r3, r2
 800373e:	0019      	movs	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	4b1a      	ldr	r3, [pc, #104]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003746:	430a      	orrs	r2, r1
 8003748:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2204      	movs	r2, #4
 8003750:	4013      	ands	r3, r2
 8003752:	d009      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003754:	4b16      	ldr	r3, [pc, #88]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003758:	4a1c      	ldr	r2, [pc, #112]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	4b13      	ldr	r3, [pc, #76]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003764:	430a      	orrs	r2, r1
 8003766:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2208      	movs	r2, #8
 800376e:	4013      	ands	r3, r2
 8003770:	d009      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003772:	4b0f      	ldr	r3, [pc, #60]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003776:	4a16      	ldr	r2, [pc, #88]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003778:	4013      	ands	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003782:	430a      	orrs	r2, r1
 8003784:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2280      	movs	r2, #128	@ 0x80
 800378c:	4013      	ands	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003790:	4b07      	ldr	r3, [pc, #28]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003794:	4a0f      	ldr	r2, [pc, #60]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003796:	4013      	ands	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	4b04      	ldr	r3, [pc, #16]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80037a0:	430a      	orrs	r2, r1
 80037a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b006      	add	sp, #24
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40007000 	.word	0x40007000
 80037b8:	fffcffff 	.word	0xfffcffff
 80037bc:	fff7ffff 	.word	0xfff7ffff
 80037c0:	00001388 	.word	0x00001388
 80037c4:	ffcfffff 	.word	0xffcfffff
 80037c8:	efffffff 	.word	0xefffffff
 80037cc:	fffff3ff 	.word	0xfffff3ff
 80037d0:	ffffcfff 	.word	0xffffcfff
 80037d4:	fff3ffff 	.word	0xfff3ffff

080037d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037d8:	b5b0      	push	{r4, r5, r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037e0:	230f      	movs	r3, #15
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e088      	b.n	8003904 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2221      	movs	r2, #33	@ 0x21
 80037f6:	5c9b      	ldrb	r3, [r3, r2]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0018      	movs	r0, r3
 800380a:	f7fe f901 	bl	8001a10 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2221      	movs	r2, #33	@ 0x21
 8003812:	2102      	movs	r1, #2
 8003814:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2210      	movs	r2, #16
 800381e:	4013      	ands	r3, r2
 8003820:	2b10      	cmp	r3, #16
 8003822:	d05f      	beq.n	80038e4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	22ca      	movs	r2, #202	@ 0xca
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2253      	movs	r2, #83	@ 0x53
 8003832:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003834:	250f      	movs	r5, #15
 8003836:	197c      	adds	r4, r7, r5
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0018      	movs	r0, r3
 800383c:	f000 f890 	bl	8003960 <RTC_EnterInitMode>
 8003840:	0003      	movs	r3, r0
 8003842:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003844:	0028      	movs	r0, r5
 8003846:	183b      	adds	r3, r7, r0
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d12c      	bne.n	80038a8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	492c      	ldr	r1, [pc, #176]	@ (800390c <HAL_RTC_Init+0x134>)
 800385a:	400a      	ands	r2, r1
 800385c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6899      	ldr	r1, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	68d2      	ldr	r2, [r2, #12]
 8003884:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6919      	ldr	r1, [r3, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	041a      	lsls	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800389a:	183c      	adds	r4, r7, r0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	0018      	movs	r0, r3
 80038a0:	f000 f8a2 	bl	80039e8 <RTC_ExitInitMode>
 80038a4:	0003      	movs	r3, r0
 80038a6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80038a8:	230f      	movs	r3, #15
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d113      	bne.n	80038da <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2103      	movs	r1, #3
 80038be:	438a      	bics	r2, r1
 80038c0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	22ff      	movs	r2, #255	@ 0xff
 80038e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80038e2:	e003      	b.n	80038ec <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80038e4:	230f      	movs	r3, #15
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80038ec:	230f      	movs	r3, #15
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d103      	bne.n	80038fe <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2221      	movs	r2, #33	@ 0x21
 80038fa:	2101      	movs	r1, #1
 80038fc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80038fe:	230f      	movs	r3, #15
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	781b      	ldrb	r3, [r3, #0]
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b004      	add	sp, #16
 800390a:	bdb0      	pop	{r4, r5, r7, pc}
 800390c:	ff8fffbf 	.word	0xff8fffbf

08003910 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0e      	ldr	r2, [pc, #56]	@ (800395c <HAL_RTC_WaitForSynchro+0x4c>)
 8003922:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003924:	f7fe f9a8 	bl	8001c78 <HAL_GetTick>
 8003928:	0003      	movs	r3, r0
 800392a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800392c:	e00a      	b.n	8003944 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800392e:	f7fe f9a3 	bl	8001c78 <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1ad2      	subs	r2, r2, r3
 8003938:	23fa      	movs	r3, #250	@ 0xfa
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	429a      	cmp	r2, r3
 800393e:	d901      	bls.n	8003944 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e006      	b.n	8003952 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	4013      	ands	r3, r2
 800394e:	d0ee      	beq.n	800392e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b004      	add	sp, #16
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	0001ff5f 	.word	0x0001ff5f

08003960 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	230f      	movs	r3, #15
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2240      	movs	r2, #64	@ 0x40
 800397c:	4013      	ands	r3, r2
 800397e:	d12c      	bne.n	80039da <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2180      	movs	r1, #128	@ 0x80
 800398c:	430a      	orrs	r2, r1
 800398e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003990:	f7fe f972 	bl	8001c78 <HAL_GetTick>
 8003994:	0003      	movs	r3, r0
 8003996:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003998:	e014      	b.n	80039c4 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800399a:	f7fe f96d 	bl	8001c78 <HAL_GetTick>
 800399e:	0002      	movs	r2, r0
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	1ad2      	subs	r2, r2, r3
 80039a4:	200f      	movs	r0, #15
 80039a6:	183b      	adds	r3, r7, r0
 80039a8:	1839      	adds	r1, r7, r0
 80039aa:	7809      	ldrb	r1, [r1, #0]
 80039ac:	7019      	strb	r1, [r3, #0]
 80039ae:	23fa      	movs	r3, #250	@ 0xfa
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d906      	bls.n	80039c4 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2221      	movs	r2, #33	@ 0x21
 80039ba:	2104      	movs	r1, #4
 80039bc:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80039be:	183b      	adds	r3, r7, r0
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2240      	movs	r2, #64	@ 0x40
 80039cc:	4013      	ands	r3, r2
 80039ce:	d104      	bne.n	80039da <RTC_EnterInitMode+0x7a>
 80039d0:	230f      	movs	r3, #15
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d1df      	bne.n	800399a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80039da:	230f      	movs	r3, #15
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	781b      	ldrb	r3, [r3, #0]
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b004      	add	sp, #16
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	240f      	movs	r4, #15
 80039f2:	193b      	adds	r3, r7, r4
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2180      	movs	r1, #128	@ 0x80
 8003a04:	438a      	bics	r2, r1
 8003a06:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	4013      	ands	r3, r2
 8003a12:	d10c      	bne.n	8003a2e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7ff ff7a 	bl	8003910 <HAL_RTC_WaitForSynchro>
 8003a1c:	1e03      	subs	r3, r0, #0
 8003a1e:	d006      	beq.n	8003a2e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2221      	movs	r2, #33	@ 0x21
 8003a24:	2104      	movs	r1, #4
 8003a26:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003a28:	193b      	adds	r3, r7, r4
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003a2e:	230f      	movs	r3, #15
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	781b      	ldrb	r3, [r3, #0]
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b005      	add	sp, #20
 8003a3a:	bd90      	pop	{r4, r7, pc}

08003a3c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003a48:	4b64      	ldr	r3, [pc, #400]	@ (8003bdc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	22fa      	movs	r2, #250	@ 0xfa
 8003a4e:	01d1      	lsls	r1, r2, #7
 8003a50:	0018      	movs	r0, r3
 8003a52:	f7fc fb59 	bl	8000108 <__udivsi3>
 8003a56:	0003      	movs	r3, r0
 8003a58:	001a      	movs	r2, r3
 8003a5a:	0013      	movs	r3, r2
 8003a5c:	015b      	lsls	r3, r3, #5
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	189b      	adds	r3, r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	5c9b      	ldrb	r3, [r3, r2]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0ad      	b.n	8003bd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2221      	movs	r2, #33	@ 0x21
 8003a82:	2102      	movs	r1, #2
 8003a84:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	22ca      	movs	r2, #202	@ 0xca
 8003a8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2253      	movs	r2, #83	@ 0x53
 8003a94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d019      	beq.n	8003ad8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10d      	bne.n	8003acc <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	22ff      	movs	r2, #255	@ 0xff
 8003ab6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2221      	movs	r2, #33	@ 0x21
 8003abc:	2103      	movs	r1, #3
 8003abe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e082      	b.n	8003bd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d1e5      	bne.n	8003aa4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	493f      	ldr	r1, [pc, #252]	@ (8003be0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	22ff      	movs	r2, #255	@ 0xff
 8003af0:	401a      	ands	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	493b      	ldr	r1, [pc, #236]	@ (8003be4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003af8:	430a      	orrs	r2, r1
 8003afa:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003afc:	4b37      	ldr	r3, [pc, #220]	@ (8003bdc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	22fa      	movs	r2, #250	@ 0xfa
 8003b02:	01d1      	lsls	r1, r2, #7
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7fc faff 	bl	8000108 <__udivsi3>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	001a      	movs	r2, r3
 8003b0e:	0013      	movs	r3, r2
 8003b10:	015b      	lsls	r3, r3, #5
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	189b      	adds	r3, r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10d      	bne.n	8003b44 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	22ff      	movs	r2, #255	@ 0xff
 8003b2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2221      	movs	r2, #33	@ 0x21
 8003b34:	2103      	movs	r1, #3
 8003b36:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e046      	b.n	8003bd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d0e5      	beq.n	8003b1c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2107      	movs	r1, #7
 8003b5c:	438a      	bics	r2, r1
 8003b5e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6899      	ldr	r1, [r3, #8]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003b78:	4b1b      	ldr	r3, [pc, #108]	@ (8003be8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003be8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003b7e:	2180      	movs	r1, #128	@ 0x80
 8003b80:	0349      	lsls	r1, r1, #13
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003b86:	4b18      	ldr	r3, [pc, #96]	@ (8003be8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	4b17      	ldr	r3, [pc, #92]	@ (8003be8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003b8c:	2180      	movs	r1, #128	@ 0x80
 8003b8e:	0349      	lsls	r1, r1, #13
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2180      	movs	r1, #128	@ 0x80
 8003ba0:	01c9      	lsls	r1, r1, #7
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2180      	movs	r1, #128	@ 0x80
 8003bb2:	00c9      	lsls	r1, r1, #3
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	22ff      	movs	r2, #255	@ 0xff
 8003bbe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2221      	movs	r2, #33	@ 0x21
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	2100      	movs	r1, #0
 8003bce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b006      	add	sp, #24
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	fffffbff 	.word	0xfffffbff
 8003be4:	fffffb7f 	.word	0xfffffb7f
 8003be8:	40010400 	.word	0x40010400

08003bec <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	5c9b      	ldrb	r3, [r3, r2]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e04e      	b.n	8003ca4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2221      	movs	r2, #33	@ 0x21
 8003c12:	2102      	movs	r1, #2
 8003c14:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	22ca      	movs	r2, #202	@ 0xca
 8003c1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2253      	movs	r2, #83	@ 0x53
 8003c24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	491e      	ldr	r1, [pc, #120]	@ (8003cac <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8003c32:	400a      	ands	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	491b      	ldr	r1, [pc, #108]	@ (8003cb0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8003c42:	400a      	ands	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c46:	f7fe f817 	bl	8001c78 <HAL_GetTick>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003c4e:	e016      	b.n	8003c7e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c50:	f7fe f812 	bl	8001c78 <HAL_GetTick>
 8003c54:	0002      	movs	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad2      	subs	r2, r2, r3
 8003c5a:	23fa      	movs	r3, #250	@ 0xfa
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d90d      	bls.n	8003c7e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	22ff      	movs	r2, #255	@ 0xff
 8003c68:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2221      	movs	r2, #33	@ 0x21
 8003c6e:	2103      	movs	r1, #3
 8003c70:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	2100      	movs	r1, #0
 8003c78:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e012      	b.n	8003ca4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2204      	movs	r2, #4
 8003c86:	4013      	ands	r3, r2
 8003c88:	d0e2      	beq.n	8003c50 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	22ff      	movs	r2, #255	@ 0xff
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2221      	movs	r2, #33	@ 0x21
 8003c96:	2101      	movs	r1, #1
 8003c98:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b004      	add	sp, #16
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	fffffbff 	.word	0xfffffbff
 8003cb0:	ffffbfff 	.word	0xffffbfff

08003cb4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003cbc:	4b13      	ldr	r3, [pc, #76]	@ (8003d0c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8003cbe:	2280      	movs	r2, #128	@ 0x80
 8003cc0:	0352      	lsls	r2, r2, #13
 8003cc2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	2380      	movs	r3, #128	@ 0x80
 8003ccc:	01db      	lsls	r3, r3, #7
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d014      	beq.n	8003cfc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	2380      	movs	r3, #128	@ 0x80
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d00d      	beq.n	8003cfc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	22ff      	movs	r2, #255	@ 0xff
 8003ce8:	401a      	ands	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4908      	ldr	r1, [pc, #32]	@ (8003d10 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f000 f80c 	bl	8003d14 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2221      	movs	r2, #33	@ 0x21
 8003d00:	2101      	movs	r1, #1
 8003d02:	5499      	strb	r1, [r3, r2]
}
 8003d04:	46c0      	nop			@ (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40010400 	.word	0x40010400
 8003d10:	fffffb7f 	.word	0xfffffb7f

08003d14 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003d1c:	46c0      	nop			@ (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b002      	add	sp, #8
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e044      	b.n	8003dc0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2278      	movs	r2, #120	@ 0x78
 8003d42:	2100      	movs	r1, #0
 8003d44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7fd fe81 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2224      	movs	r2, #36	@ 0x24
 8003d52:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2101      	movs	r1, #1
 8003d60:	438a      	bics	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f000 fc2c 	bl	80045c4 <UART_SetConfig>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e024      	b.n	8003dc0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f000 fe69 	bl	8004a58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	490d      	ldr	r1, [pc, #52]	@ (8003dc8 <HAL_UART_Init+0xa4>)
 8003d92:	400a      	ands	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	212a      	movs	r1, #42	@ 0x2a
 8003da2:	438a      	bics	r2, r1
 8003da4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f000 ff01 	bl	8004bc0 <UART_CheckIdleState>
 8003dbe:	0003      	movs	r3, r0
}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	ffffb7ff 	.word	0xffffb7ff

08003dcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	@ 0x28
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	1dbb      	adds	r3, r7, #6
 8003dda:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d000      	beq.n	8003de6 <HAL_UART_Transmit+0x1a>
 8003de4:	e08c      	b.n	8003f00 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_UART_Transmit+0x28>
 8003dec:	1dbb      	adds	r3, r7, #6
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e084      	b.n	8003f02 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	2380      	movs	r3, #128	@ 0x80
 8003dfe:	015b      	lsls	r3, r3, #5
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d109      	bne.n	8003e18 <HAL_UART_Transmit+0x4c>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4013      	ands	r3, r2
 8003e12:	d001      	beq.n	8003e18 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e074      	b.n	8003f02 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2284      	movs	r2, #132	@ 0x84
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2221      	movs	r2, #33	@ 0x21
 8003e24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e26:	f7fd ff27 	bl	8001c78 <HAL_GetTick>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1dba      	adds	r2, r7, #6
 8003e32:	2150      	movs	r1, #80	@ 0x50
 8003e34:	8812      	ldrh	r2, [r2, #0]
 8003e36:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1dba      	adds	r2, r7, #6
 8003e3c:	2152      	movs	r1, #82	@ 0x52
 8003e3e:	8812      	ldrh	r2, [r2, #0]
 8003e40:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	2380      	movs	r3, #128	@ 0x80
 8003e48:	015b      	lsls	r3, r3, #5
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d108      	bne.n	8003e60 <HAL_UART_Transmit+0x94>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d104      	bne.n	8003e60 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	e003      	b.n	8003e68 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e68:	e02f      	b.n	8003eca <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	0013      	movs	r3, r2
 8003e74:	2200      	movs	r2, #0
 8003e76:	2180      	movs	r1, #128	@ 0x80
 8003e78:	f000 ff4a 	bl	8004d10 <UART_WaitOnFlagUntilTimeout>
 8003e7c:	1e03      	subs	r3, r0, #0
 8003e7e:	d004      	beq.n	8003e8a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e03b      	b.n	8003f02 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	001a      	movs	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	05d2      	lsls	r2, r2, #23
 8003e9c:	0dd2      	lsrs	r2, r2, #23
 8003e9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	3302      	adds	r3, #2
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	e007      	b.n	8003eb8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	781a      	ldrb	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2252      	movs	r2, #82	@ 0x52
 8003ebc:	5a9b      	ldrh	r3, [r3, r2]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b299      	uxth	r1, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2252      	movs	r2, #82	@ 0x52
 8003ec8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2252      	movs	r2, #82	@ 0x52
 8003ece:	5a9b      	ldrh	r3, [r3, r2]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1c9      	bne.n	8003e6a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	0013      	movs	r3, r2
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2140      	movs	r1, #64	@ 0x40
 8003ee4:	f000 ff14 	bl	8004d10 <UART_WaitOnFlagUntilTimeout>
 8003ee8:	1e03      	subs	r3, r0, #0
 8003eea:	d004      	beq.n	8003ef6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e005      	b.n	8003f02 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
  }
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b008      	add	sp, #32
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	1dbb      	adds	r3, r7, #6
 8003f18:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2280      	movs	r2, #128	@ 0x80
 8003f1e:	589b      	ldr	r3, [r3, r2]
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d14a      	bne.n	8003fba <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_UART_Receive_IT+0x26>
 8003f2a:	1dbb      	adds	r3, r7, #6
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e042      	b.n	8003fbc <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	2380      	movs	r3, #128	@ 0x80
 8003f3c:	015b      	lsls	r3, r3, #5
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d109      	bne.n	8003f56 <HAL_UART_Receive_IT+0x4a>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d001      	beq.n	8003f56 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e032      	b.n	8003fbc <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a18      	ldr	r2, [pc, #96]	@ (8003fc4 <HAL_UART_Receive_IT+0xb8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d020      	beq.n	8003fa8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	2380      	movs	r3, #128	@ 0x80
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	4013      	ands	r3, r2
 8003f72:	d019      	beq.n	8003fa8 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f74:	f3ef 8310 	mrs	r3, PRIMASK
 8003f78:	613b      	str	r3, [r7, #16]
  return(result);
 8003f7a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	2301      	movs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f383 8810 	msr	PRIMASK, r3
}
 8003f88:	46c0      	nop			@ (mov r8, r8)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2180      	movs	r1, #128	@ 0x80
 8003f96:	04c9      	lsls	r1, r1, #19
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fa8:	1dbb      	adds	r3, r7, #6
 8003faa:	881a      	ldrh	r2, [r3, #0]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f000 ff17 	bl	8004de4 <UART_Start_Receive_IT>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	e000      	b.n	8003fbc <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003fba:	2302      	movs	r3, #2
  }
}
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b008      	add	sp, #32
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40004800 	.word	0x40004800

08003fc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fc8:	b590      	push	{r4, r7, lr}
 8003fca:	b0ab      	sub	sp, #172	@ 0xac
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	22a4      	movs	r2, #164	@ 0xa4
 8003fd8:	18b9      	adds	r1, r7, r2
 8003fda:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	20a0      	movs	r0, #160	@ 0xa0
 8003fe4:	1839      	adds	r1, r7, r0
 8003fe6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	219c      	movs	r1, #156	@ 0x9c
 8003ff0:	1879      	adds	r1, r7, r1
 8003ff2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ff4:	0011      	movs	r1, r2
 8003ff6:	18bb      	adds	r3, r7, r2
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a99      	ldr	r2, [pc, #612]	@ (8004260 <HAL_UART_IRQHandler+0x298>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2298      	movs	r2, #152	@ 0x98
 8004000:	18bc      	adds	r4, r7, r2
 8004002:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004004:	18bb      	adds	r3, r7, r2
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d114      	bne.n	8004036 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800400c:	187b      	adds	r3, r7, r1
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2220      	movs	r2, #32
 8004012:	4013      	ands	r3, r2
 8004014:	d00f      	beq.n	8004036 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004016:	183b      	adds	r3, r7, r0
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2220      	movs	r2, #32
 800401c:	4013      	ands	r3, r2
 800401e:	d00a      	beq.n	8004036 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004024:	2b00      	cmp	r3, #0
 8004026:	d100      	bne.n	800402a <HAL_UART_IRQHandler+0x62>
 8004028:	e2a0      	b.n	800456c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	0010      	movs	r0, r2
 8004032:	4798      	blx	r3
      }
      return;
 8004034:	e29a      	b.n	800456c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004036:	2398      	movs	r3, #152	@ 0x98
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d100      	bne.n	8004042 <HAL_UART_IRQHandler+0x7a>
 8004040:	e114      	b.n	800426c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004042:	239c      	movs	r3, #156	@ 0x9c
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2201      	movs	r2, #1
 800404a:	4013      	ands	r3, r2
 800404c:	d106      	bne.n	800405c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800404e:	23a0      	movs	r3, #160	@ 0xa0
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a83      	ldr	r2, [pc, #524]	@ (8004264 <HAL_UART_IRQHandler+0x29c>)
 8004056:	4013      	ands	r3, r2
 8004058:	d100      	bne.n	800405c <HAL_UART_IRQHandler+0x94>
 800405a:	e107      	b.n	800426c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800405c:	23a4      	movs	r3, #164	@ 0xa4
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2201      	movs	r2, #1
 8004064:	4013      	ands	r3, r2
 8004066:	d012      	beq.n	800408e <HAL_UART_IRQHandler+0xc6>
 8004068:	23a0      	movs	r3, #160	@ 0xa0
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	2380      	movs	r3, #128	@ 0x80
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	4013      	ands	r3, r2
 8004074:	d00b      	beq.n	800408e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2201      	movs	r2, #1
 800407c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2284      	movs	r2, #132	@ 0x84
 8004082:	589b      	ldr	r3, [r3, r2]
 8004084:	2201      	movs	r2, #1
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2184      	movs	r1, #132	@ 0x84
 800408c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800408e:	23a4      	movs	r3, #164	@ 0xa4
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2202      	movs	r2, #2
 8004096:	4013      	ands	r3, r2
 8004098:	d011      	beq.n	80040be <HAL_UART_IRQHandler+0xf6>
 800409a:	239c      	movs	r3, #156	@ 0x9c
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	d00b      	beq.n	80040be <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2202      	movs	r2, #2
 80040ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2284      	movs	r2, #132	@ 0x84
 80040b2:	589b      	ldr	r3, [r3, r2]
 80040b4:	2204      	movs	r2, #4
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2184      	movs	r1, #132	@ 0x84
 80040bc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040be:	23a4      	movs	r3, #164	@ 0xa4
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2204      	movs	r2, #4
 80040c6:	4013      	ands	r3, r2
 80040c8:	d011      	beq.n	80040ee <HAL_UART_IRQHandler+0x126>
 80040ca:	239c      	movs	r3, #156	@ 0x9c
 80040cc:	18fb      	adds	r3, r7, r3
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2201      	movs	r2, #1
 80040d2:	4013      	ands	r3, r2
 80040d4:	d00b      	beq.n	80040ee <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2204      	movs	r2, #4
 80040dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2284      	movs	r2, #132	@ 0x84
 80040e2:	589b      	ldr	r3, [r3, r2]
 80040e4:	2202      	movs	r2, #2
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2184      	movs	r1, #132	@ 0x84
 80040ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040ee:	23a4      	movs	r3, #164	@ 0xa4
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2208      	movs	r2, #8
 80040f6:	4013      	ands	r3, r2
 80040f8:	d017      	beq.n	800412a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040fa:	23a0      	movs	r3, #160	@ 0xa0
 80040fc:	18fb      	adds	r3, r7, r3
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2220      	movs	r2, #32
 8004102:	4013      	ands	r3, r2
 8004104:	d105      	bne.n	8004112 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004106:	239c      	movs	r3, #156	@ 0x9c
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2201      	movs	r2, #1
 800410e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004110:	d00b      	beq.n	800412a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2208      	movs	r2, #8
 8004118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2284      	movs	r2, #132	@ 0x84
 800411e:	589b      	ldr	r3, [r3, r2]
 8004120:	2208      	movs	r2, #8
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2184      	movs	r1, #132	@ 0x84
 8004128:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800412a:	23a4      	movs	r3, #164	@ 0xa4
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	2380      	movs	r3, #128	@ 0x80
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	4013      	ands	r3, r2
 8004136:	d013      	beq.n	8004160 <HAL_UART_IRQHandler+0x198>
 8004138:	23a0      	movs	r3, #160	@ 0xa0
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	2380      	movs	r3, #128	@ 0x80
 8004140:	04db      	lsls	r3, r3, #19
 8004142:	4013      	ands	r3, r2
 8004144:	d00c      	beq.n	8004160 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2280      	movs	r2, #128	@ 0x80
 800414c:	0112      	lsls	r2, r2, #4
 800414e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2284      	movs	r2, #132	@ 0x84
 8004154:	589b      	ldr	r3, [r3, r2]
 8004156:	2220      	movs	r2, #32
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2184      	movs	r1, #132	@ 0x84
 800415e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2284      	movs	r2, #132	@ 0x84
 8004164:	589b      	ldr	r3, [r3, r2]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d100      	bne.n	800416c <HAL_UART_IRQHandler+0x1a4>
 800416a:	e201      	b.n	8004570 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800416c:	23a4      	movs	r3, #164	@ 0xa4
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2220      	movs	r2, #32
 8004174:	4013      	ands	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004178:	23a0      	movs	r3, #160	@ 0xa0
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2220      	movs	r2, #32
 8004180:	4013      	ands	r3, r2
 8004182:	d008      	beq.n	8004196 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004188:	2b00      	cmp	r3, #0
 800418a:	d004      	beq.n	8004196 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	0010      	movs	r0, r2
 8004194:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2284      	movs	r2, #132	@ 0x84
 800419a:	589b      	ldr	r3, [r3, r2]
 800419c:	2194      	movs	r1, #148	@ 0x94
 800419e:	187a      	adds	r2, r7, r1
 80041a0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2240      	movs	r2, #64	@ 0x40
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b40      	cmp	r3, #64	@ 0x40
 80041ae:	d004      	beq.n	80041ba <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041b0:	187b      	adds	r3, r7, r1
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2228      	movs	r2, #40	@ 0x28
 80041b6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041b8:	d047      	beq.n	800424a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	0018      	movs	r0, r3
 80041be:	f000 fedb 	bl	8004f78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2240      	movs	r2, #64	@ 0x40
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b40      	cmp	r3, #64	@ 0x40
 80041ce:	d137      	bne.n	8004240 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d0:	f3ef 8310 	mrs	r3, PRIMASK
 80041d4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80041d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d8:	2090      	movs	r0, #144	@ 0x90
 80041da:	183a      	adds	r2, r7, r0
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	2301      	movs	r3, #1
 80041e0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041e4:	f383 8810 	msr	PRIMASK, r3
}
 80041e8:	46c0      	nop			@ (mov r8, r8)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2140      	movs	r1, #64	@ 0x40
 80041f6:	438a      	bics	r2, r1
 80041f8:	609a      	str	r2, [r3, #8]
 80041fa:	183b      	adds	r3, r7, r0
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004200:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004202:	f383 8810 	msr	PRIMASK, r3
}
 8004206:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420c:	2b00      	cmp	r3, #0
 800420e:	d012      	beq.n	8004236 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004214:	4a14      	ldr	r2, [pc, #80]	@ (8004268 <HAL_UART_IRQHandler+0x2a0>)
 8004216:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421c:	0018      	movs	r0, r3
 800421e:	f7fe f9f5 	bl	800260c <HAL_DMA_Abort_IT>
 8004222:	1e03      	subs	r3, r0, #0
 8004224:	d01a      	beq.n	800425c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004230:	0018      	movs	r0, r3
 8004232:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	e012      	b.n	800425c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0018      	movs	r0, r3
 800423a:	f000 f9af 	bl	800459c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423e:	e00d      	b.n	800425c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	0018      	movs	r0, r3
 8004244:	f000 f9aa 	bl	800459c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	e008      	b.n	800425c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	0018      	movs	r0, r3
 800424e:	f000 f9a5 	bl	800459c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2284      	movs	r2, #132	@ 0x84
 8004256:	2100      	movs	r1, #0
 8004258:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800425a:	e189      	b.n	8004570 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	46c0      	nop			@ (mov r8, r8)
    return;
 800425e:	e187      	b.n	8004570 <HAL_UART_IRQHandler+0x5a8>
 8004260:	0000080f 	.word	0x0000080f
 8004264:	04000120 	.word	0x04000120
 8004268:	08005041 	.word	0x08005041

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004270:	2b01      	cmp	r3, #1
 8004272:	d000      	beq.n	8004276 <HAL_UART_IRQHandler+0x2ae>
 8004274:	e13b      	b.n	80044ee <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004276:	23a4      	movs	r3, #164	@ 0xa4
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2210      	movs	r2, #16
 800427e:	4013      	ands	r3, r2
 8004280:	d100      	bne.n	8004284 <HAL_UART_IRQHandler+0x2bc>
 8004282:	e134      	b.n	80044ee <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004284:	23a0      	movs	r3, #160	@ 0xa0
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2210      	movs	r2, #16
 800428c:	4013      	ands	r3, r2
 800428e:	d100      	bne.n	8004292 <HAL_UART_IRQHandler+0x2ca>
 8004290:	e12d      	b.n	80044ee <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2210      	movs	r2, #16
 8004298:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2240      	movs	r2, #64	@ 0x40
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b40      	cmp	r3, #64	@ 0x40
 80042a6:	d000      	beq.n	80042aa <HAL_UART_IRQHandler+0x2e2>
 80042a8:	e0a1      	b.n	80043ee <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	217e      	movs	r1, #126	@ 0x7e
 80042b4:	187b      	adds	r3, r7, r1
 80042b6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80042b8:	187b      	adds	r3, r7, r1
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d100      	bne.n	80042c2 <HAL_UART_IRQHandler+0x2fa>
 80042c0:	e158      	b.n	8004574 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2258      	movs	r2, #88	@ 0x58
 80042c6:	5a9b      	ldrh	r3, [r3, r2]
 80042c8:	187a      	adds	r2, r7, r1
 80042ca:	8812      	ldrh	r2, [r2, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d300      	bcc.n	80042d2 <HAL_UART_IRQHandler+0x30a>
 80042d0:	e150      	b.n	8004574 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	187a      	adds	r2, r7, r1
 80042d6:	215a      	movs	r1, #90	@ 0x5a
 80042d8:	8812      	ldrh	r2, [r2, #0]
 80042da:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2220      	movs	r2, #32
 80042e6:	4013      	ands	r3, r2
 80042e8:	d16f      	bne.n	80043ca <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ea:	f3ef 8310 	mrs	r3, PRIMASK
 80042ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042f4:	2301      	movs	r3, #1
 80042f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fa:	f383 8810 	msr	PRIMASK, r3
}
 80042fe:	46c0      	nop			@ (mov r8, r8)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	499e      	ldr	r1, [pc, #632]	@ (8004584 <HAL_UART_IRQHandler+0x5bc>)
 800430c:	400a      	ands	r2, r1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004312:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004316:	f383 8810 	msr	PRIMASK, r3
}
 800431a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800431c:	f3ef 8310 	mrs	r3, PRIMASK
 8004320:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004324:	677b      	str	r3, [r7, #116]	@ 0x74
 8004326:	2301      	movs	r3, #1
 8004328:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432c:	f383 8810 	msr	PRIMASK, r3
}
 8004330:	46c0      	nop			@ (mov r8, r8)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2101      	movs	r1, #1
 800433e:	438a      	bics	r2, r1
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004344:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004348:	f383 8810 	msr	PRIMASK, r3
}
 800434c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800434e:	f3ef 8310 	mrs	r3, PRIMASK
 8004352:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004356:	673b      	str	r3, [r7, #112]	@ 0x70
 8004358:	2301      	movs	r3, #1
 800435a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800435e:	f383 8810 	msr	PRIMASK, r3
}
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2140      	movs	r1, #64	@ 0x40
 8004370:	438a      	bics	r2, r1
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004376:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800437a:	f383 8810 	msr	PRIMASK, r3
}
 800437e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2280      	movs	r2, #128	@ 0x80
 8004384:	2120      	movs	r1, #32
 8004386:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800438e:	f3ef 8310 	mrs	r3, PRIMASK
 8004392:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004396:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004398:	2301      	movs	r3, #1
 800439a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800439e:	f383 8810 	msr	PRIMASK, r3
}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2110      	movs	r1, #16
 80043b0:	438a      	bics	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043ba:	f383 8810 	msr	PRIMASK, r3
}
 80043be:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7fe f8e1 	bl	800258c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2202      	movs	r2, #2
 80043ce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2258      	movs	r2, #88	@ 0x58
 80043d4:	5a9a      	ldrh	r2, [r3, r2]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	215a      	movs	r1, #90	@ 0x5a
 80043da:	5a5b      	ldrh	r3, [r3, r1]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	0011      	movs	r1, r2
 80043e6:	0018      	movs	r0, r3
 80043e8:	f000 f8e0 	bl	80045ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043ec:	e0c2      	b.n	8004574 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2258      	movs	r2, #88	@ 0x58
 80043f2:	5a99      	ldrh	r1, [r3, r2]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	225a      	movs	r2, #90	@ 0x5a
 80043f8:	5a9b      	ldrh	r3, [r3, r2]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	208e      	movs	r0, #142	@ 0x8e
 80043fe:	183b      	adds	r3, r7, r0
 8004400:	1a8a      	subs	r2, r1, r2
 8004402:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	225a      	movs	r2, #90	@ 0x5a
 8004408:	5a9b      	ldrh	r3, [r3, r2]
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d100      	bne.n	8004412 <HAL_UART_IRQHandler+0x44a>
 8004410:	e0b2      	b.n	8004578 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004412:	183b      	adds	r3, r7, r0
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d100      	bne.n	800441c <HAL_UART_IRQHandler+0x454>
 800441a:	e0ad      	b.n	8004578 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800441c:	f3ef 8310 	mrs	r3, PRIMASK
 8004420:	60fb      	str	r3, [r7, #12]
  return(result);
 8004422:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004424:	2488      	movs	r4, #136	@ 0x88
 8004426:	193a      	adds	r2, r7, r4
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	2301      	movs	r3, #1
 800442c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f383 8810 	msr	PRIMASK, r3
}
 8004434:	46c0      	nop			@ (mov r8, r8)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4951      	ldr	r1, [pc, #324]	@ (8004588 <HAL_UART_IRQHandler+0x5c0>)
 8004442:	400a      	ands	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	193b      	adds	r3, r7, r4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f383 8810 	msr	PRIMASK, r3
}
 8004452:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004454:	f3ef 8310 	mrs	r3, PRIMASK
 8004458:	61bb      	str	r3, [r7, #24]
  return(result);
 800445a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445c:	2484      	movs	r4, #132	@ 0x84
 800445e:	193a      	adds	r2, r7, r4
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	2301      	movs	r3, #1
 8004464:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f383 8810 	msr	PRIMASK, r3
}
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2101      	movs	r1, #1
 800447a:	438a      	bics	r2, r1
 800447c:	609a      	str	r2, [r3, #8]
 800447e:	193b      	adds	r3, r7, r4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	f383 8810 	msr	PRIMASK, r3
}
 800448a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2280      	movs	r2, #128	@ 0x80
 8004490:	2120      	movs	r1, #32
 8004492:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a0:	f3ef 8310 	mrs	r3, PRIMASK
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a8:	2480      	movs	r4, #128	@ 0x80
 80044aa:	193a      	adds	r2, r7, r4
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	2301      	movs	r3, #1
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b4:	f383 8810 	msr	PRIMASK, r3
}
 80044b8:	46c0      	nop			@ (mov r8, r8)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2110      	movs	r1, #16
 80044c6:	438a      	bics	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	193b      	adds	r3, r7, r4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d2:	f383 8810 	msr	PRIMASK, r3
}
 80044d6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044de:	183b      	adds	r3, r7, r0
 80044e0:	881a      	ldrh	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0011      	movs	r1, r2
 80044e6:	0018      	movs	r0, r3
 80044e8:	f000 f860 	bl	80045ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044ec:	e044      	b.n	8004578 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044ee:	23a4      	movs	r3, #164	@ 0xa4
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	2380      	movs	r3, #128	@ 0x80
 80044f6:	035b      	lsls	r3, r3, #13
 80044f8:	4013      	ands	r3, r2
 80044fa:	d010      	beq.n	800451e <HAL_UART_IRQHandler+0x556>
 80044fc:	239c      	movs	r3, #156	@ 0x9c
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	2380      	movs	r3, #128	@ 0x80
 8004504:	03db      	lsls	r3, r3, #15
 8004506:	4013      	ands	r3, r2
 8004508:	d009      	beq.n	800451e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2280      	movs	r2, #128	@ 0x80
 8004510:	0352      	lsls	r2, r2, #13
 8004512:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	0018      	movs	r0, r3
 8004518:	f000 ff98 	bl	800544c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800451c:	e02f      	b.n	800457e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800451e:	23a4      	movs	r3, #164	@ 0xa4
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2280      	movs	r2, #128	@ 0x80
 8004526:	4013      	ands	r3, r2
 8004528:	d00f      	beq.n	800454a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800452a:	23a0      	movs	r3, #160	@ 0xa0
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2280      	movs	r2, #128	@ 0x80
 8004532:	4013      	ands	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01e      	beq.n	800457c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	0010      	movs	r0, r2
 8004546:	4798      	blx	r3
    }
    return;
 8004548:	e018      	b.n	800457c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800454a:	23a4      	movs	r3, #164	@ 0xa4
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2240      	movs	r2, #64	@ 0x40
 8004552:	4013      	ands	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_UART_IRQHandler+0x5b6>
 8004556:	23a0      	movs	r3, #160	@ 0xa0
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2240      	movs	r2, #64	@ 0x40
 800455e:	4013      	ands	r3, r2
 8004560:	d00d      	beq.n	800457e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	0018      	movs	r0, r3
 8004566:	f000 fd82 	bl	800506e <UART_EndTransmit_IT>
    return;
 800456a:	e008      	b.n	800457e <HAL_UART_IRQHandler+0x5b6>
      return;
 800456c:	46c0      	nop			@ (mov r8, r8)
 800456e:	e006      	b.n	800457e <HAL_UART_IRQHandler+0x5b6>
    return;
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	e004      	b.n	800457e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004574:	46c0      	nop			@ (mov r8, r8)
 8004576:	e002      	b.n	800457e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004578:	46c0      	nop			@ (mov r8, r8)
 800457a:	e000      	b.n	800457e <HAL_UART_IRQHandler+0x5b6>
    return;
 800457c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800457e:	46bd      	mov	sp, r7
 8004580:	b02b      	add	sp, #172	@ 0xac
 8004582:	bd90      	pop	{r4, r7, pc}
 8004584:	fffffeff 	.word	0xfffffeff
 8004588:	fffffedf 	.word	0xfffffedf

0800458c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004594:	46c0      	nop			@ (mov r8, r8)
 8004596:	46bd      	mov	sp, r7
 8004598:	b002      	add	sp, #8
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045a4:	46c0      	nop			@ (mov r8, r8)
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b002      	add	sp, #8
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	000a      	movs	r2, r1
 80045b6:	1cbb      	adds	r3, r7, #2
 80045b8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	b002      	add	sp, #8
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c4:	b5b0      	push	{r4, r5, r7, lr}
 80045c6:	b08e      	sub	sp, #56	@ 0x38
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045cc:	231a      	movs	r3, #26
 80045ce:	2218      	movs	r2, #24
 80045d0:	189b      	adds	r3, r3, r2
 80045d2:	19db      	adds	r3, r3, r7
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4ab4      	ldr	r2, [pc, #720]	@ (80048c8 <UART_SetConfig+0x304>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	0019      	movs	r1, r3
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4aaf      	ldr	r2, [pc, #700]	@ (80048cc <UART_SetConfig+0x308>)
 800460e:	4013      	ands	r3, r2
 8004610:	0019      	movs	r1, r3
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4aa9      	ldr	r2, [pc, #676]	@ (80048d0 <UART_SetConfig+0x30c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d004      	beq.n	8004638 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004634:	4313      	orrs	r3, r2
 8004636:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	4aa5      	ldr	r2, [pc, #660]	@ (80048d4 <UART_SetConfig+0x310>)
 8004640:	4013      	ands	r3, r2
 8004642:	0019      	movs	r1, r3
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800464a:	430a      	orrs	r2, r1
 800464c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4aa1      	ldr	r2, [pc, #644]	@ (80048d8 <UART_SetConfig+0x314>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d131      	bne.n	80046bc <UART_SetConfig+0xf8>
 8004658:	4ba0      	ldr	r3, [pc, #640]	@ (80048dc <UART_SetConfig+0x318>)
 800465a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465c:	220c      	movs	r2, #12
 800465e:	4013      	ands	r3, r2
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d01d      	beq.n	80046a0 <UART_SetConfig+0xdc>
 8004664:	d823      	bhi.n	80046ae <UART_SetConfig+0xea>
 8004666:	2b08      	cmp	r3, #8
 8004668:	d00c      	beq.n	8004684 <UART_SetConfig+0xc0>
 800466a:	d820      	bhi.n	80046ae <UART_SetConfig+0xea>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <UART_SetConfig+0xb2>
 8004670:	2b04      	cmp	r3, #4
 8004672:	d00e      	beq.n	8004692 <UART_SetConfig+0xce>
 8004674:	e01b      	b.n	80046ae <UART_SetConfig+0xea>
 8004676:	231b      	movs	r3, #27
 8004678:	2218      	movs	r2, #24
 800467a:	189b      	adds	r3, r3, r2
 800467c:	19db      	adds	r3, r3, r7
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	e065      	b.n	8004750 <UART_SetConfig+0x18c>
 8004684:	231b      	movs	r3, #27
 8004686:	2218      	movs	r2, #24
 8004688:	189b      	adds	r3, r3, r2
 800468a:	19db      	adds	r3, r3, r7
 800468c:	2202      	movs	r2, #2
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	e05e      	b.n	8004750 <UART_SetConfig+0x18c>
 8004692:	231b      	movs	r3, #27
 8004694:	2218      	movs	r2, #24
 8004696:	189b      	adds	r3, r3, r2
 8004698:	19db      	adds	r3, r3, r7
 800469a:	2204      	movs	r2, #4
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e057      	b.n	8004750 <UART_SetConfig+0x18c>
 80046a0:	231b      	movs	r3, #27
 80046a2:	2218      	movs	r2, #24
 80046a4:	189b      	adds	r3, r3, r2
 80046a6:	19db      	adds	r3, r3, r7
 80046a8:	2208      	movs	r2, #8
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	e050      	b.n	8004750 <UART_SetConfig+0x18c>
 80046ae:	231b      	movs	r3, #27
 80046b0:	2218      	movs	r2, #24
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	19db      	adds	r3, r3, r7
 80046b6:	2210      	movs	r2, #16
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e049      	b.n	8004750 <UART_SetConfig+0x18c>
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a83      	ldr	r2, [pc, #524]	@ (80048d0 <UART_SetConfig+0x30c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d13e      	bne.n	8004744 <UART_SetConfig+0x180>
 80046c6:	4b85      	ldr	r3, [pc, #532]	@ (80048dc <UART_SetConfig+0x318>)
 80046c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046ca:	23c0      	movs	r3, #192	@ 0xc0
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	4013      	ands	r3, r2
 80046d0:	22c0      	movs	r2, #192	@ 0xc0
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d027      	beq.n	8004728 <UART_SetConfig+0x164>
 80046d8:	22c0      	movs	r2, #192	@ 0xc0
 80046da:	0112      	lsls	r2, r2, #4
 80046dc:	4293      	cmp	r3, r2
 80046de:	d82a      	bhi.n	8004736 <UART_SetConfig+0x172>
 80046e0:	2280      	movs	r2, #128	@ 0x80
 80046e2:	0112      	lsls	r2, r2, #4
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d011      	beq.n	800470c <UART_SetConfig+0x148>
 80046e8:	2280      	movs	r2, #128	@ 0x80
 80046ea:	0112      	lsls	r2, r2, #4
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d822      	bhi.n	8004736 <UART_SetConfig+0x172>
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d004      	beq.n	80046fe <UART_SetConfig+0x13a>
 80046f4:	2280      	movs	r2, #128	@ 0x80
 80046f6:	00d2      	lsls	r2, r2, #3
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00e      	beq.n	800471a <UART_SetConfig+0x156>
 80046fc:	e01b      	b.n	8004736 <UART_SetConfig+0x172>
 80046fe:	231b      	movs	r3, #27
 8004700:	2218      	movs	r2, #24
 8004702:	189b      	adds	r3, r3, r2
 8004704:	19db      	adds	r3, r3, r7
 8004706:	2200      	movs	r2, #0
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	e021      	b.n	8004750 <UART_SetConfig+0x18c>
 800470c:	231b      	movs	r3, #27
 800470e:	2218      	movs	r2, #24
 8004710:	189b      	adds	r3, r3, r2
 8004712:	19db      	adds	r3, r3, r7
 8004714:	2202      	movs	r2, #2
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e01a      	b.n	8004750 <UART_SetConfig+0x18c>
 800471a:	231b      	movs	r3, #27
 800471c:	2218      	movs	r2, #24
 800471e:	189b      	adds	r3, r3, r2
 8004720:	19db      	adds	r3, r3, r7
 8004722:	2204      	movs	r2, #4
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e013      	b.n	8004750 <UART_SetConfig+0x18c>
 8004728:	231b      	movs	r3, #27
 800472a:	2218      	movs	r2, #24
 800472c:	189b      	adds	r3, r3, r2
 800472e:	19db      	adds	r3, r3, r7
 8004730:	2208      	movs	r2, #8
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e00c      	b.n	8004750 <UART_SetConfig+0x18c>
 8004736:	231b      	movs	r3, #27
 8004738:	2218      	movs	r2, #24
 800473a:	189b      	adds	r3, r3, r2
 800473c:	19db      	adds	r3, r3, r7
 800473e:	2210      	movs	r2, #16
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e005      	b.n	8004750 <UART_SetConfig+0x18c>
 8004744:	231b      	movs	r3, #27
 8004746:	2218      	movs	r2, #24
 8004748:	189b      	adds	r3, r3, r2
 800474a:	19db      	adds	r3, r3, r7
 800474c:	2210      	movs	r2, #16
 800474e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a5e      	ldr	r2, [pc, #376]	@ (80048d0 <UART_SetConfig+0x30c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d000      	beq.n	800475c <UART_SetConfig+0x198>
 800475a:	e084      	b.n	8004866 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800475c:	231b      	movs	r3, #27
 800475e:	2218      	movs	r2, #24
 8004760:	189b      	adds	r3, r3, r2
 8004762:	19db      	adds	r3, r3, r7
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b08      	cmp	r3, #8
 8004768:	d01d      	beq.n	80047a6 <UART_SetConfig+0x1e2>
 800476a:	dc20      	bgt.n	80047ae <UART_SetConfig+0x1ea>
 800476c:	2b04      	cmp	r3, #4
 800476e:	d015      	beq.n	800479c <UART_SetConfig+0x1d8>
 8004770:	dc1d      	bgt.n	80047ae <UART_SetConfig+0x1ea>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <UART_SetConfig+0x1b8>
 8004776:	2b02      	cmp	r3, #2
 8004778:	d005      	beq.n	8004786 <UART_SetConfig+0x1c2>
 800477a:	e018      	b.n	80047ae <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800477c:	f7fe fed4 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8004780:	0003      	movs	r3, r0
 8004782:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004784:	e01c      	b.n	80047c0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004786:	4b55      	ldr	r3, [pc, #340]	@ (80048dc <UART_SetConfig+0x318>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2210      	movs	r2, #16
 800478c:	4013      	ands	r3, r2
 800478e:	d002      	beq.n	8004796 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004790:	4b53      	ldr	r3, [pc, #332]	@ (80048e0 <UART_SetConfig+0x31c>)
 8004792:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004794:	e014      	b.n	80047c0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8004796:	4b53      	ldr	r3, [pc, #332]	@ (80048e4 <UART_SetConfig+0x320>)
 8004798:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800479a:	e011      	b.n	80047c0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800479c:	f7fe fe14 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 80047a0:	0003      	movs	r3, r0
 80047a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80047a4:	e00c      	b.n	80047c0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a6:	2380      	movs	r3, #128	@ 0x80
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80047ac:	e008      	b.n	80047c0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80047b2:	231a      	movs	r3, #26
 80047b4:	2218      	movs	r2, #24
 80047b6:	189b      	adds	r3, r3, r2
 80047b8:	19db      	adds	r3, r3, r7
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
        break;
 80047be:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d100      	bne.n	80047c8 <UART_SetConfig+0x204>
 80047c6:	e12f      	b.n	8004a28 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	0013      	movs	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d305      	bcc.n	80047e4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d906      	bls.n	80047f2 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80047e4:	231a      	movs	r3, #26
 80047e6:	2218      	movs	r2, #24
 80047e8:	189b      	adds	r3, r3, r2
 80047ea:	19db      	adds	r3, r3, r7
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e11a      	b.n	8004a28 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	6939      	ldr	r1, [r7, #16]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	000b      	movs	r3, r1
 8004800:	0e1b      	lsrs	r3, r3, #24
 8004802:	0010      	movs	r0, r2
 8004804:	0205      	lsls	r5, r0, #8
 8004806:	431d      	orrs	r5, r3
 8004808:	000b      	movs	r3, r1
 800480a:	021c      	lsls	r4, r3, #8
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68b8      	ldr	r0, [r7, #8]
 800481a:	68f9      	ldr	r1, [r7, #12]
 800481c:	1900      	adds	r0, r0, r4
 800481e:	4169      	adcs	r1, r5
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	2300      	movs	r3, #0
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f7fb fcf7 	bl	8000220 <__aeabi_uldivmod>
 8004832:	0002      	movs	r2, r0
 8004834:	000b      	movs	r3, r1
 8004836:	0013      	movs	r3, r2
 8004838:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800483a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800483c:	23c0      	movs	r3, #192	@ 0xc0
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	429a      	cmp	r2, r3
 8004842:	d309      	bcc.n	8004858 <UART_SetConfig+0x294>
 8004844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004846:	2380      	movs	r3, #128	@ 0x80
 8004848:	035b      	lsls	r3, r3, #13
 800484a:	429a      	cmp	r2, r3
 800484c:	d204      	bcs.n	8004858 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	e0e7      	b.n	8004a28 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8004858:	231a      	movs	r3, #26
 800485a:	2218      	movs	r2, #24
 800485c:	189b      	adds	r3, r3, r2
 800485e:	19db      	adds	r3, r3, r7
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	e0e0      	b.n	8004a28 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	69da      	ldr	r2, [r3, #28]
 800486a:	2380      	movs	r3, #128	@ 0x80
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	429a      	cmp	r2, r3
 8004870:	d000      	beq.n	8004874 <UART_SetConfig+0x2b0>
 8004872:	e082      	b.n	800497a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8004874:	231b      	movs	r3, #27
 8004876:	2218      	movs	r2, #24
 8004878:	189b      	adds	r3, r3, r2
 800487a:	19db      	adds	r3, r3, r7
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b08      	cmp	r3, #8
 8004880:	d834      	bhi.n	80048ec <UART_SetConfig+0x328>
 8004882:	009a      	lsls	r2, r3, #2
 8004884:	4b18      	ldr	r3, [pc, #96]	@ (80048e8 <UART_SetConfig+0x324>)
 8004886:	18d3      	adds	r3, r2, r3
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488c:	f7fe fe4c 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8004890:	0003      	movs	r3, r0
 8004892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004894:	e033      	b.n	80048fe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004896:	f7fe fe5d 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 800489a:	0003      	movs	r3, r0
 800489c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800489e:	e02e      	b.n	80048fe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048a0:	4b0e      	ldr	r3, [pc, #56]	@ (80048dc <UART_SetConfig+0x318>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2210      	movs	r2, #16
 80048a6:	4013      	ands	r3, r2
 80048a8:	d002      	beq.n	80048b0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80048aa:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <UART_SetConfig+0x31c>)
 80048ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048ae:	e026      	b.n	80048fe <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80048b0:	4b0c      	ldr	r3, [pc, #48]	@ (80048e4 <UART_SetConfig+0x320>)
 80048b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048b4:	e023      	b.n	80048fe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b6:	f7fe fd87 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 80048ba:	0003      	movs	r3, r0
 80048bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048be:	e01e      	b.n	80048fe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c0:	2380      	movs	r3, #128	@ 0x80
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048c6:	e01a      	b.n	80048fe <UART_SetConfig+0x33a>
 80048c8:	efff69f3 	.word	0xefff69f3
 80048cc:	ffffcfff 	.word	0xffffcfff
 80048d0:	40004800 	.word	0x40004800
 80048d4:	fffff4ff 	.word	0xfffff4ff
 80048d8:	40004400 	.word	0x40004400
 80048dc:	40021000 	.word	0x40021000
 80048e0:	003d0900 	.word	0x003d0900
 80048e4:	00f42400 	.word	0x00f42400
 80048e8:	080054f0 	.word	0x080054f0
      default:
        pclk = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80048f0:	231a      	movs	r3, #26
 80048f2:	2218      	movs	r2, #24
 80048f4:	189b      	adds	r3, r3, r2
 80048f6:	19db      	adds	r3, r3, r7
 80048f8:	2201      	movs	r2, #1
 80048fa:	701a      	strb	r2, [r3, #0]
        break;
 80048fc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d100      	bne.n	8004906 <UART_SetConfig+0x342>
 8004904:	e090      	b.n	8004a28 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004908:	005a      	lsls	r2, r3, #1
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	18d2      	adds	r2, r2, r3
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	0019      	movs	r1, r3
 8004918:	0010      	movs	r0, r2
 800491a:	f7fb fbf5 	bl	8000108 <__udivsi3>
 800491e:	0003      	movs	r3, r0
 8004920:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004924:	2b0f      	cmp	r3, #15
 8004926:	d921      	bls.n	800496c <UART_SetConfig+0x3a8>
 8004928:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800492a:	2380      	movs	r3, #128	@ 0x80
 800492c:	025b      	lsls	r3, r3, #9
 800492e:	429a      	cmp	r2, r3
 8004930:	d21c      	bcs.n	800496c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	b29a      	uxth	r2, r3
 8004936:	200e      	movs	r0, #14
 8004938:	2418      	movs	r4, #24
 800493a:	1903      	adds	r3, r0, r4
 800493c:	19db      	adds	r3, r3, r7
 800493e:	210f      	movs	r1, #15
 8004940:	438a      	bics	r2, r1
 8004942:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	b29b      	uxth	r3, r3
 800494a:	2207      	movs	r2, #7
 800494c:	4013      	ands	r3, r2
 800494e:	b299      	uxth	r1, r3
 8004950:	1903      	adds	r3, r0, r4
 8004952:	19db      	adds	r3, r3, r7
 8004954:	1902      	adds	r2, r0, r4
 8004956:	19d2      	adds	r2, r2, r7
 8004958:	8812      	ldrh	r2, [r2, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	1902      	adds	r2, r0, r4
 8004964:	19d2      	adds	r2, r2, r7
 8004966:	8812      	ldrh	r2, [r2, #0]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	e05d      	b.n	8004a28 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800496c:	231a      	movs	r3, #26
 800496e:	2218      	movs	r2, #24
 8004970:	189b      	adds	r3, r3, r2
 8004972:	19db      	adds	r3, r3, r7
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	e056      	b.n	8004a28 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800497a:	231b      	movs	r3, #27
 800497c:	2218      	movs	r2, #24
 800497e:	189b      	adds	r3, r3, r2
 8004980:	19db      	adds	r3, r3, r7
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d822      	bhi.n	80049ce <UART_SetConfig+0x40a>
 8004988:	009a      	lsls	r2, r3, #2
 800498a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a48 <UART_SetConfig+0x484>)
 800498c:	18d3      	adds	r3, r2, r3
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004992:	f7fe fdc9 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8004996:	0003      	movs	r3, r0
 8004998:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800499a:	e021      	b.n	80049e0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800499c:	f7fe fdda 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 80049a0:	0003      	movs	r3, r0
 80049a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049a4:	e01c      	b.n	80049e0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a6:	4b29      	ldr	r3, [pc, #164]	@ (8004a4c <UART_SetConfig+0x488>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2210      	movs	r2, #16
 80049ac:	4013      	ands	r3, r2
 80049ae:	d002      	beq.n	80049b6 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80049b0:	4b27      	ldr	r3, [pc, #156]	@ (8004a50 <UART_SetConfig+0x48c>)
 80049b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049b4:	e014      	b.n	80049e0 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80049b6:	4b27      	ldr	r3, [pc, #156]	@ (8004a54 <UART_SetConfig+0x490>)
 80049b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049ba:	e011      	b.n	80049e0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049bc:	f7fe fd04 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 80049c0:	0003      	movs	r3, r0
 80049c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049c4:	e00c      	b.n	80049e0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c6:	2380      	movs	r3, #128	@ 0x80
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049cc:	e008      	b.n	80049e0 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80049d2:	231a      	movs	r3, #26
 80049d4:	2218      	movs	r2, #24
 80049d6:	189b      	adds	r3, r3, r2
 80049d8:	19db      	adds	r3, r3, r7
 80049da:	2201      	movs	r2, #1
 80049dc:	701a      	strb	r2, [r3, #0]
        break;
 80049de:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80049e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d020      	beq.n	8004a28 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	085a      	lsrs	r2, r3, #1
 80049ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ee:	18d2      	adds	r2, r2, r3
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	0019      	movs	r1, r3
 80049f6:	0010      	movs	r0, r2
 80049f8:	f7fb fb86 	bl	8000108 <__udivsi3>
 80049fc:	0003      	movs	r3, r0
 80049fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a02:	2b0f      	cmp	r3, #15
 8004a04:	d90a      	bls.n	8004a1c <UART_SetConfig+0x458>
 8004a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a08:	2380      	movs	r3, #128	@ 0x80
 8004a0a:	025b      	lsls	r3, r3, #9
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d205      	bcs.n	8004a1c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	e005      	b.n	8004a28 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004a1c:	231a      	movs	r3, #26
 8004a1e:	2218      	movs	r2, #24
 8004a20:	189b      	adds	r3, r3, r2
 8004a22:	19db      	adds	r3, r3, r7
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	2200      	movs	r2, #0
 8004a32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a34:	231a      	movs	r3, #26
 8004a36:	2218      	movs	r2, #24
 8004a38:	189b      	adds	r3, r3, r2
 8004a3a:	19db      	adds	r3, r3, r7
 8004a3c:	781b      	ldrb	r3, [r3, #0]
}
 8004a3e:	0018      	movs	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b00e      	add	sp, #56	@ 0x38
 8004a44:	bdb0      	pop	{r4, r5, r7, pc}
 8004a46:	46c0      	nop			@ (mov r8, r8)
 8004a48:	08005514 	.word	0x08005514
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	003d0900 	.word	0x003d0900
 8004a54:	00f42400 	.word	0x00f42400

08004a58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	2201      	movs	r2, #1
 8004a66:	4013      	ands	r3, r2
 8004a68:	d00b      	beq.n	8004a82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4a4a      	ldr	r2, [pc, #296]	@ (8004b9c <UART_AdvFeatureConfig+0x144>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	0019      	movs	r1, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	2202      	movs	r2, #2
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d00b      	beq.n	8004aa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4a43      	ldr	r2, [pc, #268]	@ (8004ba0 <UART_AdvFeatureConfig+0x148>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	0019      	movs	r1, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d00b      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ba4 <UART_AdvFeatureConfig+0x14c>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aca:	2208      	movs	r2, #8
 8004acc:	4013      	ands	r3, r2
 8004ace:	d00b      	beq.n	8004ae8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4a34      	ldr	r2, [pc, #208]	@ (8004ba8 <UART_AdvFeatureConfig+0x150>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	0019      	movs	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	2210      	movs	r2, #16
 8004aee:	4013      	ands	r3, r2
 8004af0:	d00b      	beq.n	8004b0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a2c      	ldr	r2, [pc, #176]	@ (8004bac <UART_AdvFeatureConfig+0x154>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	0019      	movs	r1, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	2220      	movs	r2, #32
 8004b10:	4013      	ands	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	4a25      	ldr	r2, [pc, #148]	@ (8004bb0 <UART_AdvFeatureConfig+0x158>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	2240      	movs	r2, #64	@ 0x40
 8004b32:	4013      	ands	r3, r2
 8004b34:	d01d      	beq.n	8004b72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb4 <UART_AdvFeatureConfig+0x15c>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b52:	2380      	movs	r3, #128	@ 0x80
 8004b54:	035b      	lsls	r3, r3, #13
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d10b      	bne.n	8004b72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	4a15      	ldr	r2, [pc, #84]	@ (8004bb8 <UART_AdvFeatureConfig+0x160>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	0019      	movs	r1, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	2280      	movs	r2, #128	@ 0x80
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d00b      	beq.n	8004b94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	4a0e      	ldr	r2, [pc, #56]	@ (8004bbc <UART_AdvFeatureConfig+0x164>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }
}
 8004b94:	46c0      	nop			@ (mov r8, r8)
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b002      	add	sp, #8
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	fffdffff 	.word	0xfffdffff
 8004ba0:	fffeffff 	.word	0xfffeffff
 8004ba4:	fffbffff 	.word	0xfffbffff
 8004ba8:	ffff7fff 	.word	0xffff7fff
 8004bac:	ffffefff 	.word	0xffffefff
 8004bb0:	ffffdfff 	.word	0xffffdfff
 8004bb4:	ffefffff 	.word	0xffefffff
 8004bb8:	ff9fffff 	.word	0xff9fffff
 8004bbc:	fff7ffff 	.word	0xfff7ffff

08004bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b092      	sub	sp, #72	@ 0x48
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2284      	movs	r2, #132	@ 0x84
 8004bcc:	2100      	movs	r1, #0
 8004bce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bd0:	f7fd f852 	bl	8001c78 <HAL_GetTick>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2208      	movs	r2, #8
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d12c      	bne.n	8004c40 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be8:	2280      	movs	r2, #128	@ 0x80
 8004bea:	0391      	lsls	r1, r2, #14
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	4a46      	ldr	r2, [pc, #280]	@ (8004d08 <UART_CheckIdleState+0x148>)
 8004bf0:	9200      	str	r2, [sp, #0]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f000 f88c 	bl	8004d10 <UART_WaitOnFlagUntilTimeout>
 8004bf8:	1e03      	subs	r3, r0, #0
 8004bfa:	d021      	beq.n	8004c40 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c06:	2301      	movs	r3, #1
 8004c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0c:	f383 8810 	msr	PRIMASK, r3
}
 8004c10:	46c0      	nop			@ (mov r8, r8)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2180      	movs	r1, #128	@ 0x80
 8004c1e:	438a      	bics	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c28:	f383 8810 	msr	PRIMASK, r3
}
 8004c2c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2278      	movs	r2, #120	@ 0x78
 8004c38:	2100      	movs	r1, #0
 8004c3a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e05f      	b.n	8004d00 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2204      	movs	r2, #4
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d146      	bne.n	8004cdc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c50:	2280      	movs	r2, #128	@ 0x80
 8004c52:	03d1      	lsls	r1, r2, #15
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4a2c      	ldr	r2, [pc, #176]	@ (8004d08 <UART_CheckIdleState+0x148>)
 8004c58:	9200      	str	r2, [sp, #0]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f000 f858 	bl	8004d10 <UART_WaitOnFlagUntilTimeout>
 8004c60:	1e03      	subs	r3, r0, #0
 8004c62:	d03b      	beq.n	8004cdc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c64:	f3ef 8310 	mrs	r3, PRIMASK
 8004c68:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c6e:	2301      	movs	r3, #1
 8004c70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f383 8810 	msr	PRIMASK, r3
}
 8004c78:	46c0      	nop			@ (mov r8, r8)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4921      	ldr	r1, [pc, #132]	@ (8004d0c <UART_CheckIdleState+0x14c>)
 8004c86:	400a      	ands	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f383 8810 	msr	PRIMASK, r3
}
 8004c94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c96:	f3ef 8310 	mrs	r3, PRIMASK
 8004c9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c9c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f383 8810 	msr	PRIMASK, r3
}
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	438a      	bics	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	f383 8810 	msr	PRIMASK, r3
}
 8004cc6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2280      	movs	r2, #128	@ 0x80
 8004ccc:	2120      	movs	r1, #32
 8004cce:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2278      	movs	r2, #120	@ 0x78
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e011      	b.n	8004d00 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2280      	movs	r2, #128	@ 0x80
 8004ce6:	2120      	movs	r1, #32
 8004ce8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2278      	movs	r2, #120	@ 0x78
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	0018      	movs	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b010      	add	sp, #64	@ 0x40
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	01ffffff 	.word	0x01ffffff
 8004d0c:	fffffedf 	.word	0xfffffedf

08004d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	1dfb      	adds	r3, r7, #7
 8004d1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d20:	e04b      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	3301      	adds	r3, #1
 8004d26:	d048      	beq.n	8004dba <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d28:	f7fc ffa6 	bl	8001c78 <HAL_GetTick>
 8004d2c:	0002      	movs	r2, r0
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e04b      	b.n	8004dda <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d035      	beq.n	8004dba <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2208      	movs	r2, #8
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d111      	bne.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2208      	movs	r2, #8
 8004d62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	0018      	movs	r0, r3
 8004d68:	f000 f906 	bl	8004f78 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2284      	movs	r2, #132	@ 0x84
 8004d70:	2108      	movs	r1, #8
 8004d72:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2278      	movs	r2, #120	@ 0x78
 8004d78:	2100      	movs	r1, #0
 8004d7a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e02c      	b.n	8004dda <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69da      	ldr	r2, [r3, #28]
 8004d86:	2380      	movs	r3, #128	@ 0x80
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	401a      	ands	r2, r3
 8004d8c:	2380      	movs	r3, #128	@ 0x80
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d112      	bne.n	8004dba <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2280      	movs	r2, #128	@ 0x80
 8004d9a:	0112      	lsls	r2, r2, #4
 8004d9c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	0018      	movs	r0, r3
 8004da2:	f000 f8e9 	bl	8004f78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2284      	movs	r2, #132	@ 0x84
 8004daa:	2120      	movs	r1, #32
 8004dac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2278      	movs	r2, #120	@ 0x78
 8004db2:	2100      	movs	r1, #0
 8004db4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e00f      	b.n	8004dda <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	425a      	negs	r2, r3
 8004dca:	4153      	adcs	r3, r2
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	001a      	movs	r2, r3
 8004dd0:	1dfb      	adds	r3, r7, #7
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d0a4      	beq.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	0018      	movs	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b004      	add	sp, #16
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b090      	sub	sp, #64	@ 0x40
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	1dbb      	adds	r3, r7, #6
 8004df0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	1dba      	adds	r2, r7, #6
 8004dfc:	2158      	movs	r1, #88	@ 0x58
 8004dfe:	8812      	ldrh	r2, [r2, #0]
 8004e00:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1dba      	adds	r2, r7, #6
 8004e06:	215a      	movs	r1, #90	@ 0x5a
 8004e08:	8812      	ldrh	r2, [r2, #0]
 8004e0a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	2380      	movs	r3, #128	@ 0x80
 8004e18:	015b      	lsls	r3, r3, #5
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d10d      	bne.n	8004e3a <UART_Start_Receive_IT+0x56>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d104      	bne.n	8004e30 <UART_Start_Receive_IT+0x4c>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	225c      	movs	r2, #92	@ 0x5c
 8004e2a:	4950      	ldr	r1, [pc, #320]	@ (8004f6c <UART_Start_Receive_IT+0x188>)
 8004e2c:	5299      	strh	r1, [r3, r2]
 8004e2e:	e02e      	b.n	8004e8e <UART_Start_Receive_IT+0xaa>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	225c      	movs	r2, #92	@ 0x5c
 8004e34:	21ff      	movs	r1, #255	@ 0xff
 8004e36:	5299      	strh	r1, [r3, r2]
 8004e38:	e029      	b.n	8004e8e <UART_Start_Receive_IT+0xaa>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10d      	bne.n	8004e5e <UART_Start_Receive_IT+0x7a>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d104      	bne.n	8004e54 <UART_Start_Receive_IT+0x70>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	225c      	movs	r2, #92	@ 0x5c
 8004e4e:	21ff      	movs	r1, #255	@ 0xff
 8004e50:	5299      	strh	r1, [r3, r2]
 8004e52:	e01c      	b.n	8004e8e <UART_Start_Receive_IT+0xaa>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	225c      	movs	r2, #92	@ 0x5c
 8004e58:	217f      	movs	r1, #127	@ 0x7f
 8004e5a:	5299      	strh	r1, [r3, r2]
 8004e5c:	e017      	b.n	8004e8e <UART_Start_Receive_IT+0xaa>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	2380      	movs	r3, #128	@ 0x80
 8004e64:	055b      	lsls	r3, r3, #21
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d10d      	bne.n	8004e86 <UART_Start_Receive_IT+0xa2>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d104      	bne.n	8004e7c <UART_Start_Receive_IT+0x98>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	225c      	movs	r2, #92	@ 0x5c
 8004e76:	217f      	movs	r1, #127	@ 0x7f
 8004e78:	5299      	strh	r1, [r3, r2]
 8004e7a:	e008      	b.n	8004e8e <UART_Start_Receive_IT+0xaa>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	225c      	movs	r2, #92	@ 0x5c
 8004e80:	213f      	movs	r1, #63	@ 0x3f
 8004e82:	5299      	strh	r1, [r3, r2]
 8004e84:	e003      	b.n	8004e8e <UART_Start_Receive_IT+0xaa>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	225c      	movs	r2, #92	@ 0x5c
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2284      	movs	r2, #132	@ 0x84
 8004e92:	2100      	movs	r1, #0
 8004e94:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2280      	movs	r2, #128	@ 0x80
 8004e9a:	2122      	movs	r1, #34	@ 0x22
 8004e9c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eae:	f383 8810 	msr	PRIMASK, r3
}
 8004eb2:	46c0      	nop			@ (mov r8, r8)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	609a      	str	r2, [r3, #8]
 8004ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eca:	f383 8810 	msr	PRIMASK, r3
}
 8004ece:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	2380      	movs	r3, #128	@ 0x80
 8004ed6:	015b      	lsls	r3, r3, #5
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d107      	bne.n	8004eec <UART_Start_Receive_IT+0x108>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d103      	bne.n	8004eec <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a22      	ldr	r2, [pc, #136]	@ (8004f70 <UART_Start_Receive_IT+0x18c>)
 8004ee8:	669a      	str	r2, [r3, #104]	@ 0x68
 8004eea:	e002      	b.n	8004ef2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a21      	ldr	r2, [pc, #132]	@ (8004f74 <UART_Start_Receive_IT+0x190>)
 8004ef0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d019      	beq.n	8004f2e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004efa:	f3ef 8310 	mrs	r3, PRIMASK
 8004efe:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f00:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f04:	2301      	movs	r3, #1
 8004f06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	f383 8810 	msr	PRIMASK, r3
}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2190      	movs	r1, #144	@ 0x90
 8004f1c:	0049      	lsls	r1, r1, #1
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	f383 8810 	msr	PRIMASK, r3
}
 8004f2c:	e018      	b.n	8004f60 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f32:	613b      	str	r3, [r7, #16]
  return(result);
 8004f34:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004f36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f38:	2301      	movs	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f383 8810 	msr	PRIMASK, r3
}
 8004f42:	46c0      	nop			@ (mov r8, r8)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2120      	movs	r1, #32
 8004f50:	430a      	orrs	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f383 8810 	msr	PRIMASK, r3
}
 8004f5e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	0018      	movs	r0, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b010      	add	sp, #64	@ 0x40
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	000001ff 	.word	0x000001ff
 8004f70:	08005289 	.word	0x08005289
 8004f74:	080050c5 	.word	0x080050c5

08004f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08e      	sub	sp, #56	@ 0x38
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f80:	f3ef 8310 	mrs	r3, PRIMASK
 8004f84:	617b      	str	r3, [r7, #20]
  return(result);
 8004f86:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	f383 8810 	msr	PRIMASK, r3
}
 8004f94:	46c0      	nop			@ (mov r8, r8)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4926      	ldr	r1, [pc, #152]	@ (800503c <UART_EndRxTransfer+0xc4>)
 8004fa2:	400a      	ands	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f383 8810 	msr	PRIMASK, r3
}
 8004fb0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb6:	623b      	str	r3, [r7, #32]
  return(result);
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fba:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	f383 8810 	msr	PRIMASK, r3
}
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	438a      	bics	r2, r1
 8004fd6:	609a      	str	r2, [r3, #8]
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fde:	f383 8810 	msr	PRIMASK, r3
}
 8004fe2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d118      	bne.n	800501e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fec:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			@ (mov r8, r8)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2110      	movs	r1, #16
 800500e:	438a      	bics	r2, r1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f383 8810 	msr	PRIMASK, r3
}
 800501c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2280      	movs	r2, #128	@ 0x80
 8005022:	2120      	movs	r1, #32
 8005024:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005032:	46c0      	nop			@ (mov r8, r8)
 8005034:	46bd      	mov	sp, r7
 8005036:	b00e      	add	sp, #56	@ 0x38
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	fffffedf 	.word	0xfffffedf

08005040 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	225a      	movs	r2, #90	@ 0x5a
 8005052:	2100      	movs	r1, #0
 8005054:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2252      	movs	r2, #82	@ 0x52
 800505a:	2100      	movs	r1, #0
 800505c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	0018      	movs	r0, r3
 8005062:	f7ff fa9b 	bl	800459c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	46bd      	mov	sp, r7
 800506a:	b004      	add	sp, #16
 800506c:	bd80      	pop	{r7, pc}

0800506e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005076:	f3ef 8310 	mrs	r3, PRIMASK
 800507a:	60bb      	str	r3, [r7, #8]
  return(result);
 800507c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	2301      	movs	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f383 8810 	msr	PRIMASK, r3
}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2140      	movs	r1, #64	@ 0x40
 8005098:	438a      	bics	r2, r1
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f383 8810 	msr	PRIMASK, r3
}
 80050a6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	0018      	movs	r0, r3
 80050b8:	f7ff fa68 	bl	800458c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050bc:	46c0      	nop			@ (mov r8, r8)
 80050be:	46bd      	mov	sp, r7
 80050c0:	b006      	add	sp, #24
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b094      	sub	sp, #80	@ 0x50
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80050cc:	204e      	movs	r0, #78	@ 0x4e
 80050ce:	183b      	adds	r3, r7, r0
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	215c      	movs	r1, #92	@ 0x5c
 80050d4:	5a52      	ldrh	r2, [r2, r1]
 80050d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2280      	movs	r2, #128	@ 0x80
 80050dc:	589b      	ldr	r3, [r3, r2]
 80050de:	2b22      	cmp	r3, #34	@ 0x22
 80050e0:	d000      	beq.n	80050e4 <UART_RxISR_8BIT+0x20>
 80050e2:	e0bf      	b.n	8005264 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050ea:	214c      	movs	r1, #76	@ 0x4c
 80050ec:	187b      	adds	r3, r7, r1
 80050ee:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050f0:	187b      	adds	r3, r7, r1
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	183b      	adds	r3, r7, r0
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b2d9      	uxtb	r1, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005100:	400a      	ands	r2, r1
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	225a      	movs	r2, #90	@ 0x5a
 8005114:	5a9b      	ldrh	r3, [r3, r2]
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b299      	uxth	r1, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	225a      	movs	r2, #90	@ 0x5a
 8005120:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	225a      	movs	r2, #90	@ 0x5a
 8005126:	5a9b      	ldrh	r3, [r3, r2]
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d000      	beq.n	8005130 <UART_RxISR_8BIT+0x6c>
 800512e:	e0a1      	b.n	8005274 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005130:	f3ef 8310 	mrs	r3, PRIMASK
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800513a:	2301      	movs	r3, #1
 800513c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005140:	f383 8810 	msr	PRIMASK, r3
}
 8005144:	46c0      	nop			@ (mov r8, r8)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	494a      	ldr	r1, [pc, #296]	@ (800527c <UART_RxISR_8BIT+0x1b8>)
 8005152:	400a      	ands	r2, r1
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800515a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515c:	f383 8810 	msr	PRIMASK, r3
}
 8005160:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005162:	f3ef 8310 	mrs	r3, PRIMASK
 8005166:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516a:	647b      	str	r3, [r7, #68]	@ 0x44
 800516c:	2301      	movs	r3, #1
 800516e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005172:	f383 8810 	msr	PRIMASK, r3
}
 8005176:	46c0      	nop			@ (mov r8, r8)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2101      	movs	r1, #1
 8005184:	438a      	bics	r2, r1
 8005186:	609a      	str	r2, [r3, #8]
 8005188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800518a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518e:	f383 8810 	msr	PRIMASK, r3
}
 8005192:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2280      	movs	r2, #128	@ 0x80
 8005198:	2120      	movs	r1, #32
 800519a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a34      	ldr	r2, [pc, #208]	@ (8005280 <UART_RxISR_8BIT+0x1bc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01f      	beq.n	80051f2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	2380      	movs	r3, #128	@ 0x80
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	4013      	ands	r3, r2
 80051be:	d018      	beq.n	80051f2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c0:	f3ef 8310 	mrs	r3, PRIMASK
 80051c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80051c6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ca:	2301      	movs	r3, #1
 80051cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f383 8810 	msr	PRIMASK, r3
}
 80051d4:	46c0      	nop			@ (mov r8, r8)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4928      	ldr	r1, [pc, #160]	@ (8005284 <UART_RxISR_8BIT+0x1c0>)
 80051e2:	400a      	ands	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	f383 8810 	msr	PRIMASK, r3
}
 80051f0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d12f      	bne.n	800525a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005200:	f3ef 8310 	mrs	r3, PRIMASK
 8005204:	60fb      	str	r3, [r7, #12]
  return(result);
 8005206:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005208:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800520a:	2301      	movs	r3, #1
 800520c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f383 8810 	msr	PRIMASK, r3
}
 8005214:	46c0      	nop			@ (mov r8, r8)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2110      	movs	r1, #16
 8005222:	438a      	bics	r2, r1
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005228:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f383 8810 	msr	PRIMASK, r3
}
 8005230:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	2210      	movs	r2, #16
 800523a:	4013      	ands	r3, r2
 800523c:	2b10      	cmp	r3, #16
 800523e:	d103      	bne.n	8005248 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2210      	movs	r2, #16
 8005246:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2258      	movs	r2, #88	@ 0x58
 800524c:	5a9a      	ldrh	r2, [r3, r2]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	0011      	movs	r1, r2
 8005252:	0018      	movs	r0, r3
 8005254:	f7ff f9aa 	bl	80045ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005258:	e00c      	b.n	8005274 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	0018      	movs	r0, r3
 800525e:	f7fc fb6d 	bl	800193c <HAL_UART_RxCpltCallback>
}
 8005262:	e007      	b.n	8005274 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2108      	movs	r1, #8
 8005270:	430a      	orrs	r2, r1
 8005272:	619a      	str	r2, [r3, #24]
}
 8005274:	46c0      	nop			@ (mov r8, r8)
 8005276:	46bd      	mov	sp, r7
 8005278:	b014      	add	sp, #80	@ 0x50
 800527a:	bd80      	pop	{r7, pc}
 800527c:	fffffedf 	.word	0xfffffedf
 8005280:	40004800 	.word	0x40004800
 8005284:	fbffffff 	.word	0xfbffffff

08005288 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b094      	sub	sp, #80	@ 0x50
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005290:	204e      	movs	r0, #78	@ 0x4e
 8005292:	183b      	adds	r3, r7, r0
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	215c      	movs	r1, #92	@ 0x5c
 8005298:	5a52      	ldrh	r2, [r2, r1]
 800529a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2280      	movs	r2, #128	@ 0x80
 80052a0:	589b      	ldr	r3, [r3, r2]
 80052a2:	2b22      	cmp	r3, #34	@ 0x22
 80052a4:	d000      	beq.n	80052a8 <UART_RxISR_16BIT+0x20>
 80052a6:	e0bf      	b.n	8005428 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052ae:	214c      	movs	r1, #76	@ 0x4c
 80052b0:	187b      	adds	r3, r7, r1
 80052b2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80052ba:	187b      	adds	r3, r7, r1
 80052bc:	183a      	adds	r2, r7, r0
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	8812      	ldrh	r2, [r2, #0]
 80052c2:	4013      	ands	r3, r2
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	225a      	movs	r2, #90	@ 0x5a
 80052d8:	5a9b      	ldrh	r3, [r3, r2]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b299      	uxth	r1, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	225a      	movs	r2, #90	@ 0x5a
 80052e4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	225a      	movs	r2, #90	@ 0x5a
 80052ea:	5a9b      	ldrh	r3, [r3, r2]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d000      	beq.n	80052f4 <UART_RxISR_16BIT+0x6c>
 80052f2:	e0a1      	b.n	8005438 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f4:	f3ef 8310 	mrs	r3, PRIMASK
 80052f8:	623b      	str	r3, [r7, #32]
  return(result);
 80052fa:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052fe:	2301      	movs	r3, #1
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	f383 8810 	msr	PRIMASK, r3
}
 8005308:	46c0      	nop			@ (mov r8, r8)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	494a      	ldr	r1, [pc, #296]	@ (8005440 <UART_RxISR_16BIT+0x1b8>)
 8005316:	400a      	ands	r2, r1
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800531c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005320:	f383 8810 	msr	PRIMASK, r3
}
 8005324:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005326:	f3ef 8310 	mrs	r3, PRIMASK
 800532a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005330:	2301      	movs	r3, #1
 8005332:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005336:	f383 8810 	msr	PRIMASK, r3
}
 800533a:	46c0      	nop			@ (mov r8, r8)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2101      	movs	r1, #1
 8005348:	438a      	bics	r2, r1
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800534e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005352:	f383 8810 	msr	PRIMASK, r3
}
 8005356:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2280      	movs	r2, #128	@ 0x80
 800535c:	2120      	movs	r1, #32
 800535e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a34      	ldr	r2, [pc, #208]	@ (8005444 <UART_RxISR_16BIT+0x1bc>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d01f      	beq.n	80053b6 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	2380      	movs	r3, #128	@ 0x80
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	4013      	ands	r3, r2
 8005382:	d018      	beq.n	80053b6 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005384:	f3ef 8310 	mrs	r3, PRIMASK
 8005388:	617b      	str	r3, [r7, #20]
  return(result);
 800538a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800538c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800538e:	2301      	movs	r3, #1
 8005390:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f383 8810 	msr	PRIMASK, r3
}
 8005398:	46c0      	nop			@ (mov r8, r8)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4928      	ldr	r1, [pc, #160]	@ (8005448 <UART_RxISR_16BIT+0x1c0>)
 80053a6:	400a      	ands	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	f383 8810 	msr	PRIMASK, r3
}
 80053b4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d12f      	bne.n	800541e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c4:	f3ef 8310 	mrs	r3, PRIMASK
 80053c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80053ca:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053ce:	2301      	movs	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f383 8810 	msr	PRIMASK, r3
}
 80053d8:	46c0      	nop			@ (mov r8, r8)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2110      	movs	r1, #16
 80053e6:	438a      	bics	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f383 8810 	msr	PRIMASK, r3
}
 80053f4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	2210      	movs	r2, #16
 80053fe:	4013      	ands	r3, r2
 8005400:	2b10      	cmp	r3, #16
 8005402:	d103      	bne.n	800540c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2210      	movs	r2, #16
 800540a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2258      	movs	r2, #88	@ 0x58
 8005410:	5a9a      	ldrh	r2, [r3, r2]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	0011      	movs	r1, r2
 8005416:	0018      	movs	r0, r3
 8005418:	f7ff f8c8 	bl	80045ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800541c:	e00c      	b.n	8005438 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	0018      	movs	r0, r3
 8005422:	f7fc fa8b 	bl	800193c <HAL_UART_RxCpltCallback>
}
 8005426:	e007      	b.n	8005438 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2108      	movs	r1, #8
 8005434:	430a      	orrs	r2, r1
 8005436:	619a      	str	r2, [r3, #24]
}
 8005438:	46c0      	nop			@ (mov r8, r8)
 800543a:	46bd      	mov	sp, r7
 800543c:	b014      	add	sp, #80	@ 0x50
 800543e:	bd80      	pop	{r7, pc}
 8005440:	fffffedf 	.word	0xfffffedf
 8005444:	40004800 	.word	0x40004800
 8005448:	fbffffff 	.word	0xfbffffff

0800544c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005454:	46c0      	nop			@ (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}

0800545c <memset>:
 800545c:	0003      	movs	r3, r0
 800545e:	1882      	adds	r2, r0, r2
 8005460:	4293      	cmp	r3, r2
 8005462:	d100      	bne.n	8005466 <memset+0xa>
 8005464:	4770      	bx	lr
 8005466:	7019      	strb	r1, [r3, #0]
 8005468:	3301      	adds	r3, #1
 800546a:	e7f9      	b.n	8005460 <memset+0x4>

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	2600      	movs	r6, #0
 8005470:	4c0c      	ldr	r4, [pc, #48]	@ (80054a4 <__libc_init_array+0x38>)
 8005472:	4d0d      	ldr	r5, [pc, #52]	@ (80054a8 <__libc_init_array+0x3c>)
 8005474:	1b64      	subs	r4, r4, r5
 8005476:	10a4      	asrs	r4, r4, #2
 8005478:	42a6      	cmp	r6, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	2600      	movs	r6, #0
 800547e:	f000 f819 	bl	80054b4 <_init>
 8005482:	4c0a      	ldr	r4, [pc, #40]	@ (80054ac <__libc_init_array+0x40>)
 8005484:	4d0a      	ldr	r5, [pc, #40]	@ (80054b0 <__libc_init_array+0x44>)
 8005486:	1b64      	subs	r4, r4, r5
 8005488:	10a4      	asrs	r4, r4, #2
 800548a:	42a6      	cmp	r6, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	00b3      	lsls	r3, r6, #2
 8005492:	58eb      	ldr	r3, [r5, r3]
 8005494:	4798      	blx	r3
 8005496:	3601      	adds	r6, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	00b3      	lsls	r3, r6, #2
 800549c:	58eb      	ldr	r3, [r5, r3]
 800549e:	4798      	blx	r3
 80054a0:	3601      	adds	r6, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	08005540 	.word	0x08005540
 80054a8:	08005540 	.word	0x08005540
 80054ac:	08005544 	.word	0x08005544
 80054b0:	08005540 	.word	0x08005540

080054b4 <_init>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	46c0      	nop			@ (mov r8, r8)
 80054b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ba:	bc08      	pop	{r3}
 80054bc:	469e      	mov	lr, r3
 80054be:	4770      	bx	lr

080054c0 <_fini>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	46c0      	nop			@ (mov r8, r8)
 80054c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c6:	bc08      	pop	{r3}
 80054c8:	469e      	mov	lr, r3
 80054ca:	4770      	bx	lr
