
Test low power modes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d00  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003dc0  08003dc0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e8c  08003e8c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e8c  08003e8c  00004e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e94  08003e94  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e94  08003e94  00004e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e98  08003e98  00004e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003e9c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08003ea8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003ea8  000051c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf23  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002240  00000000  00000000  00011f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00014198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a3  00000000  00000000  00014cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012622  00000000  00000000  0001556b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec9e  00000000  00000000  00027b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070c0d  00000000  00000000  0003682b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7438  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002740  00000000  00000000  000a747c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  000a9bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003da8 	.word	0x08003da8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003da8 	.word	0x08003da8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1824      	adds	r4, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	42a3      	cmp	r3, r4
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	@ 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0424      	lsls	r4, r4, #16
 80002be:	1960      	adds	r0, r4, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			@ (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	@ (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fc25 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f8cd 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 fa4d 	bl	8000964 <MX_GPIO_Init>
  MX_ADC_Init();
 80004ca:	f000 f951 	bl	8000770 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 80004ce:	f000 f9b5 	bl	800083c <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 f9e3 	bl	800089c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80004d6:	f000 fa11 	bl	80008fc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // Met la pin à 1
 80004da:	23a0      	movs	r3, #160	@ 0xa0
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2201      	movs	r2, #1
 80004e0:	2102      	movs	r1, #2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 f994 	bl	8001810 <HAL_GPIO_WritePin>

  /* ### Wake up from STAND-BY mode */
  /* STEP 1 : Check if the stand by (SBF - Stand By Flag) mode is set => Test if the STM is waking up from SB mode */
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80004e8:	4b51      	ldr	r3, [pc, #324]	@ (8000630 <main+0x178>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	2202      	movs	r2, #2
 80004ee:	4013      	ands	r3, r2
 80004f0:	2b02      	cmp	r3, #2
 80004f2:	d134      	bne.n	800055e <main+0xa6>
  {
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); //Clear SBF
 80004f4:	4b4e      	ldr	r3, [pc, #312]	@ (8000630 <main+0x178>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	4b4d      	ldr	r3, [pc, #308]	@ (8000630 <main+0x178>)
 80004fa:	2108      	movs	r1, #8
 80004fc:	430a      	orrs	r2, r1
 80004fe:	601a      	str	r2, [r3, #0]

	  /* STEP 2 : Display a string announcing the wake up from SB mode */
	  str = "Wake up from Stand-by mode\n\n";
 8000500:	4b4c      	ldr	r3, [pc, #304]	@ (8000634 <main+0x17c>)
 8000502:	4a4d      	ldr	r2, [pc, #308]	@ (8000638 <main+0x180>)
 8000504:	601a      	str	r2, [r3, #0]
	  //HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), 10);
 8000506:	4b4b      	ldr	r3, [pc, #300]	@ (8000634 <main+0x17c>)
 8000508:	681c      	ldr	r4, [r3, #0]
 800050a:	4b4a      	ldr	r3, [pc, #296]	@ (8000634 <main+0x17c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff fdfa 	bl	8000108 <strlen>
 8000514:	0003      	movs	r3, r0
 8000516:	b29a      	uxth	r2, r3
 8000518:	4848      	ldr	r0, [pc, #288]	@ (800063c <main+0x184>)
 800051a:	230a      	movs	r3, #10
 800051c:	0021      	movs	r1, r4
 800051e:	f002 fbbb 	bl	8002c98 <HAL_UART_Transmit>

	  /* STEP 3 : Blink led */
	  for (int i=0 ; i<20 ; i++)
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	e00a      	b.n	800053e <main+0x86>
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000528:	4b45      	ldr	r3, [pc, #276]	@ (8000640 <main+0x188>)
 800052a:	2108      	movs	r1, #8
 800052c:	0018      	movs	r0, r3
 800052e:	f001 f98c 	bl	800184a <HAL_GPIO_TogglePin>
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
		  HAL_Delay(200);
 8000532:	20c8      	movs	r0, #200	@ 0xc8
 8000534:	f000 fc5a 	bl	8000dec <HAL_Delay>
	  for (int i=0 ; i<20 ; i++)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3301      	adds	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b13      	cmp	r3, #19
 8000542:	ddf1      	ble.n	8000528 <main+0x70>
	  }

	  /* STEP 4 : Disable the wake up pin (A0) */
	  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8000544:	2380      	movs	r3, #128	@ 0x80
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	0018      	movs	r0, r3
 800054a:	f001 f9b7 	bl	80018bc <HAL_PWR_DisableWakeUpPin>

	  /* STEP 5 : Disable RTC Wake Up */
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800054e:	4b3d      	ldr	r3, [pc, #244]	@ (8000644 <main+0x18c>)
 8000550:	0018      	movs	r0, r3
 8000552:	f002 fab1 	bl	8002ab8 <HAL_RTCEx_DeactivateWakeUpTimer>

	  HAL_Delay(3000);
 8000556:	4b3c      	ldr	r3, [pc, #240]	@ (8000648 <main+0x190>)
 8000558:	0018      	movs	r0, r3
 800055a:	f000 fc47 	bl	8000dec <HAL_Delay>
  }

  /* ### Enter STAND-BY mode */
  /* STEP 1 : Clear the Wake-Up (WU) flag*/
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); //Clear Wake Up Flag
 800055e:	4b34      	ldr	r3, [pc, #208]	@ (8000630 <main+0x178>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b33      	ldr	r3, [pc, #204]	@ (8000630 <main+0x178>)
 8000564:	2104      	movs	r1, #4
 8000566:	430a      	orrs	r2, r1
 8000568:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF); //Clear RTC Wake Up Flag
 800056a:	4b36      	ldr	r3, [pc, #216]	@ (8000644 <main+0x18c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	22ff      	movs	r2, #255	@ 0xff
 8000572:	401a      	ands	r2, r3
 8000574:	4b33      	ldr	r3, [pc, #204]	@ (8000644 <main+0x18c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4934      	ldr	r1, [pc, #208]	@ (800064c <main+0x194>)
 800057a:	430a      	orrs	r2, r1
 800057c:	60da      	str	r2, [r3, #12]

  /* STEP 2 : Display a string announcing the upcoming entry into SB mode */
  str = "Upcoming entry into Stand-by mode\n\n";
 800057e:	4b2d      	ldr	r3, [pc, #180]	@ (8000634 <main+0x17c>)
 8000580:	4a33      	ldr	r2, [pc, #204]	@ (8000650 <main+0x198>)
 8000582:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000584:	4b2b      	ldr	r3, [pc, #172]	@ (8000634 <main+0x17c>)
 8000586:	681c      	ldr	r4, [r3, #0]
 8000588:	4b2a      	ldr	r3, [pc, #168]	@ (8000634 <main+0x17c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	0018      	movs	r0, r3
 800058e:	f7ff fdbb 	bl	8000108 <strlen>
 8000592:	0003      	movs	r3, r0
 8000594:	b29a      	uxth	r2, r3
 8000596:	2301      	movs	r3, #1
 8000598:	425b      	negs	r3, r3
 800059a:	4828      	ldr	r0, [pc, #160]	@ (800063c <main+0x184>)
 800059c:	0021      	movs	r1, r4
 800059e:	f002 fb7b 	bl	8002c98 <HAL_UART_Transmit>

  /* STEP 3 : Blink led */
  for (int i=0 ; i<5 ; i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	e00b      	b.n	80005c0 <main+0x108>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80005a8:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <main+0x188>)
 80005aa:	2108      	movs	r1, #8
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 f94c 	bl	800184a <HAL_GPIO_TogglePin>
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
  	HAL_Delay(750);
 80005b2:	4b28      	ldr	r3, [pc, #160]	@ (8000654 <main+0x19c>)
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 fc19 	bl	8000dec <HAL_Delay>
  for (int i=0 ; i<5 ; i++)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	ddf0      	ble.n	80005a8 <main+0xf0>
  }

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Met la pin à 1
 80005c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <main+0x188>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	2108      	movs	r1, #8
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 f91f 	bl	8001810 <HAL_GPIO_WritePin>
  HAL_Delay(3000); // Attendre 1 seconde
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <main+0x190>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 fc09 	bl	8000dec <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Remet la pin à 0
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <main+0x188>)
 80005dc:	2200      	movs	r2, #0
 80005de:	2108      	movs	r1, #8
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 f915 	bl	8001810 <HAL_GPIO_WritePin>

  /* STEP 4 : Enable the Wake-Up (WU) pin*/
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80005e6:	2380      	movs	r3, #128	@ 0x80
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 f956 	bl	800189c <HAL_PWR_EnableWakeUpPin>
   * To configure the wake up timer to 5s the WakeUpCounter is set to 0x2710
   * RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
   * Wake-up time base = 16 /(32kHz) = 0.0005 seconds
   * ==> WakeUpCounter = ~5s/0.0005s = 20000 = 0x2710
   */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x9C40, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80005f0:	4919      	ldr	r1, [pc, #100]	@ (8000658 <main+0x1a0>)
 80005f2:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <main+0x18c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	0018      	movs	r0, r3
 80005f8:	f002 f986 	bl	8002908 <HAL_RTCEx_SetWakeUpTimer_IT>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <main+0x14c>
  {
	 Error_Handler();
 8000600:	f000 fa1a 	bl	8000a38 <Error_Handler>
  }

  /* STEP 6 : Display a string announcing the upcoming entry into SB mode */
  str = "Stand-By mode activated\n\n";
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <main+0x17c>)
 8000606:	4a15      	ldr	r2, [pc, #84]	@ (800065c <main+0x1a4>)
 8000608:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <main+0x17c>)
 800060c:	681c      	ldr	r4, [r3, #0]
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <main+0x17c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff fd78 	bl	8000108 <strlen>
 8000618:	0003      	movs	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	2301      	movs	r3, #1
 800061e:	425b      	negs	r3, r3
 8000620:	4806      	ldr	r0, [pc, #24]	@ (800063c <main+0x184>)
 8000622:	0021      	movs	r1, r4
 8000624:	f002 fb38 	bl	8002c98 <HAL_UART_Transmit>

  /* STEP 7 : Enter Stand-by mode */
  HAL_PWR_EnterSTANDBYMode();
 8000628:	f001 f95a 	bl	80018e0 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	e7fd      	b.n	800062c <main+0x174>
 8000630:	40007000 	.word	0x40007000
 8000634:	200001b8 	.word	0x200001b8
 8000638:	08003dc0 	.word	0x08003dc0
 800063c:	2000010c 	.word	0x2000010c
 8000640:	50000400 	.word	0x50000400
 8000644:	20000194 	.word	0x20000194
 8000648:	00000bb8 	.word	0x00000bb8
 800064c:	fffffb7f 	.word	0xfffffb7f
 8000650:	08003de0 	.word	0x08003de0
 8000654:	000002ee 	.word	0x000002ee
 8000658:	00009c40 	.word	0x00009c40
 800065c:	08003e04 	.word	0x08003e04

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b099      	sub	sp, #100	@ 0x64
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	242c      	movs	r4, #44	@ 0x2c
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2334      	movs	r3, #52	@ 0x34
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f003 fb6d 	bl	8003d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000676:	2318      	movs	r3, #24
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	0018      	movs	r0, r3
 800067c:	2314      	movs	r3, #20
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f003 fb65 	bl	8003d50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000686:	003b      	movs	r3, r7
 8000688:	0018      	movs	r0, r3
 800068a:	2318      	movs	r3, #24
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f003 fb5e 	bl	8003d50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	4b33      	ldr	r3, [pc, #204]	@ (8000764 <SystemClock_Config+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a33      	ldr	r2, [pc, #204]	@ (8000768 <SystemClock_Config+0x108>)
 800069a:	401a      	ands	r2, r3
 800069c:	4b31      	ldr	r3, [pc, #196]	@ (8000764 <SystemClock_Config+0x104>)
 800069e:	2180      	movs	r1, #128	@ 0x80
 80006a0:	0109      	lsls	r1, r1, #4
 80006a2:	430a      	orrs	r2, r1
 80006a4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a6:	f001 f8eb 	bl	8001880 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006aa:	4b30      	ldr	r3, [pc, #192]	@ (800076c <SystemClock_Config+0x10c>)
 80006ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80006ae:	4b2f      	ldr	r3, [pc, #188]	@ (800076c <SystemClock_Config+0x10c>)
 80006b0:	492d      	ldr	r1, [pc, #180]	@ (8000768 <SystemClock_Config+0x108>)
 80006b2:	400a      	ands	r2, r1
 80006b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2206      	movs	r2, #6
 80006ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2280      	movs	r2, #128	@ 0x80
 80006c0:	0052      	lsls	r2, r2, #1
 80006c2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	0021      	movs	r1, r4
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2201      	movs	r2, #1
 80006ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2210      	movs	r2, #16
 80006d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2202      	movs	r2, #2
 80006d6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2280      	movs	r2, #128	@ 0x80
 80006e2:	02d2      	lsls	r2, r2, #11
 80006e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	03d2      	lsls	r2, r2, #15
 80006ec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 f90b 	bl	800190c <HAL_RCC_OscConfig>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006fa:	f000 f99d 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	2118      	movs	r1, #24
 8000700:	187b      	adds	r3, r7, r1
 8000702:	220f      	movs	r2, #15
 8000704:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2203      	movs	r2, #3
 800070a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2101      	movs	r1, #1
 8000722:	0018      	movs	r0, r3
 8000724:	f001 fc6e 	bl	8002004 <HAL_RCC_ClockConfig>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800072c:	f000 f984 	bl	8000a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 8000730:	003b      	movs	r3, r7
 8000732:	2226      	movs	r2, #38	@ 0x26
 8000734:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000736:	003b      	movs	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800073c:	003b      	movs	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000742:	003b      	movs	r3, r7
 8000744:	2280      	movs	r2, #128	@ 0x80
 8000746:	0252      	lsls	r2, r2, #9
 8000748:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074a:	003b      	movs	r3, r7
 800074c:	0018      	movs	r0, r3
 800074e:	f001 fe7d 	bl	800244c <HAL_RCCEx_PeriphCLKConfig>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000756:	f000 f96f 	bl	8000a38 <Error_Handler>
  }
}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b019      	add	sp, #100	@ 0x64
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	40007000 	.word	0x40007000
 8000768:	ffffe7ff 	.word	0xffffe7ff
 800076c:	40021000 	.word	0x40021000

08000770 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	003b      	movs	r3, r7
 8000778:	0018      	movs	r0, r3
 800077a:	2308      	movs	r3, #8
 800077c:	001a      	movs	r2, r3
 800077e:	2100      	movs	r1, #0
 8000780:	f003 fae6 	bl	8003d50 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000784:	4b2a      	ldr	r3, [pc, #168]	@ (8000830 <MX_ADC_Init+0xc0>)
 8000786:	4a2b      	ldr	r2, [pc, #172]	@ (8000834 <MX_ADC_Init+0xc4>)
 8000788:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800078a:	4b29      	ldr	r3, [pc, #164]	@ (8000830 <MX_ADC_Init+0xc0>)
 800078c:	2200      	movs	r2, #0
 800078e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000790:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <MX_ADC_Init+0xc0>)
 8000792:	2280      	movs	r2, #128	@ 0x80
 8000794:	05d2      	lsls	r2, r2, #23
 8000796:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000798:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <MX_ADC_Init+0xc0>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800079e:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80007a4:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007aa:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007b2:	2220      	movs	r2, #32
 80007b4:	2100      	movs	r1, #0
 80007b6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007ba:	2221      	movs	r2, #33	@ 0x21
 80007bc:	2100      	movs	r1, #0
 80007be:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007c8:	22c2      	movs	r2, #194	@ 0xc2
 80007ca:	32ff      	adds	r2, #255	@ 0xff
 80007cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007d0:	222c      	movs	r2, #44	@ 0x2c
 80007d2:	2100      	movs	r1, #0
 80007d4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007d8:	2204      	movs	r2, #4
 80007da:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_ADC_Init+0xc0>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 fb1c 	bl	8000e34 <HAL_ADC_Init>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000800:	f000 f91a 	bl	8000a38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000804:	003b      	movs	r3, r7
 8000806:	4a0c      	ldr	r2, [pc, #48]	@ (8000838 <MX_ADC_Init+0xc8>)
 8000808:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800080a:	003b      	movs	r3, r7
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	0152      	lsls	r2, r2, #5
 8000810:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000812:	003a      	movs	r2, r7
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_ADC_Init+0xc0>)
 8000816:	0011      	movs	r1, r2
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fc7f 	bl	800111c <HAL_ADC_ConfigChannel>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000822:	f000 f909 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	20000028 	.word	0x20000028
 8000834:	40012400 	.word	0x40012400
 8000838:	1c000080 	.word	0x1c000080

0800083c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_LPUART1_UART_Init+0x54>)
 8000842:	4a14      	ldr	r2, [pc, #80]	@ (8000894 <MX_LPUART1_UART_Init+0x58>)
 8000844:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000846:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_LPUART1_UART_Init+0x54>)
 8000848:	4a13      	ldr	r2, [pc, #76]	@ (8000898 <MX_LPUART1_UART_Init+0x5c>)
 800084a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800084c:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <MX_LPUART1_UART_Init+0x54>)
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	0552      	lsls	r2, r2, #21
 8000852:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_LPUART1_UART_Init+0x54>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <MX_LPUART1_UART_Init+0x54>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_LPUART1_UART_Init+0x54>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <MX_LPUART1_UART_Init+0x54>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_LPUART1_UART_Init+0x54>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000872:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <MX_LPUART1_UART_Init+0x54>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <MX_LPUART1_UART_Init+0x54>)
 800087a:	0018      	movs	r0, r3
 800087c:	f002 f9b8 	bl	8002bf0 <HAL_UART_Init>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000884:	f000 f8d8 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	20000084 	.word	0x20000084
 8000894:	40004800 	.word	0x40004800
 8000898:	00033324 	.word	0x00033324

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <MX_USART2_UART_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a8:	22e1      	movs	r2, #225	@ 0xe1
 80008aa:	0252      	lsls	r2, r2, #9
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008de:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008e0:	0018      	movs	r0, r3
 80008e2:	f002 f985 	bl	8002bf0 <HAL_UART_Init>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f8a5 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000010c 	.word	0x2000010c
 80008f8:	40004400 	.word	0x40004400

080008fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000900:	4b16      	ldr	r3, [pc, #88]	@ (800095c <MX_RTC_Init+0x60>)
 8000902:	4a17      	ldr	r2, [pc, #92]	@ (8000960 <MX_RTC_Init+0x64>)
 8000904:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000906:	4b15      	ldr	r3, [pc, #84]	@ (800095c <MX_RTC_Init+0x60>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800090c:	4b13      	ldr	r3, [pc, #76]	@ (800095c <MX_RTC_Init+0x60>)
 800090e:	227f      	movs	r2, #127	@ 0x7f
 8000910:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000912:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_RTC_Init+0x60>)
 8000914:	22ff      	movs	r2, #255	@ 0xff
 8000916:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000918:	4b10      	ldr	r3, [pc, #64]	@ (800095c <MX_RTC_Init+0x60>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_RTC_Init+0x60>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000924:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <MX_RTC_Init+0x60>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_RTC_Init+0x60>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000930:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <MX_RTC_Init+0x60>)
 8000932:	0018      	movs	r0, r3
 8000934:	f001 feb6 	bl	80026a4 <HAL_RTC_Init>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d001      	beq.n	8000940 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800093c:	f000 f87c 	bl	8000a38 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_RTC_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	0018      	movs	r0, r3
 8000948:	f001 ffde 	bl	8002908 <HAL_RTCEx_SetWakeUpTimer_IT>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000950:	f000 f872 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000954:	46c0      	nop			@ (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	20000194 	.word	0x20000194
 8000960:	40002800 	.word	0x40002800

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b089      	sub	sp, #36	@ 0x24
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	240c      	movs	r4, #12
 800096c:	193b      	adds	r3, r7, r4
 800096e:	0018      	movs	r0, r3
 8000970:	2314      	movs	r3, #20
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f003 f9eb 	bl	8003d50 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 800097c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800097e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 8000980:	2104      	movs	r1, #4
 8000982:	430a      	orrs	r2, r1
 8000984:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000986:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 8000988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098a:	2204      	movs	r2, #4
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b27      	ldr	r3, [pc, #156]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 8000994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 8000998:	2101      	movs	r1, #1
 800099a:	430a      	orrs	r2, r1
 800099c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800099e:	4b24      	ldr	r3, [pc, #144]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a2:	2201      	movs	r2, #1
 80009a4:	4013      	ands	r3, r2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 80009ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 80009b0:	2102      	movs	r1, #2
 80009b2:	430a      	orrs	r2, r1
 80009b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ba:	2202      	movs	r2, #2
 80009bc:	4013      	ands	r3, r2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80009c2:	23a0      	movs	r3, #160	@ 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2200      	movs	r2, #0
 80009c8:	2102      	movs	r1, #2
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 ff20 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <MX_GPIO_Init+0xd0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	2108      	movs	r1, #8
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 ff1a 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2202      	movs	r2, #2
 80009e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2201      	movs	r2, #1
 80009e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	193a      	adds	r2, r7, r4
 80009f6:	23a0      	movs	r3, #160	@ 0xa0
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fd99 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a02:	0021      	movs	r1, r4
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2208      	movs	r2, #8
 8000a08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <MX_GPIO_Init+0xd0>)
 8000a20:	0019      	movs	r1, r3
 8000a22:	0010      	movs	r0, r2
 8000a24:	f000 fd86 	bl	8001534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a28:	46c0      	nop			@ (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b009      	add	sp, #36	@ 0x24
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	50000400 	.word	0x50000400

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	e7fd      	b.n	8000a40 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <HAL_MspInit+0x24>)
 8000a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_MspInit+0x24>)
 8000a4e:	2101      	movs	r1, #1
 8000a50:	430a      	orrs	r2, r1
 8000a52:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a54:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <HAL_MspInit+0x24>)
 8000a56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a58:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <HAL_MspInit+0x24>)
 8000a5a:	2180      	movs	r1, #128	@ 0x80
 8000a5c:	0549      	lsls	r1, r1, #21
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b089      	sub	sp, #36	@ 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	240c      	movs	r4, #12
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	0018      	movs	r0, r3
 8000a7a:	2314      	movs	r3, #20
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	f003 f966 	bl	8003d50 <memset>
  if(hadc->Instance==ADC1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a14      	ldr	r2, [pc, #80]	@ (8000adc <HAL_ADC_MspInit+0x70>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d122      	bne.n	8000ad4 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <HAL_ADC_MspInit+0x74>)
 8000a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <HAL_ADC_MspInit+0x74>)
 8000a94:	2180      	movs	r1, #128	@ 0x80
 8000a96:	0089      	lsls	r1, r1, #2
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <HAL_ADC_MspInit+0x74>)
 8000a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <HAL_ADC_MspInit+0x74>)
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <HAL_ADC_MspInit+0x74>)
 8000aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aac:	2201      	movs	r2, #1
 8000aae:	4013      	ands	r3, r2
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2280      	movs	r2, #128	@ 0x80
 8000ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2203      	movs	r2, #3
 8000abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	193a      	adds	r2, r7, r4
 8000ac8:	23a0      	movs	r3, #160	@ 0xa0
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	0011      	movs	r1, r2
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 fd30 	bl	8001534 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b009      	add	sp, #36	@ 0x24
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	40012400 	.word	0x40012400
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b08b      	sub	sp, #44	@ 0x2c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	2414      	movs	r4, #20
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	0018      	movs	r0, r3
 8000af2:	2314      	movs	r3, #20
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f003 f92a 	bl	8003d50 <memset>
  if(huart->Instance==LPUART1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a38      	ldr	r2, [pc, #224]	@ (8000be4 <HAL_UART_MspInit+0x100>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d132      	bne.n	8000b6c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b06:	4b38      	ldr	r3, [pc, #224]	@ (8000be8 <HAL_UART_MspInit+0x104>)
 8000b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b0a:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <HAL_UART_MspInit+0x104>)
 8000b0c:	2180      	movs	r1, #128	@ 0x80
 8000b0e:	02c9      	lsls	r1, r1, #11
 8000b10:	430a      	orrs	r2, r1
 8000b12:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b34      	ldr	r3, [pc, #208]	@ (8000be8 <HAL_UART_MspInit+0x104>)
 8000b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b18:	4b33      	ldr	r3, [pc, #204]	@ (8000be8 <HAL_UART_MspInit+0x104>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b20:	4b31      	ldr	r3, [pc, #196]	@ (8000be8 <HAL_UART_MspInit+0x104>)
 8000b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b24:	2201      	movs	r2, #1
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b2c:	0021      	movs	r1, r4
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	220c      	movs	r2, #12
 8000b32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2202      	movs	r2, #2
 8000b38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2203      	movs	r2, #3
 8000b44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2206      	movs	r2, #6
 8000b4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	187a      	adds	r2, r7, r1
 8000b4e:	23a0      	movs	r3, #160	@ 0xa0
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f000 fced 	bl	8001534 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	201d      	movs	r0, #29
 8000b60:	f000 fc2e 	bl	80013c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000b64:	201d      	movs	r0, #29
 8000b66:	f000 fc40 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6a:	e037      	b.n	8000bdc <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1e      	ldr	r2, [pc, #120]	@ (8000bec <HAL_UART_MspInit+0x108>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d132      	bne.n	8000bdc <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <HAL_UART_MspInit+0x104>)
 8000b78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <HAL_UART_MspInit+0x104>)
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	0289      	lsls	r1, r1, #10
 8000b80:	430a      	orrs	r2, r1
 8000b82:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_UART_MspInit+0x104>)
 8000b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b88:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <HAL_UART_MspInit+0x104>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <HAL_UART_MspInit+0x104>)
 8000b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b94:	2201      	movs	r2, #1
 8000b96:	4013      	ands	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b9c:	2114      	movs	r1, #20
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	22c0      	movs	r2, #192	@ 0xc0
 8000ba2:	00d2      	lsls	r2, r2, #3
 8000ba4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2202      	movs	r2, #2
 8000baa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2204      	movs	r2, #4
 8000bbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	187a      	adds	r2, r7, r1
 8000bc0:	23a0      	movs	r3, #160	@ 0xa0
 8000bc2:	05db      	lsls	r3, r3, #23
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 fcb4 	bl	8001534 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	201c      	movs	r0, #28
 8000bd2:	f000 fbf5 	bl	80013c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bd6:	201c      	movs	r0, #28
 8000bd8:	f000 fc07 	bl	80013ea <HAL_NVIC_EnableIRQ>
}
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b00b      	add	sp, #44	@ 0x2c
 8000be2:	bd90      	pop	{r4, r7, pc}
 8000be4:	40004800 	.word	0x40004800
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40004400 	.word	0x40004400

08000bf0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <HAL_RTC_MspInit+0x38>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d10e      	bne.n	8000c20 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_RTC_MspInit+0x3c>)
 8000c04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <HAL_RTC_MspInit+0x3c>)
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	02c9      	lsls	r1, r1, #11
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	2002      	movs	r0, #2
 8000c16:	f000 fbd3 	bl	80013c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f000 fbe5 	bl	80013ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b002      	add	sp, #8
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40002800 	.word	0x40002800
 8000c2c:	40021000 	.word	0x40021000

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	e7fd      	b.n	8000c34 <NMI_Handler+0x4>

08000c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	e7fd      	b.n	8000c3c <HardFault_Handler+0x4>

08000c40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c58:	f000 f8ac 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000c68:	4b03      	ldr	r3, [pc, #12]	@ (8000c78 <RTC_IRQHandler+0x14>)
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f001 ff88 	bl	8002b80 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000c70:	46c0      	nop			@ (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	20000194 	.word	0x20000194

08000c7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c80:	4b03      	ldr	r3, [pc, #12]	@ (8000c90 <USART2_IRQHandler+0x14>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f002 f8a8 	bl	8002dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	2000010c 	.word	0x2000010c

08000c94 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c98:	4b03      	ldr	r3, [pc, #12]	@ (8000ca8 <LPUART1_IRQHandler+0x14>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f002 f89c 	bl	8002dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	20000084 	.word	0x20000084

08000cac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000cb8:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000cba:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cbc:	f7ff fff6 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	@ (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f003 f83b 	bl	8003d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fbe5 	bl	80004b8 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
   ldr   r0, =_estack
 8000cf0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cfc:	08003e9c 	.word	0x08003e9c
  ldr r2, =_sbss
 8000d00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d04:	200001c0 	.word	0x200001c0

08000d08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_COMP_IRQHandler>
	...

08000d0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <HAL_Init+0x3c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_Init+0x3c>)
 8000d1e:	2140      	movs	r1, #64	@ 0x40
 8000d20:	430a      	orrs	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f811 	bl	8000d4c <HAL_InitTick>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	e001      	b.n	8000d3a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d36:	f7ff fe85 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <HAL_InitTick+0x5c>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <HAL_InitTick+0x60>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	23fa      	movs	r3, #250	@ 0xfa
 8000d60:	0098      	lsls	r0, r3, #2
 8000d62:	f7ff f9d9 	bl	8000118 <__udivsi3>
 8000d66:	0003      	movs	r3, r0
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	f7ff f9d4 	bl	8000118 <__udivsi3>
 8000d70:	0003      	movs	r3, r0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 fb49 	bl	800140a <HAL_SYSTICK_Config>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e00f      	b.n	8000da0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d80b      	bhi.n	8000d9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 fb16 	bl	80013c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_InitTick+0x64>)
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b003      	add	sp, #12
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <HAL_IncTick+0x20>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	18d2      	adds	r2, r2, r3
 8000dc4:	4b03      	ldr	r3, [pc, #12]	@ (8000dd4 <HAL_IncTick+0x20>)
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	200001bc 	.word	0x200001bc

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	@ (8000de8 <HAL_GetTick+0x10>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	200001bc 	.word	0x200001bc

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff fff0 	bl	8000dd8 <HAL_GetTick>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3301      	adds	r3, #1
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	189b      	adds	r3, r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	f7ff ffe0 	bl	8000dd8 <HAL_GetTick>
 8000e18:	0002      	movs	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b004      	add	sp, #16
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	20000008 	.word	0x20000008

08000e34 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e159      	b.n	80010fa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10a      	bne.n	8000e64 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2250      	movs	r2, #80	@ 0x50
 8000e58:	2100      	movs	r1, #0
 8000e5a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff fe04 	bl	8000a6c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e68:	2210      	movs	r2, #16
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b10      	cmp	r3, #16
 8000e6e:	d005      	beq.n	8000e7c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2204      	movs	r2, #4
 8000e78:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e7a:	d00b      	beq.n	8000e94 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e80:	2210      	movs	r2, #16
 8000e82:	431a      	orrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2250      	movs	r2, #80	@ 0x50
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e132      	b.n	80010fa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e98:	4a9a      	ldr	r2, [pc, #616]	@ (8001104 <HAL_ADC_Init+0x2d0>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	4013      	ands	r3, r2
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d108      	bne.n	8000ec4 <HAL_ADC_Init+0x90>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d101      	bne.n	8000ec4 <HAL_ADC_Init+0x90>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <HAL_ADC_Init+0x92>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d149      	bne.n	8000f5e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	23c0      	movs	r3, #192	@ 0xc0
 8000ed0:	061b      	lsls	r3, r3, #24
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d00b      	beq.n	8000eee <HAL_ADC_Init+0xba>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	2380      	movs	r3, #128	@ 0x80
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d005      	beq.n	8000eee <HAL_ADC_Init+0xba>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	2380      	movs	r3, #128	@ 0x80
 8000ee8:	061b      	lsls	r3, r3, #24
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d111      	bne.n	8000f12 <HAL_ADC_Init+0xde>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	0892      	lsrs	r2, r2, #2
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6919      	ldr	r1, [r3, #16]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	e014      	b.n	8000f3c <HAL_ADC_Init+0x108>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	0092      	lsls	r2, r2, #2
 8000f1e:	0892      	lsrs	r2, r2, #2
 8000f20:	611a      	str	r2, [r3, #16]
 8000f22:	4b79      	ldr	r3, [pc, #484]	@ (8001108 <HAL_ADC_Init+0x2d4>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4b78      	ldr	r3, [pc, #480]	@ (8001108 <HAL_ADC_Init+0x2d4>)
 8000f28:	4978      	ldr	r1, [pc, #480]	@ (800110c <HAL_ADC_Init+0x2d8>)
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	4b76      	ldr	r3, [pc, #472]	@ (8001108 <HAL_ADC_Init+0x2d4>)
 8000f30:	6819      	ldr	r1, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4b74      	ldr	r3, [pc, #464]	@ (8001108 <HAL_ADC_Init+0x2d4>)
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2118      	movs	r1, #24
 8000f48:	438a      	bics	r2, r1
 8000f4a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68d9      	ldr	r1, [r3, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001108 <HAL_ADC_Init+0x2d4>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b69      	ldr	r3, [pc, #420]	@ (8001108 <HAL_ADC_Init+0x2d4>)
 8000f64:	496a      	ldr	r1, [pc, #424]	@ (8001110 <HAL_ADC_Init+0x2dc>)
 8000f66:	400a      	ands	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000f6a:	4b67      	ldr	r3, [pc, #412]	@ (8001108 <HAL_ADC_Init+0x2d4>)
 8000f6c:	6819      	ldr	r1, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f72:	065a      	lsls	r2, r3, #25
 8000f74:	4b64      	ldr	r3, [pc, #400]	@ (8001108 <HAL_ADC_Init+0x2d4>)
 8000f76:	430a      	orrs	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	2380      	movs	r3, #128	@ 0x80
 8000f82:	055b      	lsls	r3, r3, #21
 8000f84:	4013      	ands	r3, r2
 8000f86:	d108      	bne.n	8000f9a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2180      	movs	r1, #128	@ 0x80
 8000f94:	0549      	lsls	r1, r1, #21
 8000f96:	430a      	orrs	r2, r1
 8000f98:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	495b      	ldr	r1, [pc, #364]	@ (8001114 <HAL_ADC_Init+0x2e0>)
 8000fa6:	400a      	ands	r2, r1
 8000fa8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68d9      	ldr	r1, [r3, #12]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d101      	bne.n	8000fc0 <HAL_ADC_Init+0x18c>
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	e000      	b.n	8000fc2 <HAL_ADC_Init+0x18e>
 8000fc0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000fc2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2020      	movs	r0, #32
 8000fc8:	5c1b      	ldrb	r3, [r3, r0]
 8000fca:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000fcc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	202c      	movs	r0, #44	@ 0x2c
 8000fd2:	5c1b      	ldrb	r3, [r3, r0]
 8000fd4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000fd6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000fdc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000fe4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000fec:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ffa:	23c2      	movs	r3, #194	@ 0xc2
 8000ffc:	33ff      	adds	r3, #255	@ 0xff
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d00b      	beq.n	800101a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68d9      	ldr	r1, [r3, #12]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2221      	movs	r2, #33	@ 0x21
 800101e:	5c9b      	ldrb	r3, [r3, r2]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d11a      	bne.n	800105a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2220      	movs	r2, #32
 8001028:	5c9b      	ldrb	r3, [r3, r2]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2180      	movs	r1, #128	@ 0x80
 800103a:	0249      	lsls	r1, r1, #9
 800103c:	430a      	orrs	r2, r1
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	e00b      	b.n	800105a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001046:	2220      	movs	r2, #32
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	2201      	movs	r2, #1
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800105e:	2b01      	cmp	r3, #1
 8001060:	d11f      	bne.n	80010a2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	492a      	ldr	r1, [pc, #168]	@ (8001118 <HAL_ADC_Init+0x2e4>)
 800106e:	400a      	ands	r2, r1
 8001070:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6919      	ldr	r1, [r3, #16]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001080:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001086:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2101      	movs	r1, #1
 800109c:	430a      	orrs	r2, r1
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	e00e      	b.n	80010c0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	2201      	movs	r2, #1
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d107      	bne.n	80010c0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	691a      	ldr	r2, [r3, #16]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2101      	movs	r1, #1
 80010bc:	438a      	bics	r2, r1
 80010be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2107      	movs	r1, #7
 80010cc:	438a      	bics	r2, r1
 80010ce:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6959      	ldr	r1, [r3, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010ec:	2203      	movs	r2, #3
 80010ee:	4393      	bics	r3, r2
 80010f0:	2201      	movs	r2, #1
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	fffffefd 	.word	0xfffffefd
 8001108:	40012708 	.word	0x40012708
 800110c:	ffc3ffff 	.word	0xffc3ffff
 8001110:	fdffffff 	.word	0xfdffffff
 8001114:	fffe0219 	.word	0xfffe0219
 8001118:	fffffc03 	.word	0xfffffc03

0800111c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2250      	movs	r2, #80	@ 0x50
 800112a:	5c9b      	ldrb	r3, [r3, r2]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d101      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x18>
 8001130:	2302      	movs	r3, #2
 8001132:	e06c      	b.n	800120e <HAL_ADC_ConfigChannel+0xf2>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2250      	movs	r2, #80	@ 0x50
 8001138:	2101      	movs	r1, #1
 800113a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2204      	movs	r2, #4
 8001144:	4013      	ands	r3, r2
 8001146:	d00b      	beq.n	8001160 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800114c:	2220      	movs	r2, #32
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2250      	movs	r2, #80	@ 0x50
 8001158:	2100      	movs	r1, #0
 800115a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e056      	b.n	800120e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4a2c      	ldr	r2, [pc, #176]	@ (8001218 <HAL_ADC_ConfigChannel+0xfc>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d028      	beq.n	80011bc <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	035b      	lsls	r3, r3, #13
 8001176:	0b5a      	lsrs	r2, r3, #13
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	02db      	lsls	r3, r3, #11
 8001188:	4013      	ands	r3, r2
 800118a:	d009      	beq.n	80011a0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800118c:	4b23      	ldr	r3, [pc, #140]	@ (800121c <HAL_ADC_ConfigChannel+0x100>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b22      	ldr	r3, [pc, #136]	@ (800121c <HAL_ADC_ConfigChannel+0x100>)
 8001192:	2180      	movs	r1, #128	@ 0x80
 8001194:	0409      	lsls	r1, r1, #16
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800119a:	200a      	movs	r0, #10
 800119c:	f000 f844 	bl	8001228 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	029b      	lsls	r3, r3, #10
 80011a8:	4013      	ands	r3, r2
 80011aa:	d02b      	beq.n	8001204 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <HAL_ADC_ConfigChannel+0x100>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <HAL_ADC_ConfigChannel+0x100>)
 80011b2:	2180      	movs	r1, #128	@ 0x80
 80011b4:	03c9      	lsls	r1, r1, #15
 80011b6:	430a      	orrs	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e023      	b.n	8001204 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	035b      	lsls	r3, r3, #13
 80011c8:	0b5b      	lsrs	r3, r3, #13
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	400a      	ands	r2, r1
 80011d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	02db      	lsls	r3, r3, #11
 80011dc:	4013      	ands	r3, r2
 80011de:	d005      	beq.n	80011ec <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <HAL_ADC_ConfigChannel+0x100>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <HAL_ADC_ConfigChannel+0x100>)
 80011e6:	490e      	ldr	r1, [pc, #56]	@ (8001220 <HAL_ADC_ConfigChannel+0x104>)
 80011e8:	400a      	ands	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	029b      	lsls	r3, r3, #10
 80011f4:	4013      	ands	r3, r2
 80011f6:	d005      	beq.n	8001204 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HAL_ADC_ConfigChannel+0x100>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <HAL_ADC_ConfigChannel+0x100>)
 80011fe:	4909      	ldr	r1, [pc, #36]	@ (8001224 <HAL_ADC_ConfigChannel+0x108>)
 8001200:	400a      	ands	r2, r1
 8001202:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2250      	movs	r2, #80	@ 0x50
 8001208:	2100      	movs	r1, #0
 800120a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	00001001 	.word	0x00001001
 800121c:	40012708 	.word	0x40012708
 8001220:	ff7fffff 	.word	0xff7fffff
 8001224:	ffbfffff 	.word	0xffbfffff

08001228 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <ADC_DelayMicroSecond+0x38>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	490b      	ldr	r1, [pc, #44]	@ (8001264 <ADC_DelayMicroSecond+0x3c>)
 8001236:	0018      	movs	r0, r3
 8001238:	f7fe ff6e 	bl	8000118 <__udivsi3>
 800123c:	0003      	movs	r3, r0
 800123e:	001a      	movs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4353      	muls	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001246:	e002      	b.n	800124e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3b01      	subs	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f9      	bne.n	8001248 <ADC_DelayMicroSecond+0x20>
  }
}
 8001254:	46c0      	nop			@ (mov r8, r8)
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	20000000 	.word	0x20000000
 8001264:	000f4240 	.word	0x000f4240

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	0002      	movs	r2, r0
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b7f      	cmp	r3, #127	@ 0x7f
 800127a:	d809      	bhi.n	8001290 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	001a      	movs	r2, r3
 8001282:	231f      	movs	r3, #31
 8001284:	401a      	ands	r2, r3
 8001286:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <__NVIC_EnableIRQ+0x30>)
 8001288:	2101      	movs	r1, #1
 800128a:	4091      	lsls	r1, r2
 800128c:	000a      	movs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
  }
}
 8001290:	46c0      	nop			@ (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	0002      	movs	r2, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80012b0:	d828      	bhi.n	8001304 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001370 <__NVIC_SetPriority+0xd4>)
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	33c0      	adds	r3, #192	@ 0xc0
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	589b      	ldr	r3, [r3, r2]
 80012c2:	1dfa      	adds	r2, r7, #7
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	0011      	movs	r1, r2
 80012c8:	2203      	movs	r2, #3
 80012ca:	400a      	ands	r2, r1
 80012cc:	00d2      	lsls	r2, r2, #3
 80012ce:	21ff      	movs	r1, #255	@ 0xff
 80012d0:	4091      	lsls	r1, r2
 80012d2:	000a      	movs	r2, r1
 80012d4:	43d2      	mvns	r2, r2
 80012d6:	401a      	ands	r2, r3
 80012d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	019b      	lsls	r3, r3, #6
 80012de:	22ff      	movs	r2, #255	@ 0xff
 80012e0:	401a      	ands	r2, r3
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	0018      	movs	r0, r3
 80012e8:	2303      	movs	r3, #3
 80012ea:	4003      	ands	r3, r0
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f0:	481f      	ldr	r0, [pc, #124]	@ (8001370 <__NVIC_SetPriority+0xd4>)
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	430a      	orrs	r2, r1
 80012fc:	33c0      	adds	r3, #192	@ 0xc0
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001302:	e031      	b.n	8001368 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001304:	4a1b      	ldr	r2, [pc, #108]	@ (8001374 <__NVIC_SetPriority+0xd8>)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	0019      	movs	r1, r3
 800130c:	230f      	movs	r3, #15
 800130e:	400b      	ands	r3, r1
 8001310:	3b08      	subs	r3, #8
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3306      	adds	r3, #6
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	18d3      	adds	r3, r2, r3
 800131a:	3304      	adds	r3, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1dfa      	adds	r2, r7, #7
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	0011      	movs	r1, r2
 8001324:	2203      	movs	r2, #3
 8001326:	400a      	ands	r2, r1
 8001328:	00d2      	lsls	r2, r2, #3
 800132a:	21ff      	movs	r1, #255	@ 0xff
 800132c:	4091      	lsls	r1, r2
 800132e:	000a      	movs	r2, r1
 8001330:	43d2      	mvns	r2, r2
 8001332:	401a      	ands	r2, r3
 8001334:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	22ff      	movs	r2, #255	@ 0xff
 800133c:	401a      	ands	r2, r3
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	0018      	movs	r0, r3
 8001344:	2303      	movs	r3, #3
 8001346:	4003      	ands	r3, r0
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134c:	4809      	ldr	r0, [pc, #36]	@ (8001374 <__NVIC_SetPriority+0xd8>)
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	001c      	movs	r4, r3
 8001354:	230f      	movs	r3, #15
 8001356:	4023      	ands	r3, r4
 8001358:	3b08      	subs	r3, #8
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	430a      	orrs	r2, r1
 800135e:	3306      	adds	r3, #6
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	18c3      	adds	r3, r0, r3
 8001364:	3304      	adds	r3, #4
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	46c0      	nop			@ (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b003      	add	sp, #12
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	1e5a      	subs	r2, r3, #1
 8001384:	2380      	movs	r3, #128	@ 0x80
 8001386:	045b      	lsls	r3, r3, #17
 8001388:	429a      	cmp	r2, r3
 800138a:	d301      	bcc.n	8001390 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138c:	2301      	movs	r3, #1
 800138e:	e010      	b.n	80013b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <SysTick_Config+0x44>)
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	3a01      	subs	r2, #1
 8001396:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001398:	2301      	movs	r3, #1
 800139a:	425b      	negs	r3, r3
 800139c:	2103      	movs	r1, #3
 800139e:	0018      	movs	r0, r3
 80013a0:	f7ff ff7c 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <SysTick_Config+0x44>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <SysTick_Config+0x44>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	210f      	movs	r1, #15
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	1c02      	adds	r2, r0, #0
 80013d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	0002      	movs	r2, r0
 80013f2:	1dfb      	adds	r3, r7, #7
 80013f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ff33 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff ffaf 	bl	8001378 <SysTick_Config>
 800141a:	0003      	movs	r3, r0
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800142c:	230f      	movs	r3, #15
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2225      	movs	r2, #37	@ 0x25
 8001438:	5c9b      	ldrb	r3, [r3, r2]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d008      	beq.n	8001452 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2204      	movs	r2, #4
 8001444:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2224      	movs	r2, #36	@ 0x24
 800144a:	2100      	movs	r1, #0
 800144c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e024      	b.n	800149c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	210e      	movs	r1, #14
 800145e:	438a      	bics	r2, r1
 8001460:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	438a      	bics	r2, r1
 8001470:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	221c      	movs	r2, #28
 8001478:	401a      	ands	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	2101      	movs	r1, #1
 8001480:	4091      	lsls	r1, r2
 8001482:	000a      	movs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2225      	movs	r2, #37	@ 0x25
 800148a:	2101      	movs	r1, #1
 800148c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2224      	movs	r2, #36	@ 0x24
 8001492:	2100      	movs	r1, #0
 8001494:	5499      	strb	r1, [r3, r2]

    return status;
 8001496:	230f      	movs	r3, #15
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800149c:	0018      	movs	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	b004      	add	sp, #16
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ac:	210f      	movs	r1, #15
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2225      	movs	r2, #37	@ 0x25
 80014b8:	5c9b      	ldrb	r3, [r3, r2]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d006      	beq.n	80014ce <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2204      	movs	r2, #4
 80014c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	e02a      	b.n	8001524 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	210e      	movs	r1, #14
 80014da:	438a      	bics	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	438a      	bics	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	221c      	movs	r2, #28
 80014f4:	401a      	ands	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	2101      	movs	r1, #1
 80014fc:	4091      	lsls	r1, r2
 80014fe:	000a      	movs	r2, r1
 8001500:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2225      	movs	r2, #37	@ 0x25
 8001506:	2101      	movs	r1, #1
 8001508:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2224      	movs	r2, #36	@ 0x24
 800150e:	2100      	movs	r1, #0
 8001510:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	0010      	movs	r0, r2
 8001522:	4798      	blx	r3
    }
  }
  return status;
 8001524:	230f      	movs	r3, #15
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	781b      	ldrb	r3, [r3, #0]
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b004      	add	sp, #16
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800154a:	e149      	b.n	80017e0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2101      	movs	r1, #1
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4091      	lsls	r1, r2
 8001556:	000a      	movs	r2, r1
 8001558:	4013      	ands	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d100      	bne.n	8001564 <HAL_GPIO_Init+0x30>
 8001562:	e13a      	b.n	80017da <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2203      	movs	r2, #3
 800156a:	4013      	ands	r3, r2
 800156c:	2b01      	cmp	r3, #1
 800156e:	d005      	beq.n	800157c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001578:	2b02      	cmp	r3, #2
 800157a:	d130      	bne.n	80015de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	409a      	lsls	r2, r3
 800158a:	0013      	movs	r3, r2
 800158c:	43da      	mvns	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	409a      	lsls	r2, r3
 800159e:	0013      	movs	r3, r2
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b2:	2201      	movs	r2, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	2201      	movs	r2, #1
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2203      	movs	r2, #3
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d017      	beq.n	800161a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2203      	movs	r2, #3
 8001620:	4013      	ands	r3, r2
 8001622:	2b02      	cmp	r3, #2
 8001624:	d123      	bne.n	800166e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	08da      	lsrs	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3208      	adds	r2, #8
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	58d3      	ldr	r3, [r2, r3]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2207      	movs	r2, #7
 8001638:	4013      	ands	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	220f      	movs	r2, #15
 800163e:	409a      	lsls	r2, r3
 8001640:	0013      	movs	r3, r2
 8001642:	43da      	mvns	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2107      	movs	r1, #7
 8001652:	400b      	ands	r3, r1
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	6939      	ldr	r1, [r7, #16]
 800166c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	409a      	lsls	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	43da      	mvns	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2203      	movs	r2, #3
 800168c:	401a      	ands	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	23c0      	movs	r3, #192	@ 0xc0
 80016a8:	029b      	lsls	r3, r3, #10
 80016aa:	4013      	ands	r3, r2
 80016ac:	d100      	bne.n	80016b0 <HAL_GPIO_Init+0x17c>
 80016ae:	e094      	b.n	80017da <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b0:	4b51      	ldr	r3, [pc, #324]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 80016b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016b4:	4b50      	ldr	r3, [pc, #320]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 80016b6:	2101      	movs	r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80016bc:	4a4f      	ldr	r2, [pc, #316]	@ (80017fc <HAL_GPIO_Init+0x2c8>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	589b      	ldr	r3, [r3, r2]
 80016c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2203      	movs	r2, #3
 80016ce:	4013      	ands	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	409a      	lsls	r2, r3
 80016d6:	0013      	movs	r3, r2
 80016d8:	43da      	mvns	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	23a0      	movs	r3, #160	@ 0xa0
 80016e4:	05db      	lsls	r3, r3, #23
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x1de>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a44      	ldr	r2, [pc, #272]	@ (8001800 <HAL_GPIO_Init+0x2cc>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x1da>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a43      	ldr	r2, [pc, #268]	@ (8001804 <HAL_GPIO_Init+0x2d0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x1d6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a42      	ldr	r2, [pc, #264]	@ (8001808 <HAL_GPIO_Init+0x2d4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x1d2>
 8001702:	2305      	movs	r3, #5
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x1e0>
 8001706:	2306      	movs	r3, #6
 8001708:	e004      	b.n	8001714 <HAL_GPIO_Init+0x1e0>
 800170a:	2302      	movs	r3, #2
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x1e0>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x1e0>
 8001712:	2300      	movs	r3, #0
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	2103      	movs	r1, #3
 8001718:	400a      	ands	r2, r1
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4093      	lsls	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001724:	4935      	ldr	r1, [pc, #212]	@ (80017fc <HAL_GPIO_Init+0x2c8>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001732:	4b36      	ldr	r3, [pc, #216]	@ (800180c <HAL_GPIO_Init+0x2d8>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	43da      	mvns	r2, r3
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	035b      	lsls	r3, r3, #13
 800174a:	4013      	ands	r3, r2
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <HAL_GPIO_Init+0x2d8>)
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800175c:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <HAL_GPIO_Init+0x2d8>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	43da      	mvns	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	039b      	lsls	r3, r3, #14
 8001774:	4013      	ands	r3, r2
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001780:	4b22      	ldr	r3, [pc, #136]	@ (800180c <HAL_GPIO_Init+0x2d8>)
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001786:	4b21      	ldr	r3, [pc, #132]	@ (800180c <HAL_GPIO_Init+0x2d8>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	43da      	mvns	r2, r3
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	029b      	lsls	r3, r3, #10
 800179e:	4013      	ands	r3, r2
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <HAL_GPIO_Init+0x2d8>)
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b0:	4b16      	ldr	r3, [pc, #88]	@ (800180c <HAL_GPIO_Init+0x2d8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43da      	mvns	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	2380      	movs	r3, #128	@ 0x80
 80017c6:	025b      	lsls	r3, r3, #9
 80017c8:	4013      	ands	r3, r2
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <HAL_GPIO_Init+0x2d8>)
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	40da      	lsrs	r2, r3
 80017e8:	1e13      	subs	r3, r2, #0
 80017ea:	d000      	beq.n	80017ee <HAL_GPIO_Init+0x2ba>
 80017ec:	e6ae      	b.n	800154c <HAL_GPIO_Init+0x18>
  }
}
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b006      	add	sp, #24
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000
 8001800:	50000400 	.word	0x50000400
 8001804:	50000800 	.word	0x50000800
 8001808:	50001c00 	.word	0x50001c00
 800180c:	40010400 	.word	0x40010400

08001810 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	0008      	movs	r0, r1
 800181a:	0011      	movs	r1, r2
 800181c:	1cbb      	adds	r3, r7, #2
 800181e:	1c02      	adds	r2, r0, #0
 8001820:	801a      	strh	r2, [r3, #0]
 8001822:	1c7b      	adds	r3, r7, #1
 8001824:	1c0a      	adds	r2, r1, #0
 8001826:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001828:	1c7b      	adds	r3, r7, #1
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001830:	1cbb      	adds	r3, r7, #2
 8001832:	881a      	ldrh	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800183a:	1cbb      	adds	r3, r7, #2
 800183c:	881a      	ldrh	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b002      	add	sp, #8
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	000a      	movs	r2, r1
 8001854:	1cbb      	adds	r3, r7, #2
 8001856:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800185e:	1cbb      	adds	r3, r7, #2
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	041a      	lsls	r2, r3, #16
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43db      	mvns	r3, r3
 800186c:	1cb9      	adds	r1, r7, #2
 800186e:	8809      	ldrh	r1, [r1, #0]
 8001870:	400b      	ands	r3, r1
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
}
 8001878:	46c0      	nop			@ (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b004      	add	sp, #16
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b03      	ldr	r3, [pc, #12]	@ (8001898 <HAL_PWR_EnableBkUpAccess+0x18>)
 800188a:	2180      	movs	r1, #128	@ 0x80
 800188c:	0049      	lsls	r1, r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40007000 	.word	0x40007000

0800189c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <HAL_PWR_EnableWakeUpPin+0x1c>)
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <HAL_PWR_EnableWakeUpPin+0x1c>)
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	605a      	str	r2, [r3, #4]
}
 80018b0:	46c0      	nop			@ (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40007000 	.word	0x40007000

080018bc <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2  
  *           @arg PWR_WAKEUP_PIN3  for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_PWR_DisableWakeUpPin+0x20>)
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <HAL_PWR_DisableWakeUpPin+0x20>)
 80018ce:	400a      	ands	r2, r1
 80018d0:	605a      	str	r2, [r3, #4]
}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	40007000 	.word	0x40007000

080018e0 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80018e4:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80018ea:	2102      	movs	r1, #2
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80018f6:	2104      	movs	r1, #4
 80018f8:	430a      	orrs	r2, r1
 80018fa:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80018fc:	bf30      	wfi
}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40007000 	.word	0x40007000
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800190c:	b5b0      	push	{r4, r5, r7, lr}
 800190e:	b08a      	sub	sp, #40	@ 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f000 fb6c 	bl	8001ff8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001920:	4bc8      	ldr	r3, [pc, #800]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	220c      	movs	r2, #12
 8001926:	4013      	ands	r3, r2
 8001928:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192a:	4bc6      	ldr	r3, [pc, #792]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	025b      	lsls	r3, r3, #9
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2201      	movs	r2, #1
 800193c:	4013      	ands	r3, r2
 800193e:	d100      	bne.n	8001942 <HAL_RCC_OscConfig+0x36>
 8001940:	e07d      	b.n	8001a3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	2b08      	cmp	r3, #8
 8001946:	d007      	beq.n	8001958 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d112      	bne.n	8001974 <HAL_RCC_OscConfig+0x68>
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	2380      	movs	r3, #128	@ 0x80
 8001952:	025b      	lsls	r3, r3, #9
 8001954:	429a      	cmp	r2, r3
 8001956:	d10d      	bne.n	8001974 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	4bba      	ldr	r3, [pc, #744]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	029b      	lsls	r3, r3, #10
 8001960:	4013      	ands	r3, r2
 8001962:	d100      	bne.n	8001966 <HAL_RCC_OscConfig+0x5a>
 8001964:	e06a      	b.n	8001a3c <HAL_RCC_OscConfig+0x130>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d166      	bne.n	8001a3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	f000 fb42 	bl	8001ff8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	2380      	movs	r3, #128	@ 0x80
 800197a:	025b      	lsls	r3, r3, #9
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x84>
 8001980:	4bb0      	ldr	r3, [pc, #704]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4baf      	ldr	r3, [pc, #700]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001986:	2180      	movs	r1, #128	@ 0x80
 8001988:	0249      	lsls	r1, r1, #9
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e027      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	23a0      	movs	r3, #160	@ 0xa0
 8001996:	02db      	lsls	r3, r3, #11
 8001998:	429a      	cmp	r2, r3
 800199a:	d10e      	bne.n	80019ba <HAL_RCC_OscConfig+0xae>
 800199c:	4ba9      	ldr	r3, [pc, #676]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4ba8      	ldr	r3, [pc, #672]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	02c9      	lsls	r1, r1, #11
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	4ba6      	ldr	r3, [pc, #664]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4ba5      	ldr	r3, [pc, #660]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 80019b0:	2180      	movs	r1, #128	@ 0x80
 80019b2:	0249      	lsls	r1, r1, #9
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e012      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 80019ba:	4ba2      	ldr	r3, [pc, #648]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4ba1      	ldr	r3, [pc, #644]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 80019c0:	49a1      	ldr	r1, [pc, #644]	@ (8001c48 <HAL_RCC_OscConfig+0x33c>)
 80019c2:	400a      	ands	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	4b9f      	ldr	r3, [pc, #636]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	@ 0x80
 80019cc:	025b      	lsls	r3, r3, #9
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4b9b      	ldr	r3, [pc, #620]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b9a      	ldr	r3, [pc, #616]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 80019da:	499c      	ldr	r1, [pc, #624]	@ (8001c4c <HAL_RCC_OscConfig+0x340>)
 80019dc:	400a      	ands	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d014      	beq.n	8001a12 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff f9f6 	bl	8000dd8 <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f2:	f7ff f9f1 	bl	8000dd8 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b64      	cmp	r3, #100	@ 0x64
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e2f9      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a04:	4b8f      	ldr	r3, [pc, #572]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	029b      	lsls	r3, r3, #10
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0xe6>
 8001a10:	e015      	b.n	8001a3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff f9e1 	bl	8000dd8 <HAL_GetTick>
 8001a16:	0003      	movs	r3, r0
 8001a18:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff f9dc 	bl	8000dd8 <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	@ 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e2e4      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a2e:	4b85      	ldr	r3, [pc, #532]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	2380      	movs	r3, #128	@ 0x80
 8001a34:	029b      	lsls	r3, r3, #10
 8001a36:	4013      	ands	r3, r2
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x110>
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2202      	movs	r2, #2
 8001a44:	4013      	ands	r3, r2
 8001a46:	d100      	bne.n	8001a4a <HAL_RCC_OscConfig+0x13e>
 8001a48:	e099      	b.n	8001b7e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a52:	2220      	movs	r2, #32
 8001a54:	4013      	ands	r3, r2
 8001a56:	d009      	beq.n	8001a6c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001a58:	4b7a      	ldr	r3, [pc, #488]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b79      	ldr	r3, [pc, #484]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001a5e:	2120      	movs	r1, #32
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a66:	2220      	movs	r2, #32
 8001a68:	4393      	bics	r3, r2
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d005      	beq.n	8001a7e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	d13e      	bne.n	8001af6 <HAL_RCC_OscConfig+0x1ea>
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d13b      	bne.n	8001af6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a7e:	4b71      	ldr	r3, [pc, #452]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2204      	movs	r2, #4
 8001a84:	4013      	ands	r3, r2
 8001a86:	d004      	beq.n	8001a92 <HAL_RCC_OscConfig+0x186>
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e2b2      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a92:	4b6c      	ldr	r3, [pc, #432]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4a6e      	ldr	r2, [pc, #440]	@ (8001c50 <HAL_RCC_OscConfig+0x344>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	021a      	lsls	r2, r3, #8
 8001aa2:	4b68      	ldr	r3, [pc, #416]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001aa8:	4b66      	ldr	r3, [pc, #408]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2209      	movs	r2, #9
 8001aae:	4393      	bics	r3, r2
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	4b64      	ldr	r3, [pc, #400]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aba:	f000 fbeb 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8001abe:	0001      	movs	r1, r0
 8001ac0:	4b60      	ldr	r3, [pc, #384]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	4013      	ands	r3, r2
 8001aca:	4a62      	ldr	r2, [pc, #392]	@ (8001c54 <HAL_RCC_OscConfig+0x348>)
 8001acc:	5cd3      	ldrb	r3, [r2, r3]
 8001ace:	000a      	movs	r2, r1
 8001ad0:	40da      	lsrs	r2, r3
 8001ad2:	4b61      	ldr	r3, [pc, #388]	@ (8001c58 <HAL_RCC_OscConfig+0x34c>)
 8001ad4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001ad6:	4b61      	ldr	r3, [pc, #388]	@ (8001c5c <HAL_RCC_OscConfig+0x350>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2513      	movs	r5, #19
 8001adc:	197c      	adds	r4, r7, r5
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7ff f934 	bl	8000d4c <HAL_InitTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001ae8:	197b      	adds	r3, r7, r5
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d046      	beq.n	8001b7e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001af0:	197b      	adds	r3, r7, r5
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	e280      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d027      	beq.n	8001b4c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001afc:	4b51      	ldr	r3, [pc, #324]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2209      	movs	r2, #9
 8001b02:	4393      	bics	r3, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	4b4f      	ldr	r3, [pc, #316]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f963 	bl	8000dd8 <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b18:	f7ff f95e 	bl	8000dd8 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e266      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b2a:	4b46      	ldr	r3, [pc, #280]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2204      	movs	r2, #4
 8001b30:	4013      	ands	r3, r2
 8001b32:	d0f1      	beq.n	8001b18 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b34:	4b43      	ldr	r3, [pc, #268]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a45      	ldr	r2, [pc, #276]	@ (8001c50 <HAL_RCC_OscConfig+0x344>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	021a      	lsls	r2, r3, #8
 8001b44:	4b3f      	ldr	r3, [pc, #252]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	e018      	b.n	8001b7e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b3c      	ldr	r3, [pc, #240]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001b52:	2101      	movs	r1, #1
 8001b54:	438a      	bics	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff f93e 	bl	8000dd8 <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b62:	f7ff f939 	bl	8000dd8 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e241      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b74:	4b33      	ldr	r3, [pc, #204]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2204      	movs	r2, #4
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d1f1      	bne.n	8001b62 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2210      	movs	r2, #16
 8001b84:	4013      	ands	r3, r2
 8001b86:	d100      	bne.n	8001b8a <HAL_RCC_OscConfig+0x27e>
 8001b88:	e0a1      	b.n	8001cce <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d140      	bne.n	8001c12 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b90:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x29c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e227      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba8:	4b26      	ldr	r3, [pc, #152]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a2c      	ldr	r2, [pc, #176]	@ (8001c60 <HAL_RCC_OscConfig+0x354>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1a      	ldr	r2, [r3, #32]
 8001bb6:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bbc:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	0a19      	lsrs	r1, r3, #8
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	061a      	lsls	r2, r3, #24
 8001bca:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	0b5b      	lsrs	r3, r3, #13
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	2280      	movs	r2, #128	@ 0x80
 8001bda:	0212      	lsls	r2, r2, #8
 8001bdc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	210f      	movs	r1, #15
 8001be6:	400b      	ands	r3, r1
 8001be8:	491a      	ldr	r1, [pc, #104]	@ (8001c54 <HAL_RCC_OscConfig+0x348>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001bee:	4b1a      	ldr	r3, [pc, #104]	@ (8001c58 <HAL_RCC_OscConfig+0x34c>)
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <HAL_RCC_OscConfig+0x350>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2513      	movs	r5, #19
 8001bf8:	197c      	adds	r4, r7, r5
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f7ff f8a6 	bl	8000d4c <HAL_InitTick>
 8001c00:	0003      	movs	r3, r0
 8001c02:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001c04:	197b      	adds	r3, r7, r5
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d060      	beq.n	8001cce <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001c0c:	197b      	adds	r3, r7, r5
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	e1f2      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d03f      	beq.n	8001c9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <HAL_RCC_OscConfig+0x338>)
 8001c20:	2180      	movs	r1, #128	@ 0x80
 8001c22:	0049      	lsls	r1, r1, #1
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff f8d6 	bl	8000dd8 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c30:	e018      	b.n	8001c64 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c32:	f7ff f8d1 	bl	8000dd8 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d911      	bls.n	8001c64 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1d9      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
 8001c44:	40021000 	.word	0x40021000
 8001c48:	fffeffff 	.word	0xfffeffff
 8001c4c:	fffbffff 	.word	0xfffbffff
 8001c50:	ffffe0ff 	.word	0xffffe0ff
 8001c54:	08003e20 	.word	0x08003e20
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c64:	4bc9      	ldr	r3, [pc, #804]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d0e0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c70:	4bc6      	ldr	r3, [pc, #792]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4ac6      	ldr	r2, [pc, #792]	@ (8001f90 <HAL_RCC_OscConfig+0x684>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	0019      	movs	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1a      	ldr	r2, [r3, #32]
 8001c7e:	4bc3      	ldr	r3, [pc, #780]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001c80:	430a      	orrs	r2, r1
 8001c82:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c84:	4bc1      	ldr	r3, [pc, #772]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	0a19      	lsrs	r1, r3, #8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	061a      	lsls	r2, r3, #24
 8001c92:	4bbe      	ldr	r3, [pc, #760]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001c94:	430a      	orrs	r2, r1
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	e019      	b.n	8001cce <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c9a:	4bbc      	ldr	r3, [pc, #752]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4bbb      	ldr	r3, [pc, #748]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001ca0:	49bc      	ldr	r1, [pc, #752]	@ (8001f94 <HAL_RCC_OscConfig+0x688>)
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff f897 	bl	8000dd8 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f892 	bl	8000dd8 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e19a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cc2:	4bb2      	ldr	r3, [pc, #712]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	@ 0x80
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d036      	beq.n	8001d46 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d019      	beq.n	8001d14 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce0:	4baa      	ldr	r3, [pc, #680]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001ce2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ce4:	4ba9      	ldr	r3, [pc, #676]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7ff f874 	bl	8000dd8 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f86f 	bl	8000dd8 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e177      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d08:	4ba0      	ldr	r3, [pc, #640]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d0f1      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x3ea>
 8001d12:	e018      	b.n	8001d46 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d14:	4b9d      	ldr	r3, [pc, #628]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001d16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d18:	4b9c      	ldr	r3, [pc, #624]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	438a      	bics	r2, r1
 8001d1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7ff f85a 	bl	8000dd8 <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2a:	f7ff f855 	bl	8000dd8 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e15d      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d3c:	4b93      	ldr	r3, [pc, #588]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d40:	2202      	movs	r2, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d1f1      	bne.n	8001d2a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d100      	bne.n	8001d52 <HAL_RCC_OscConfig+0x446>
 8001d50:	e0ae      	b.n	8001eb0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2023      	movs	r0, #35	@ 0x23
 8001d54:	183b      	adds	r3, r7, r0
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5a:	4b8c      	ldr	r3, [pc, #560]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	055b      	lsls	r3, r3, #21
 8001d62:	4013      	ands	r3, r2
 8001d64:	d109      	bne.n	8001d7a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b89      	ldr	r3, [pc, #548]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001d68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d6a:	4b88      	ldr	r3, [pc, #544]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001d6c:	2180      	movs	r1, #128	@ 0x80
 8001d6e:	0549      	lsls	r1, r1, #21
 8001d70:	430a      	orrs	r2, r1
 8001d72:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001d74:	183b      	adds	r3, r7, r0
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	4b87      	ldr	r3, [pc, #540]	@ (8001f98 <HAL_RCC_OscConfig+0x68c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	2380      	movs	r3, #128	@ 0x80
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4013      	ands	r3, r2
 8001d84:	d11a      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d86:	4b84      	ldr	r3, [pc, #528]	@ (8001f98 <HAL_RCC_OscConfig+0x68c>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b83      	ldr	r3, [pc, #524]	@ (8001f98 <HAL_RCC_OscConfig+0x68c>)
 8001d8c:	2180      	movs	r1, #128	@ 0x80
 8001d8e:	0049      	lsls	r1, r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d94:	f7ff f820 	bl	8000dd8 <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7ff f81b 	bl	8000dd8 <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b64      	cmp	r3, #100	@ 0x64
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e123      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	4b79      	ldr	r3, [pc, #484]	@ (8001f98 <HAL_RCC_OscConfig+0x68c>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	@ 0x80
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4013      	ands	r3, r2
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4cc>
 8001dc8:	4b70      	ldr	r3, [pc, #448]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001dca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001dce:	2180      	movs	r1, #128	@ 0x80
 8001dd0:	0049      	lsls	r1, r1, #1
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dd6:	e031      	b.n	8001e3c <HAL_RCC_OscConfig+0x530>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x4ee>
 8001de0:	4b6a      	ldr	r3, [pc, #424]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001de2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001de4:	4b69      	ldr	r3, [pc, #420]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001de6:	496b      	ldr	r1, [pc, #428]	@ (8001f94 <HAL_RCC_OscConfig+0x688>)
 8001de8:	400a      	ands	r2, r1
 8001dea:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dec:	4b67      	ldr	r3, [pc, #412]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001dee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001df0:	4b66      	ldr	r3, [pc, #408]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001df2:	496a      	ldr	r1, [pc, #424]	@ (8001f9c <HAL_RCC_OscConfig+0x690>)
 8001df4:	400a      	ands	r2, r1
 8001df6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001df8:	e020      	b.n	8001e3c <HAL_RCC_OscConfig+0x530>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	23a0      	movs	r3, #160	@ 0xa0
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d10e      	bne.n	8001e24 <HAL_RCC_OscConfig+0x518>
 8001e06:	4b61      	ldr	r3, [pc, #388]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001e08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e0a:	4b60      	ldr	r3, [pc, #384]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001e0c:	2180      	movs	r1, #128	@ 0x80
 8001e0e:	00c9      	lsls	r1, r1, #3
 8001e10:	430a      	orrs	r2, r1
 8001e12:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e14:	4b5d      	ldr	r3, [pc, #372]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001e16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e18:	4b5c      	ldr	r3, [pc, #368]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001e1a:	2180      	movs	r1, #128	@ 0x80
 8001e1c:	0049      	lsls	r1, r1, #1
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0x530>
 8001e24:	4b59      	ldr	r3, [pc, #356]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001e26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e28:	4b58      	ldr	r3, [pc, #352]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001e2a:	495a      	ldr	r1, [pc, #360]	@ (8001f94 <HAL_RCC_OscConfig+0x688>)
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e30:	4b56      	ldr	r3, [pc, #344]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001e32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e34:	4b55      	ldr	r3, [pc, #340]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001e36:	4959      	ldr	r1, [pc, #356]	@ (8001f9c <HAL_RCC_OscConfig+0x690>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d015      	beq.n	8001e70 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7fe ffc8 	bl	8000dd8 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7fe ffc3 	bl	8000dd8 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	4a51      	ldr	r2, [pc, #324]	@ (8001fa0 <HAL_RCC_OscConfig+0x694>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e0ca      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e62:	4b4a      	ldr	r3, [pc, #296]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001e64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d0ef      	beq.n	8001e4e <HAL_RCC_OscConfig+0x542>
 8001e6e:	e014      	b.n	8001e9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7fe ffb2 	bl	8000dd8 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e78:	e009      	b.n	8001e8e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7fe ffad 	bl	8000dd8 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	4a46      	ldr	r2, [pc, #280]	@ (8001fa0 <HAL_RCC_OscConfig+0x694>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0b4      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001e90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d1ef      	bne.n	8001e7a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e9a:	2323      	movs	r3, #35	@ 0x23
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea4:	4b39      	ldr	r3, [pc, #228]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001ea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ea8:	4b38      	ldr	r3, [pc, #224]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001eaa:	493e      	ldr	r1, [pc, #248]	@ (8001fa4 <HAL_RCC_OscConfig+0x698>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d100      	bne.n	8001eba <HAL_RCC_OscConfig+0x5ae>
 8001eb8:	e09d      	b.n	8001ff6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	d100      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5b6>
 8001ec0:	e076      	b.n	8001fb0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d145      	bne.n	8001f56 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	4b30      	ldr	r3, [pc, #192]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001ed0:	4935      	ldr	r1, [pc, #212]	@ (8001fa8 <HAL_RCC_OscConfig+0x69c>)
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7fe ff7f 	bl	8000dd8 <HAL_GetTick>
 8001eda:	0003      	movs	r3, r0
 8001edc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7fe ff7a 	bl	8000dd8 <HAL_GetTick>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e082      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ef2:	4b26      	ldr	r3, [pc, #152]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	@ 0x80
 8001ef8:	049b      	lsls	r3, r3, #18
 8001efa:	4013      	ands	r3, r2
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efe:	4b23      	ldr	r3, [pc, #140]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	4a2a      	ldr	r2, [pc, #168]	@ (8001fac <HAL_RCC_OscConfig+0x6a0>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	431a      	orrs	r2, r3
 8001f18:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001f24:	2180      	movs	r1, #128	@ 0x80
 8001f26:	0449      	lsls	r1, r1, #17
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ff54 	bl	8000dd8 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f36:	f7fe ff4f 	bl	8000dd8 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e057      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f48:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	049b      	lsls	r3, r3, #18
 8001f50:	4013      	ands	r3, r2
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x62a>
 8001f54:	e04f      	b.n	8001ff6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001f5c:	4912      	ldr	r1, [pc, #72]	@ (8001fa8 <HAL_RCC_OscConfig+0x69c>)
 8001f5e:	400a      	ands	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe ff39 	bl	8000dd8 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7fe ff34 	bl	8000dd8 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e03c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f7e:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <HAL_RCC_OscConfig+0x680>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	049b      	lsls	r3, r3, #18
 8001f86:	4013      	ands	r3, r2
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x660>
 8001f8a:	e034      	b.n	8001ff6 <HAL_RCC_OscConfig+0x6ea>
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	ffff1fff 	.word	0xffff1fff
 8001f94:	fffffeff 	.word	0xfffffeff
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	fffffbff 	.word	0xfffffbff
 8001fa0:	00001388 	.word	0x00001388
 8001fa4:	efffffff 	.word	0xefffffff
 8001fa8:	feffffff 	.word	0xfeffffff
 8001fac:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e01d      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fbc:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <HAL_RCC_OscConfig+0x6f4>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	2380      	movs	r3, #128	@ 0x80
 8001fc6:	025b      	lsls	r3, r3, #9
 8001fc8:	401a      	ands	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	23f0      	movs	r3, #240	@ 0xf0
 8001fd6:	039b      	lsls	r3, r3, #14
 8001fd8:	401a      	ands	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	23c0      	movs	r3, #192	@ 0xc0
 8001fe6:	041b      	lsls	r3, r3, #16
 8001fe8:	401a      	ands	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b00a      	add	sp, #40	@ 0x28
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	40021000 	.word	0x40021000

08002004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b5b0      	push	{r4, r5, r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e128      	b.n	800226a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b96      	ldr	r3, [pc, #600]	@ (8002274 <HAL_RCC_ClockConfig+0x270>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2201      	movs	r2, #1
 800201e:	4013      	ands	r3, r2
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d91e      	bls.n	8002064 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b93      	ldr	r3, [pc, #588]	@ (8002274 <HAL_RCC_ClockConfig+0x270>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2201      	movs	r2, #1
 800202c:	4393      	bics	r3, r2
 800202e:	0019      	movs	r1, r3
 8002030:	4b90      	ldr	r3, [pc, #576]	@ (8002274 <HAL_RCC_ClockConfig+0x270>)
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002038:	f7fe fece 	bl	8000dd8 <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002040:	e009      	b.n	8002056 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002042:	f7fe fec9 	bl	8000dd8 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	4a8a      	ldr	r2, [pc, #552]	@ (8002278 <HAL_RCC_ClockConfig+0x274>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e109      	b.n	800226a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b87      	ldr	r3, [pc, #540]	@ (8002274 <HAL_RCC_ClockConfig+0x270>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2201      	movs	r2, #1
 800205c:	4013      	ands	r3, r2
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d1ee      	bne.n	8002042 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2202      	movs	r2, #2
 800206a:	4013      	ands	r3, r2
 800206c:	d009      	beq.n	8002082 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206e:	4b83      	ldr	r3, [pc, #524]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	22f0      	movs	r2, #240	@ 0xf0
 8002074:	4393      	bics	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	4b7f      	ldr	r3, [pc, #508]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 800207e:	430a      	orrs	r2, r1
 8002080:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2201      	movs	r2, #1
 8002088:	4013      	ands	r3, r2
 800208a:	d100      	bne.n	800208e <HAL_RCC_ClockConfig+0x8a>
 800208c:	e089      	b.n	80021a2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002096:	4b79      	ldr	r3, [pc, #484]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2380      	movs	r3, #128	@ 0x80
 800209c:	029b      	lsls	r3, r3, #10
 800209e:	4013      	ands	r3, r2
 80020a0:	d120      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0e1      	b.n	800226a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020ae:	4b73      	ldr	r3, [pc, #460]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	049b      	lsls	r3, r3, #18
 80020b6:	4013      	ands	r3, r2
 80020b8:	d114      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e0d5      	b.n	800226a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d106      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020c6:	4b6d      	ldr	r3, [pc, #436]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2204      	movs	r2, #4
 80020cc:	4013      	ands	r3, r2
 80020ce:	d109      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0ca      	b.n	800226a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020d4:	4b69      	ldr	r3, [pc, #420]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	@ 0x80
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4013      	ands	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0c2      	b.n	800226a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e4:	4b65      	ldr	r3, [pc, #404]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2203      	movs	r2, #3
 80020ea:	4393      	bics	r3, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4b62      	ldr	r3, [pc, #392]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f8:	f7fe fe6e 	bl	8000dd8 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d111      	bne.n	800212c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002108:	e009      	b.n	800211e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210a:	f7fe fe65 	bl	8000dd8 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	4a58      	ldr	r2, [pc, #352]	@ (8002278 <HAL_RCC_ClockConfig+0x274>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e0a5      	b.n	800226a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800211e:	4b57      	ldr	r3, [pc, #348]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	220c      	movs	r2, #12
 8002124:	4013      	ands	r3, r2
 8002126:	2b08      	cmp	r3, #8
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_ClockConfig+0x106>
 800212a:	e03a      	b.n	80021a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d111      	bne.n	8002158 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002134:	e009      	b.n	800214a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002136:	f7fe fe4f 	bl	8000dd8 <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	4a4d      	ldr	r2, [pc, #308]	@ (8002278 <HAL_RCC_ClockConfig+0x274>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e08f      	b.n	800226a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800214a:	4b4c      	ldr	r3, [pc, #304]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	220c      	movs	r2, #12
 8002150:	4013      	ands	r3, r2
 8002152:	2b0c      	cmp	r3, #12
 8002154:	d1ef      	bne.n	8002136 <HAL_RCC_ClockConfig+0x132>
 8002156:	e024      	b.n	80021a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d11b      	bne.n	8002198 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002160:	e009      	b.n	8002176 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002162:	f7fe fe39 	bl	8000dd8 <HAL_GetTick>
 8002166:	0002      	movs	r2, r0
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	4a42      	ldr	r2, [pc, #264]	@ (8002278 <HAL_RCC_ClockConfig+0x274>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e079      	b.n	800226a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002176:	4b41      	ldr	r3, [pc, #260]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	220c      	movs	r2, #12
 800217c:	4013      	ands	r3, r2
 800217e:	2b04      	cmp	r3, #4
 8002180:	d1ef      	bne.n	8002162 <HAL_RCC_ClockConfig+0x15e>
 8002182:	e00e      	b.n	80021a2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7fe fe28 	bl	8000dd8 <HAL_GetTick>
 8002188:	0002      	movs	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	4a3a      	ldr	r2, [pc, #232]	@ (8002278 <HAL_RCC_ClockConfig+0x274>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e068      	b.n	800226a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002198:	4b38      	ldr	r3, [pc, #224]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	220c      	movs	r2, #12
 800219e:	4013      	ands	r3, r2
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a2:	4b34      	ldr	r3, [pc, #208]	@ (8002274 <HAL_RCC_ClockConfig+0x270>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2201      	movs	r2, #1
 80021a8:	4013      	ands	r3, r2
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d21e      	bcs.n	80021ee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b0:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <HAL_RCC_ClockConfig+0x270>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	4393      	bics	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <HAL_RCC_ClockConfig+0x270>)
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021c2:	f7fe fe09 	bl	8000dd8 <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	e009      	b.n	80021e0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021cc:	f7fe fe04 	bl	8000dd8 <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	4a28      	ldr	r2, [pc, #160]	@ (8002278 <HAL_RCC_ClockConfig+0x274>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e044      	b.n	800226a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e0:	4b24      	ldr	r3, [pc, #144]	@ (8002274 <HAL_RCC_ClockConfig+0x270>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d1ee      	bne.n	80021cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2204      	movs	r2, #4
 80021f4:	4013      	ands	r3, r2
 80021f6:	d009      	beq.n	800220c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f8:	4b20      	ldr	r3, [pc, #128]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a20      	ldr	r2, [pc, #128]	@ (8002280 <HAL_RCC_ClockConfig+0x27c>)
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2208      	movs	r2, #8
 8002212:	4013      	ands	r3, r2
 8002214:	d00a      	beq.n	800222c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002216:	4b19      	ldr	r3, [pc, #100]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4a1a      	ldr	r2, [pc, #104]	@ (8002284 <HAL_RCC_ClockConfig+0x280>)
 800221c:	4013      	ands	r3, r2
 800221e:	0019      	movs	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	00da      	lsls	r2, r3, #3
 8002226:	4b15      	ldr	r3, [pc, #84]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 8002228:	430a      	orrs	r2, r1
 800222a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800222c:	f000 f832 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8002230:	0001      	movs	r1, r0
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_RCC_ClockConfig+0x278>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	220f      	movs	r2, #15
 800223a:	4013      	ands	r3, r2
 800223c:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <HAL_RCC_ClockConfig+0x284>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	000a      	movs	r2, r1
 8002242:	40da      	lsrs	r2, r3
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <HAL_RCC_ClockConfig+0x288>)
 8002246:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002248:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <HAL_RCC_ClockConfig+0x28c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	250b      	movs	r5, #11
 800224e:	197c      	adds	r4, r7, r5
 8002250:	0018      	movs	r0, r3
 8002252:	f7fe fd7b 	bl	8000d4c <HAL_InitTick>
 8002256:	0003      	movs	r3, r0
 8002258:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800225a:	197b      	adds	r3, r7, r5
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002262:	197b      	adds	r3, r7, r5
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	e000      	b.n	800226a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b004      	add	sp, #16
 8002270:	bdb0      	pop	{r4, r5, r7, pc}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	40022000 	.word	0x40022000
 8002278:	00001388 	.word	0x00001388
 800227c:	40021000 	.word	0x40021000
 8002280:	fffff8ff 	.word	0xfffff8ff
 8002284:	ffffc7ff 	.word	0xffffc7ff
 8002288:	08003e20 	.word	0x08003e20
 800228c:	20000000 	.word	0x20000000
 8002290:	20000004 	.word	0x20000004

08002294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002294:	b5b0      	push	{r4, r5, r7, lr}
 8002296:	b08e      	sub	sp, #56	@ 0x38
 8002298:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800229a:	4b4c      	ldr	r3, [pc, #304]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x138>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022a2:	230c      	movs	r3, #12
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d014      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x40>
 80022aa:	d900      	bls.n	80022ae <HAL_RCC_GetSysClockFreq+0x1a>
 80022ac:	e07b      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x112>
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d002      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x24>
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d00b      	beq.n	80022ce <HAL_RCC_GetSysClockFreq+0x3a>
 80022b6:	e076      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022b8:	4b44      	ldr	r3, [pc, #272]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x138>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2210      	movs	r2, #16
 80022be:	4013      	ands	r3, r2
 80022c0:	d002      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80022c2:	4b43      	ldr	r3, [pc, #268]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80022c4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80022c6:	e07c      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80022c8:	4b42      	ldr	r3, [pc, #264]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x140>)
 80022ca:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80022cc:	e079      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ce:	4b42      	ldr	r3, [pc, #264]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x144>)
 80022d0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80022d2:	e076      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d6:	0c9a      	lsrs	r2, r3, #18
 80022d8:	230f      	movs	r3, #15
 80022da:	401a      	ands	r2, r3
 80022dc:	4b3f      	ldr	r3, [pc, #252]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x148>)
 80022de:	5c9b      	ldrb	r3, [r3, r2]
 80022e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e4:	0d9a      	lsrs	r2, r3, #22
 80022e6:	2303      	movs	r3, #3
 80022e8:	4013      	ands	r3, r2
 80022ea:	3301      	adds	r3, #1
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ee:	4b37      	ldr	r3, [pc, #220]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x138>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	025b      	lsls	r3, r3, #9
 80022f6:	4013      	ands	r3, r2
 80022f8:	d01a      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	4a35      	ldr	r2, [pc, #212]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002304:	2300      	movs	r3, #0
 8002306:	69b8      	ldr	r0, [r7, #24]
 8002308:	69f9      	ldr	r1, [r7, #28]
 800230a:	f7fd ffb1 	bl	8000270 <__aeabi_lmul>
 800230e:	0002      	movs	r2, r0
 8002310:	000b      	movs	r3, r1
 8002312:	0010      	movs	r0, r2
 8002314:	0019      	movs	r1, r3
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f7fd ff85 	bl	8000230 <__aeabi_uldivmod>
 8002326:	0002      	movs	r2, r0
 8002328:	000b      	movs	r3, r1
 800232a:	0013      	movs	r3, r2
 800232c:	637b      	str	r3, [r7, #52]	@ 0x34
 800232e:	e037      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002330:	4b26      	ldr	r3, [pc, #152]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x138>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2210      	movs	r2, #16
 8002336:	4013      	ands	r3, r2
 8002338:	d01a      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800233a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002344:	2300      	movs	r3, #0
 8002346:	68b8      	ldr	r0, [r7, #8]
 8002348:	68f9      	ldr	r1, [r7, #12]
 800234a:	f7fd ff91 	bl	8000270 <__aeabi_lmul>
 800234e:	0002      	movs	r2, r0
 8002350:	000b      	movs	r3, r1
 8002352:	0010      	movs	r0, r2
 8002354:	0019      	movs	r1, r3
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f7fd ff65 	bl	8000230 <__aeabi_uldivmod>
 8002366:	0002      	movs	r2, r0
 8002368:	000b      	movs	r3, r1
 800236a:	0013      	movs	r3, r2
 800236c:	637b      	str	r3, [r7, #52]	@ 0x34
 800236e:	e017      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002372:	0018      	movs	r0, r3
 8002374:	2300      	movs	r3, #0
 8002376:	0019      	movs	r1, r3
 8002378:	4a16      	ldr	r2, [pc, #88]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x140>)
 800237a:	2300      	movs	r3, #0
 800237c:	f7fd ff78 	bl	8000270 <__aeabi_lmul>
 8002380:	0002      	movs	r2, r0
 8002382:	000b      	movs	r3, r1
 8002384:	0010      	movs	r0, r2
 8002386:	0019      	movs	r1, r3
 8002388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238a:	001c      	movs	r4, r3
 800238c:	2300      	movs	r3, #0
 800238e:	001d      	movs	r5, r3
 8002390:	0022      	movs	r2, r4
 8002392:	002b      	movs	r3, r5
 8002394:	f7fd ff4c 	bl	8000230 <__aeabi_uldivmod>
 8002398:	0002      	movs	r2, r0
 800239a:	000b      	movs	r3, r1
 800239c:	0013      	movs	r3, r2
 800239e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80023a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80023a4:	e00d      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80023a6:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x138>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0b5b      	lsrs	r3, r3, #13
 80023ac:	2207      	movs	r2, #7
 80023ae:	4013      	ands	r3, r2
 80023b0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	3301      	adds	r3, #1
 80023b6:	2280      	movs	r2, #128	@ 0x80
 80023b8:	0212      	lsls	r2, r2, #8
 80023ba:	409a      	lsls	r2, r3
 80023bc:	0013      	movs	r3, r2
 80023be:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80023c0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b00e      	add	sp, #56	@ 0x38
 80023ca:	bdb0      	pop	{r4, r5, r7, pc}
 80023cc:	40021000 	.word	0x40021000
 80023d0:	003d0900 	.word	0x003d0900
 80023d4:	00f42400 	.word	0x00f42400
 80023d8:	007a1200 	.word	0x007a1200
 80023dc:	08003e38 	.word	0x08003e38

080023e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e4:	4b02      	ldr	r3, [pc, #8]	@ (80023f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			@ (mov r8, r8)
 80023f0:	20000000 	.word	0x20000000

080023f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023f8:	f7ff fff2 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 80023fc:	0001      	movs	r1, r0
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	2207      	movs	r2, #7
 8002406:	4013      	ands	r3, r2
 8002408:	4a04      	ldr	r2, [pc, #16]	@ (800241c <HAL_RCC_GetPCLK1Freq+0x28>)
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	40d9      	lsrs	r1, r3
 800240e:	000b      	movs	r3, r1
}
 8002410:	0018      	movs	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	40021000 	.word	0x40021000
 800241c:	08003e30 	.word	0x08003e30

08002420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002424:	f7ff ffdc 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002428:	0001      	movs	r1, r0
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_RCC_GetPCLK2Freq+0x24>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	0adb      	lsrs	r3, r3, #11
 8002430:	2207      	movs	r2, #7
 8002432:	4013      	ands	r3, r2
 8002434:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	40d9      	lsrs	r1, r3
 800243a:	000b      	movs	r3, r1
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	40021000 	.word	0x40021000
 8002448:	08003e30 	.word	0x08003e30

0800244c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002454:	2017      	movs	r0, #23
 8002456:	183b      	adds	r3, r7, r0
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2220      	movs	r2, #32
 8002462:	4013      	ands	r3, r2
 8002464:	d100      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002466:	e0c7      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002468:	4b84      	ldr	r3, [pc, #528]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800246a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	055b      	lsls	r3, r3, #21
 8002470:	4013      	ands	r3, r2
 8002472:	d109      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b81      	ldr	r3, [pc, #516]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002476:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002478:	4b80      	ldr	r3, [pc, #512]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800247a:	2180      	movs	r1, #128	@ 0x80
 800247c:	0549      	lsls	r1, r1, #21
 800247e:	430a      	orrs	r2, r1
 8002480:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002482:	183b      	adds	r3, r7, r0
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	4b7d      	ldr	r3, [pc, #500]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4013      	ands	r3, r2
 8002492:	d11a      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002494:	4b7a      	ldr	r3, [pc, #488]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b79      	ldr	r3, [pc, #484]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800249a:	2180      	movs	r1, #128	@ 0x80
 800249c:	0049      	lsls	r1, r1, #1
 800249e:	430a      	orrs	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a2:	f7fe fc99 	bl	8000dd8 <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024aa:	e008      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ac:	f7fe fc94 	bl	8000dd8 <HAL_GetTick>
 80024b0:	0002      	movs	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	@ 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e0d9      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b70      	ldr	r3, [pc, #448]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4013      	ands	r3, r2
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80024ca:	4b6c      	ldr	r3, [pc, #432]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	23c0      	movs	r3, #192	@ 0xc0
 80024d0:	039b      	lsls	r3, r3, #14
 80024d2:	4013      	ands	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	23c0      	movs	r3, #192	@ 0xc0
 80024dc:	039b      	lsls	r3, r3, #14
 80024de:	4013      	ands	r3, r2
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d013      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	23c0      	movs	r3, #192	@ 0xc0
 80024ec:	029b      	lsls	r3, r3, #10
 80024ee:	401a      	ands	r2, r3
 80024f0:	23c0      	movs	r3, #192	@ 0xc0
 80024f2:	029b      	lsls	r3, r3, #10
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d10a      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024f8:	4b60      	ldr	r3, [pc, #384]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	@ 0x80
 80024fe:	029b      	lsls	r3, r3, #10
 8002500:	401a      	ands	r2, r3
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	029b      	lsls	r3, r3, #10
 8002506:	429a      	cmp	r2, r3
 8002508:	d101      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0b1      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800250e:	4b5b      	ldr	r3, [pc, #364]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002512:	23c0      	movs	r3, #192	@ 0xc0
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	4013      	ands	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d03b      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	23c0      	movs	r3, #192	@ 0xc0
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	4013      	ands	r3, r2
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d033      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2220      	movs	r2, #32
 8002536:	4013      	ands	r3, r2
 8002538:	d02e      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800253a:	4b50      	ldr	r3, [pc, #320]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800253c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253e:	4a51      	ldr	r2, [pc, #324]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002540:	4013      	ands	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002544:	4b4d      	ldr	r3, [pc, #308]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002546:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002548:	4b4c      	ldr	r3, [pc, #304]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800254a:	2180      	movs	r1, #128	@ 0x80
 800254c:	0309      	lsls	r1, r1, #12
 800254e:	430a      	orrs	r2, r1
 8002550:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002552:	4b4a      	ldr	r3, [pc, #296]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002554:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002556:	4b49      	ldr	r3, [pc, #292]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002558:	494b      	ldr	r1, [pc, #300]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800255a:	400a      	ands	r2, r1
 800255c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800255e:	4b47      	ldr	r3, [pc, #284]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4013      	ands	r3, r2
 800256c:	d014      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7fe fc33 	bl	8000dd8 <HAL_GetTick>
 8002572:	0003      	movs	r3, r0
 8002574:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002576:	e009      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7fe fc2e 	bl	8000dd8 <HAL_GetTick>
 800257c:	0002      	movs	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	4a42      	ldr	r2, [pc, #264]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e072      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800258c:	4b3b      	ldr	r3, [pc, #236]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800258e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4013      	ands	r3, r2
 8002596:	d0ef      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2220      	movs	r2, #32
 800259e:	4013      	ands	r3, r2
 80025a0:	d01f      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	23c0      	movs	r3, #192	@ 0xc0
 80025a8:	029b      	lsls	r3, r3, #10
 80025aa:	401a      	ands	r2, r3
 80025ac:	23c0      	movs	r3, #192	@ 0xc0
 80025ae:	029b      	lsls	r3, r3, #10
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d10c      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x182>
 80025b4:	4b31      	ldr	r3, [pc, #196]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a35      	ldr	r2, [pc, #212]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	23c0      	movs	r3, #192	@ 0xc0
 80025c4:	039b      	lsls	r3, r3, #14
 80025c6:	401a      	ands	r2, r3
 80025c8:	4b2c      	ldr	r3, [pc, #176]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	4b2b      	ldr	r3, [pc, #172]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	23c0      	movs	r3, #192	@ 0xc0
 80025d8:	029b      	lsls	r3, r3, #10
 80025da:	401a      	ands	r2, r3
 80025dc:	4b27      	ldr	r3, [pc, #156]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e2:	2317      	movs	r3, #23
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b23      	ldr	r3, [pc, #140]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025f0:	4b22      	ldr	r3, [pc, #136]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025f2:	4928      	ldr	r1, [pc, #160]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025f4:	400a      	ands	r2, r1
 80025f6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2202      	movs	r2, #2
 80025fe:	4013      	ands	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	220c      	movs	r2, #12
 8002608:	4393      	bics	r3, r2
 800260a:	0019      	movs	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002612:	430a      	orrs	r2, r1
 8002614:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2204      	movs	r2, #4
 800261c:	4013      	ands	r3, r2
 800261e:	d009      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002620:	4b16      	ldr	r3, [pc, #88]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002624:	4a1c      	ldr	r2, [pc, #112]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002626:	4013      	ands	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	4b13      	ldr	r3, [pc, #76]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002630:	430a      	orrs	r2, r1
 8002632:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2208      	movs	r2, #8
 800263a:	4013      	ands	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800263e:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	4a16      	ldr	r2, [pc, #88]	@ (800269c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002644:	4013      	ands	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800264e:	430a      	orrs	r2, r1
 8002650:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2280      	movs	r2, #128	@ 0x80
 8002658:	4013      	ands	r3, r2
 800265a:	d009      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800265c:	4b07      	ldr	r3, [pc, #28]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800265e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002660:	4a0f      	ldr	r2, [pc, #60]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	4b04      	ldr	r3, [pc, #16]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800266c:	430a      	orrs	r2, r1
 800266e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	0018      	movs	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	b006      	add	sp, #24
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			@ (mov r8, r8)
 800267c:	40021000 	.word	0x40021000
 8002680:	40007000 	.word	0x40007000
 8002684:	fffcffff 	.word	0xfffcffff
 8002688:	fff7ffff 	.word	0xfff7ffff
 800268c:	00001388 	.word	0x00001388
 8002690:	ffcfffff 	.word	0xffcfffff
 8002694:	efffffff 	.word	0xefffffff
 8002698:	fffff3ff 	.word	0xfffff3ff
 800269c:	ffffcfff 	.word	0xffffcfff
 80026a0:	fff3ffff 	.word	0xfff3ffff

080026a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026ac:	230f      	movs	r3, #15
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e088      	b.n	80027d0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2221      	movs	r2, #33	@ 0x21
 80026c2:	5c9b      	ldrb	r3, [r3, r2]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d107      	bne.n	80026da <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2220      	movs	r2, #32
 80026ce:	2100      	movs	r1, #0
 80026d0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f7fe fa8b 	bl	8000bf0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2221      	movs	r2, #33	@ 0x21
 80026de:	2102      	movs	r1, #2
 80026e0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2210      	movs	r2, #16
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d05f      	beq.n	80027b0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	22ca      	movs	r2, #202	@ 0xca
 80026f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2253      	movs	r2, #83	@ 0x53
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002700:	250f      	movs	r5, #15
 8002702:	197c      	adds	r4, r7, r5
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f890 	bl	800282c <RTC_EnterInitMode>
 800270c:	0003      	movs	r3, r0
 800270e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002710:	0028      	movs	r0, r5
 8002712:	183b      	adds	r3, r7, r0
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d12c      	bne.n	8002774 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	492c      	ldr	r1, [pc, #176]	@ (80027d8 <HAL_RTC_Init+0x134>)
 8002726:	400a      	ands	r2, r1
 8002728:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68d2      	ldr	r2, [r2, #12]
 8002750:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6919      	ldr	r1, [r3, #16]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002766:	183c      	adds	r4, r7, r0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0018      	movs	r0, r3
 800276c:	f000 f8a2 	bl	80028b4 <RTC_ExitInitMode>
 8002770:	0003      	movs	r3, r0
 8002772:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002774:	230f      	movs	r3, #15
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d113      	bne.n	80027a6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2103      	movs	r1, #3
 800278a:	438a      	bics	r2, r1
 800278c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	22ff      	movs	r2, #255	@ 0xff
 80027ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80027ae:	e003      	b.n	80027b8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80027b0:	230f      	movs	r3, #15
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80027b8:	230f      	movs	r3, #15
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2221      	movs	r2, #33	@ 0x21
 80027c6:	2101      	movs	r1, #1
 80027c8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80027ca:	230f      	movs	r3, #15
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	781b      	ldrb	r3, [r3, #0]
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b004      	add	sp, #16
 80027d6:	bdb0      	pop	{r4, r5, r7, pc}
 80027d8:	ff8fffbf 	.word	0xff8fffbf

080027dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002828 <HAL_RTC_WaitForSynchro+0x4c>)
 80027ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027f0:	f7fe faf2 	bl	8000dd8 <HAL_GetTick>
 80027f4:	0003      	movs	r3, r0
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027f8:	e00a      	b.n	8002810 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027fa:	f7fe faed 	bl	8000dd8 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad2      	subs	r2, r2, r3
 8002804:	23fa      	movs	r3, #250	@ 0xfa
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	429a      	cmp	r2, r3
 800280a:	d901      	bls.n	8002810 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e006      	b.n	800281e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	4013      	ands	r3, r2
 800281a:	d0ee      	beq.n	80027fa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	0018      	movs	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	b004      	add	sp, #16
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	0001ff5f 	.word	0x0001ff5f

0800282c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002838:	230f      	movs	r3, #15
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2240      	movs	r2, #64	@ 0x40
 8002848:	4013      	ands	r3, r2
 800284a:	d12c      	bne.n	80028a6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2180      	movs	r1, #128	@ 0x80
 8002858:	430a      	orrs	r2, r1
 800285a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800285c:	f7fe fabc 	bl	8000dd8 <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002864:	e014      	b.n	8002890 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002866:	f7fe fab7 	bl	8000dd8 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1ad2      	subs	r2, r2, r3
 8002870:	200f      	movs	r0, #15
 8002872:	183b      	adds	r3, r7, r0
 8002874:	1839      	adds	r1, r7, r0
 8002876:	7809      	ldrb	r1, [r1, #0]
 8002878:	7019      	strb	r1, [r3, #0]
 800287a:	23fa      	movs	r3, #250	@ 0xfa
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	429a      	cmp	r2, r3
 8002880:	d906      	bls.n	8002890 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2221      	movs	r2, #33	@ 0x21
 8002886:	2104      	movs	r1, #4
 8002888:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800288a:	183b      	adds	r3, r7, r0
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2240      	movs	r2, #64	@ 0x40
 8002898:	4013      	ands	r3, r2
 800289a:	d104      	bne.n	80028a6 <RTC_EnterInitMode+0x7a>
 800289c:	230f      	movs	r3, #15
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d1df      	bne.n	8002866 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80028a6:	230f      	movs	r3, #15
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	781b      	ldrb	r3, [r3, #0]
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028bc:	240f      	movs	r4, #15
 80028be:	193b      	adds	r3, r7, r4
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2180      	movs	r1, #128	@ 0x80
 80028d0:	438a      	bics	r2, r1
 80028d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2220      	movs	r2, #32
 80028dc:	4013      	ands	r3, r2
 80028de:	d10c      	bne.n	80028fa <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f7ff ff7a 	bl	80027dc <HAL_RTC_WaitForSynchro>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d006      	beq.n	80028fa <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2221      	movs	r2, #33	@ 0x21
 80028f0:	2104      	movs	r1, #4
 80028f2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80028f4:	193b      	adds	r3, r7, r4
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80028fa:	230f      	movs	r3, #15
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	781b      	ldrb	r3, [r3, #0]
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	b005      	add	sp, #20
 8002906:	bd90      	pop	{r4, r7, pc}

08002908 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002914:	4b64      	ldr	r3, [pc, #400]	@ (8002aa8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	22fa      	movs	r2, #250	@ 0xfa
 800291a:	01d1      	lsls	r1, r2, #7
 800291c:	0018      	movs	r0, r3
 800291e:	f7fd fbfb 	bl	8000118 <__udivsi3>
 8002922:	0003      	movs	r3, r0
 8002924:	001a      	movs	r2, r3
 8002926:	0013      	movs	r3, r2
 8002928:	015b      	lsls	r3, r3, #5
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	189b      	adds	r3, r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	5c9b      	ldrb	r3, [r3, r2]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 800293e:	2302      	movs	r3, #2
 8002940:	e0ad      	b.n	8002a9e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	2101      	movs	r1, #1
 8002948:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2221      	movs	r2, #33	@ 0x21
 800294e:	2102      	movs	r1, #2
 8002950:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	22ca      	movs	r2, #202	@ 0xca
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2253      	movs	r2, #83	@ 0x53
 8002960:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	2380      	movs	r3, #128	@ 0x80
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4013      	ands	r3, r2
 800296e:	d019      	beq.n	80029a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3b01      	subs	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10d      	bne.n	8002998 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	22ff      	movs	r2, #255	@ 0xff
 8002982:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2221      	movs	r2, #33	@ 0x21
 8002988:	2103      	movs	r1, #3
 800298a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	2100      	movs	r1, #0
 8002992:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e082      	b.n	8002a9e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2204      	movs	r2, #4
 80029a0:	4013      	ands	r3, r2
 80029a2:	d1e5      	bne.n	8002970 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	493f      	ldr	r1, [pc, #252]	@ (8002aac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	22ff      	movs	r2, #255	@ 0xff
 80029bc:	401a      	ands	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	493b      	ldr	r1, [pc, #236]	@ (8002ab0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80029c4:	430a      	orrs	r2, r1
 80029c6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80029c8:	4b37      	ldr	r3, [pc, #220]	@ (8002aa8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	22fa      	movs	r2, #250	@ 0xfa
 80029ce:	01d1      	lsls	r1, r2, #7
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fd fba1 	bl	8000118 <__udivsi3>
 80029d6:	0003      	movs	r3, r0
 80029d8:	001a      	movs	r2, r3
 80029da:	0013      	movs	r3, r2
 80029dc:	015b      	lsls	r3, r3, #5
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	189b      	adds	r3, r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10d      	bne.n	8002a10 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	22ff      	movs	r2, #255	@ 0xff
 80029fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2221      	movs	r2, #33	@ 0x21
 8002a00:	2103      	movs	r1, #3
 8002a02:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	2100      	movs	r1, #0
 8002a0a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e046      	b.n	8002a9e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2204      	movs	r2, #4
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d0e5      	beq.n	80029e8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2107      	movs	r1, #7
 8002a28:	438a      	bics	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6899      	ldr	r1, [r3, #8]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002a44:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002a4a:	2180      	movs	r1, #128	@ 0x80
 8002a4c:	0349      	lsls	r1, r1, #13
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002a52:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002a58:	2180      	movs	r1, #128	@ 0x80
 8002a5a:	0349      	lsls	r1, r1, #13
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2180      	movs	r1, #128	@ 0x80
 8002a6c:	01c9      	lsls	r1, r1, #7
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2180      	movs	r1, #128	@ 0x80
 8002a7e:	00c9      	lsls	r1, r1, #3
 8002a80:	430a      	orrs	r2, r1
 8002a82:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	22ff      	movs	r2, #255	@ 0xff
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2221      	movs	r2, #33	@ 0x21
 8002a90:	2101      	movs	r1, #1
 8002a92:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	2100      	movs	r1, #0
 8002a9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b006      	add	sp, #24
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	fffffbff 	.word	0xfffffbff
 8002ab0:	fffffb7f 	.word	0xfffffb7f
 8002ab4:	40010400 	.word	0x40010400

08002ab8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	5c9b      	ldrb	r3, [r3, r2]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e04e      	b.n	8002b70 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2221      	movs	r2, #33	@ 0x21
 8002ade:	2102      	movs	r1, #2
 8002ae0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	22ca      	movs	r2, #202	@ 0xca
 8002ae8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2253      	movs	r2, #83	@ 0x53
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	491e      	ldr	r1, [pc, #120]	@ (8002b78 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8002afe:	400a      	ands	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	491b      	ldr	r1, [pc, #108]	@ (8002b7c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8002b0e:	400a      	ands	r2, r1
 8002b10:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b12:	f7fe f961 	bl	8000dd8 <HAL_GetTick>
 8002b16:	0003      	movs	r3, r0
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002b1a:	e016      	b.n	8002b4a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b1c:	f7fe f95c 	bl	8000dd8 <HAL_GetTick>
 8002b20:	0002      	movs	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad2      	subs	r2, r2, r3
 8002b26:	23fa      	movs	r3, #250	@ 0xfa
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d90d      	bls.n	8002b4a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	22ff      	movs	r2, #255	@ 0xff
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2221      	movs	r2, #33	@ 0x21
 8002b3a:	2103      	movs	r1, #3
 8002b3c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	2100      	movs	r1, #0
 8002b44:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e012      	b.n	8002b70 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2204      	movs	r2, #4
 8002b52:	4013      	ands	r3, r2
 8002b54:	d0e2      	beq.n	8002b1c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	22ff      	movs	r2, #255	@ 0xff
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2221      	movs	r2, #33	@ 0x21
 8002b62:	2101      	movs	r1, #1
 8002b64:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b004      	add	sp, #16
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	fffffbff 	.word	0xfffffbff
 8002b7c:	ffffbfff 	.word	0xffffbfff

08002b80 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002b88:	4b13      	ldr	r3, [pc, #76]	@ (8002bd8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8002b8a:	2280      	movs	r2, #128	@ 0x80
 8002b8c:	0352      	lsls	r2, r2, #13
 8002b8e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	01db      	lsls	r3, r3, #7
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d014      	beq.n	8002bc8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	2380      	movs	r3, #128	@ 0x80
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d00d      	beq.n	8002bc8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	22ff      	movs	r2, #255	@ 0xff
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4908      	ldr	r1, [pc, #32]	@ (8002bdc <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 f80c 	bl	8002be0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2221      	movs	r2, #33	@ 0x21
 8002bcc:	2101      	movs	r1, #1
 8002bce:	5499      	strb	r1, [r3, r2]
}
 8002bd0:	46c0      	nop			@ (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b002      	add	sp, #8
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40010400 	.word	0x40010400
 8002bdc:	fffffb7f 	.word	0xfffffb7f

08002be0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002be8:	46c0      	nop			@ (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b002      	add	sp, #8
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e044      	b.n	8002c8c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d107      	bne.n	8002c1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2278      	movs	r2, #120	@ 0x78
 8002c0e:	2100      	movs	r1, #0
 8002c10:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7fd ff65 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2224      	movs	r2, #36	@ 0x24
 8002c1e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	438a      	bics	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 fbce 	bl	80033d4 <UART_SetConfig>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e024      	b.n	8002c8c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f000 fe0b 	bl	8003868 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	490d      	ldr	r1, [pc, #52]	@ (8002c94 <HAL_UART_Init+0xa4>)
 8002c5e:	400a      	ands	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	212a      	movs	r1, #42	@ 0x2a
 8002c6e:	438a      	bics	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f000 fea3 	bl	80039d0 <UART_CheckIdleState>
 8002c8a:	0003      	movs	r3, r0
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b002      	add	sp, #8
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	ffffb7ff 	.word	0xffffb7ff

08002c98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	@ 0x28
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	1dbb      	adds	r3, r7, #6
 8002ca6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d000      	beq.n	8002cb2 <HAL_UART_Transmit+0x1a>
 8002cb0:	e08c      	b.n	8002dcc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_UART_Transmit+0x28>
 8002cb8:	1dbb      	adds	r3, r7, #6
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e084      	b.n	8002dce <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	2380      	movs	r3, #128	@ 0x80
 8002cca:	015b      	lsls	r3, r3, #5
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d109      	bne.n	8002ce4 <HAL_UART_Transmit+0x4c>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d001      	beq.n	8002ce4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e074      	b.n	8002dce <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2284      	movs	r2, #132	@ 0x84
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2221      	movs	r2, #33	@ 0x21
 8002cf0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cf2:	f7fe f871 	bl	8000dd8 <HAL_GetTick>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1dba      	adds	r2, r7, #6
 8002cfe:	2150      	movs	r1, #80	@ 0x50
 8002d00:	8812      	ldrh	r2, [r2, #0]
 8002d02:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1dba      	adds	r2, r7, #6
 8002d08:	2152      	movs	r1, #82	@ 0x52
 8002d0a:	8812      	ldrh	r2, [r2, #0]
 8002d0c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	2380      	movs	r3, #128	@ 0x80
 8002d14:	015b      	lsls	r3, r3, #5
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d108      	bne.n	8002d2c <HAL_UART_Transmit+0x94>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d104      	bne.n	8002d2c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	e003      	b.n	8002d34 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d34:	e02f      	b.n	8002d96 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	0013      	movs	r3, r2
 8002d40:	2200      	movs	r2, #0
 8002d42:	2180      	movs	r1, #128	@ 0x80
 8002d44:	f000 feec 	bl	8003b20 <UART_WaitOnFlagUntilTimeout>
 8002d48:	1e03      	subs	r3, r0, #0
 8002d4a:	d004      	beq.n	8002d56 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e03b      	b.n	8002dce <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	001a      	movs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	05d2      	lsls	r2, r2, #23
 8002d68:	0dd2      	lsrs	r2, r2, #23
 8002d6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	3302      	adds	r3, #2
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e007      	b.n	8002d84 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3301      	adds	r3, #1
 8002d82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2252      	movs	r2, #82	@ 0x52
 8002d88:	5a9b      	ldrh	r3, [r3, r2]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b299      	uxth	r1, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2252      	movs	r2, #82	@ 0x52
 8002d94:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2252      	movs	r2, #82	@ 0x52
 8002d9a:	5a9b      	ldrh	r3, [r3, r2]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1c9      	bne.n	8002d36 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	0013      	movs	r3, r2
 8002dac:	2200      	movs	r2, #0
 8002dae:	2140      	movs	r1, #64	@ 0x40
 8002db0:	f000 feb6 	bl	8003b20 <UART_WaitOnFlagUntilTimeout>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d004      	beq.n	8002dc2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e005      	b.n	8002dce <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
  }
}
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b008      	add	sp, #32
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b0ab      	sub	sp, #172	@ 0xac
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	22a4      	movs	r2, #164	@ 0xa4
 8002de8:	18b9      	adds	r1, r7, r2
 8002dea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	20a0      	movs	r0, #160	@ 0xa0
 8002df4:	1839      	adds	r1, r7, r0
 8002df6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	219c      	movs	r1, #156	@ 0x9c
 8002e00:	1879      	adds	r1, r7, r1
 8002e02:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e04:	0011      	movs	r1, r2
 8002e06:	18bb      	adds	r3, r7, r2
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a99      	ldr	r2, [pc, #612]	@ (8003070 <HAL_UART_IRQHandler+0x298>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2298      	movs	r2, #152	@ 0x98
 8002e10:	18bc      	adds	r4, r7, r2
 8002e12:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002e14:	18bb      	adds	r3, r7, r2
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d114      	bne.n	8002e46 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2220      	movs	r2, #32
 8002e22:	4013      	ands	r3, r2
 8002e24:	d00f      	beq.n	8002e46 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e26:	183b      	adds	r3, r7, r0
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d00a      	beq.n	8002e46 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <HAL_UART_IRQHandler+0x62>
 8002e38:	e2a0      	b.n	800337c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	0010      	movs	r0, r2
 8002e42:	4798      	blx	r3
      }
      return;
 8002e44:	e29a      	b.n	800337c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e46:	2398      	movs	r3, #152	@ 0x98
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d100      	bne.n	8002e52 <HAL_UART_IRQHandler+0x7a>
 8002e50:	e114      	b.n	800307c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e52:	239c      	movs	r3, #156	@ 0x9c
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d106      	bne.n	8002e6c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e5e:	23a0      	movs	r3, #160	@ 0xa0
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a83      	ldr	r2, [pc, #524]	@ (8003074 <HAL_UART_IRQHandler+0x29c>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	d100      	bne.n	8002e6c <HAL_UART_IRQHandler+0x94>
 8002e6a:	e107      	b.n	800307c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e6c:	23a4      	movs	r3, #164	@ 0xa4
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2201      	movs	r2, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	d012      	beq.n	8002e9e <HAL_UART_IRQHandler+0xc6>
 8002e78:	23a0      	movs	r3, #160	@ 0xa0
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	2380      	movs	r3, #128	@ 0x80
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4013      	ands	r3, r2
 8002e84:	d00b      	beq.n	8002e9e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2284      	movs	r2, #132	@ 0x84
 8002e92:	589b      	ldr	r3, [r3, r2]
 8002e94:	2201      	movs	r2, #1
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2184      	movs	r1, #132	@ 0x84
 8002e9c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e9e:	23a4      	movs	r3, #164	@ 0xa4
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d011      	beq.n	8002ece <HAL_UART_IRQHandler+0xf6>
 8002eaa:	239c      	movs	r3, #156	@ 0x9c
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d00b      	beq.n	8002ece <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2284      	movs	r2, #132	@ 0x84
 8002ec2:	589b      	ldr	r3, [r3, r2]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2184      	movs	r1, #132	@ 0x84
 8002ecc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ece:	23a4      	movs	r3, #164	@ 0xa4
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d011      	beq.n	8002efe <HAL_UART_IRQHandler+0x126>
 8002eda:	239c      	movs	r3, #156	@ 0x9c
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d00b      	beq.n	8002efe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2204      	movs	r2, #4
 8002eec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2284      	movs	r2, #132	@ 0x84
 8002ef2:	589b      	ldr	r3, [r3, r2]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2184      	movs	r1, #132	@ 0x84
 8002efc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002efe:	23a4      	movs	r3, #164	@ 0xa4
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2208      	movs	r2, #8
 8002f06:	4013      	ands	r3, r2
 8002f08:	d017      	beq.n	8002f3a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f0a:	23a0      	movs	r3, #160	@ 0xa0
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2220      	movs	r2, #32
 8002f12:	4013      	ands	r3, r2
 8002f14:	d105      	bne.n	8002f22 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f16:	239c      	movs	r3, #156	@ 0x9c
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f20:	d00b      	beq.n	8002f3a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2208      	movs	r2, #8
 8002f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2284      	movs	r2, #132	@ 0x84
 8002f2e:	589b      	ldr	r3, [r3, r2]
 8002f30:	2208      	movs	r2, #8
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2184      	movs	r1, #132	@ 0x84
 8002f38:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f3a:	23a4      	movs	r3, #164	@ 0xa4
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	2380      	movs	r3, #128	@ 0x80
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	4013      	ands	r3, r2
 8002f46:	d013      	beq.n	8002f70 <HAL_UART_IRQHandler+0x198>
 8002f48:	23a0      	movs	r3, #160	@ 0xa0
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	04db      	lsls	r3, r3, #19
 8002f52:	4013      	ands	r3, r2
 8002f54:	d00c      	beq.n	8002f70 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2280      	movs	r2, #128	@ 0x80
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2284      	movs	r2, #132	@ 0x84
 8002f64:	589b      	ldr	r3, [r3, r2]
 8002f66:	2220      	movs	r2, #32
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2184      	movs	r1, #132	@ 0x84
 8002f6e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2284      	movs	r2, #132	@ 0x84
 8002f74:	589b      	ldr	r3, [r3, r2]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d100      	bne.n	8002f7c <HAL_UART_IRQHandler+0x1a4>
 8002f7a:	e201      	b.n	8003380 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f7c:	23a4      	movs	r3, #164	@ 0xa4
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2220      	movs	r2, #32
 8002f84:	4013      	ands	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f88:	23a0      	movs	r3, #160	@ 0xa0
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	4013      	ands	r3, r2
 8002f92:	d008      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	0010      	movs	r0, r2
 8002fa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2284      	movs	r2, #132	@ 0x84
 8002faa:	589b      	ldr	r3, [r3, r2]
 8002fac:	2194      	movs	r1, #148	@ 0x94
 8002fae:	187a      	adds	r2, r7, r1
 8002fb0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2240      	movs	r2, #64	@ 0x40
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b40      	cmp	r3, #64	@ 0x40
 8002fbe:	d004      	beq.n	8002fca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2228      	movs	r2, #40	@ 0x28
 8002fc6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fc8:	d047      	beq.n	800305a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 fe11 	bl	8003bf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2240      	movs	r2, #64	@ 0x40
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b40      	cmp	r3, #64	@ 0x40
 8002fde:	d137      	bne.n	8003050 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002fe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe8:	2090      	movs	r0, #144	@ 0x90
 8002fea:	183a      	adds	r2, r7, r0
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	2301      	movs	r3, #1
 8002ff0:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ff4:	f383 8810 	msr	PRIMASK, r3
}
 8002ff8:	46c0      	nop			@ (mov r8, r8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2140      	movs	r1, #64	@ 0x40
 8003006:	438a      	bics	r2, r1
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	183b      	adds	r3, r7, r0
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003010:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003012:	f383 8810 	msr	PRIMASK, r3
}
 8003016:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800301c:	2b00      	cmp	r3, #0
 800301e:	d012      	beq.n	8003046 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003024:	4a14      	ldr	r2, [pc, #80]	@ (8003078 <HAL_UART_IRQHandler+0x2a0>)
 8003026:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800302c:	0018      	movs	r0, r3
 800302e:	f7fe fa39 	bl	80014a4 <HAL_DMA_Abort_IT>
 8003032:	1e03      	subs	r3, r0, #0
 8003034:	d01a      	beq.n	800306c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003040:	0018      	movs	r0, r3
 8003042:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003044:	e012      	b.n	800306c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	0018      	movs	r0, r3
 800304a:	f000 f9af 	bl	80033ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304e:	e00d      	b.n	800306c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	0018      	movs	r0, r3
 8003054:	f000 f9aa 	bl	80033ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003058:	e008      	b.n	800306c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0018      	movs	r0, r3
 800305e:	f000 f9a5 	bl	80033ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2284      	movs	r2, #132	@ 0x84
 8003066:	2100      	movs	r1, #0
 8003068:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800306a:	e189      	b.n	8003380 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800306c:	46c0      	nop			@ (mov r8, r8)
    return;
 800306e:	e187      	b.n	8003380 <HAL_UART_IRQHandler+0x5a8>
 8003070:	0000080f 	.word	0x0000080f
 8003074:	04000120 	.word	0x04000120
 8003078:	08003cbd 	.word	0x08003cbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003080:	2b01      	cmp	r3, #1
 8003082:	d000      	beq.n	8003086 <HAL_UART_IRQHandler+0x2ae>
 8003084:	e13b      	b.n	80032fe <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003086:	23a4      	movs	r3, #164	@ 0xa4
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	4013      	ands	r3, r2
 8003090:	d100      	bne.n	8003094 <HAL_UART_IRQHandler+0x2bc>
 8003092:	e134      	b.n	80032fe <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003094:	23a0      	movs	r3, #160	@ 0xa0
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2210      	movs	r2, #16
 800309c:	4013      	ands	r3, r2
 800309e:	d100      	bne.n	80030a2 <HAL_UART_IRQHandler+0x2ca>
 80030a0:	e12d      	b.n	80032fe <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2210      	movs	r2, #16
 80030a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2240      	movs	r2, #64	@ 0x40
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b40      	cmp	r3, #64	@ 0x40
 80030b6:	d000      	beq.n	80030ba <HAL_UART_IRQHandler+0x2e2>
 80030b8:	e0a1      	b.n	80031fe <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	217e      	movs	r1, #126	@ 0x7e
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d100      	bne.n	80030d2 <HAL_UART_IRQHandler+0x2fa>
 80030d0:	e158      	b.n	8003384 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2258      	movs	r2, #88	@ 0x58
 80030d6:	5a9b      	ldrh	r3, [r3, r2]
 80030d8:	187a      	adds	r2, r7, r1
 80030da:	8812      	ldrh	r2, [r2, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d300      	bcc.n	80030e2 <HAL_UART_IRQHandler+0x30a>
 80030e0:	e150      	b.n	8003384 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	187a      	adds	r2, r7, r1
 80030e6:	215a      	movs	r1, #90	@ 0x5a
 80030e8:	8812      	ldrh	r2, [r2, #0]
 80030ea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2220      	movs	r2, #32
 80030f6:	4013      	ands	r3, r2
 80030f8:	d16f      	bne.n	80031da <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030fa:	f3ef 8310 	mrs	r3, PRIMASK
 80030fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003102:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003104:	2301      	movs	r3, #1
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310a:	f383 8810 	msr	PRIMASK, r3
}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	499e      	ldr	r1, [pc, #632]	@ (8003394 <HAL_UART_IRQHandler+0x5bc>)
 800311c:	400a      	ands	r2, r1
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003122:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003126:	f383 8810 	msr	PRIMASK, r3
}
 800312a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312c:	f3ef 8310 	mrs	r3, PRIMASK
 8003130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003134:	677b      	str	r3, [r7, #116]	@ 0x74
 8003136:	2301      	movs	r3, #1
 8003138:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800313c:	f383 8810 	msr	PRIMASK, r3
}
 8003140:	46c0      	nop			@ (mov r8, r8)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2101      	movs	r1, #1
 800314e:	438a      	bics	r2, r1
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003154:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003158:	f383 8810 	msr	PRIMASK, r3
}
 800315c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800315e:	f3ef 8310 	mrs	r3, PRIMASK
 8003162:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003166:	673b      	str	r3, [r7, #112]	@ 0x70
 8003168:	2301      	movs	r3, #1
 800316a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800316e:	f383 8810 	msr	PRIMASK, r3
}
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	438a      	bics	r2, r1
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003186:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800318a:	f383 8810 	msr	PRIMASK, r3
}
 800318e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2280      	movs	r2, #128	@ 0x80
 8003194:	2120      	movs	r1, #32
 8003196:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319e:	f3ef 8310 	mrs	r3, PRIMASK
 80031a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80031a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031a8:	2301      	movs	r3, #1
 80031aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ae:	f383 8810 	msr	PRIMASK, r3
}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2110      	movs	r1, #16
 80031c0:	438a      	bics	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031ca:	f383 8810 	msr	PRIMASK, r3
}
 80031ce:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7fe f925 	bl	8001424 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2258      	movs	r2, #88	@ 0x58
 80031e4:	5a9a      	ldrh	r2, [r3, r2]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	215a      	movs	r1, #90	@ 0x5a
 80031ea:	5a5b      	ldrh	r3, [r3, r1]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	0011      	movs	r1, r2
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 f8e0 	bl	80033bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031fc:	e0c2      	b.n	8003384 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2258      	movs	r2, #88	@ 0x58
 8003202:	5a99      	ldrh	r1, [r3, r2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	225a      	movs	r2, #90	@ 0x5a
 8003208:	5a9b      	ldrh	r3, [r3, r2]
 800320a:	b29a      	uxth	r2, r3
 800320c:	208e      	movs	r0, #142	@ 0x8e
 800320e:	183b      	adds	r3, r7, r0
 8003210:	1a8a      	subs	r2, r1, r2
 8003212:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	225a      	movs	r2, #90	@ 0x5a
 8003218:	5a9b      	ldrh	r3, [r3, r2]
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d100      	bne.n	8003222 <HAL_UART_IRQHandler+0x44a>
 8003220:	e0b2      	b.n	8003388 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003222:	183b      	adds	r3, r7, r0
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d100      	bne.n	800322c <HAL_UART_IRQHandler+0x454>
 800322a:	e0ad      	b.n	8003388 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322c:	f3ef 8310 	mrs	r3, PRIMASK
 8003230:	60fb      	str	r3, [r7, #12]
  return(result);
 8003232:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003234:	2488      	movs	r4, #136	@ 0x88
 8003236:	193a      	adds	r2, r7, r4
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	2301      	movs	r3, #1
 800323c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f383 8810 	msr	PRIMASK, r3
}
 8003244:	46c0      	nop			@ (mov r8, r8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4951      	ldr	r1, [pc, #324]	@ (8003398 <HAL_UART_IRQHandler+0x5c0>)
 8003252:	400a      	ands	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	193b      	adds	r3, r7, r4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f383 8810 	msr	PRIMASK, r3
}
 8003262:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003264:	f3ef 8310 	mrs	r3, PRIMASK
 8003268:	61bb      	str	r3, [r7, #24]
  return(result);
 800326a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326c:	2484      	movs	r4, #132	@ 0x84
 800326e:	193a      	adds	r2, r7, r4
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	2301      	movs	r3, #1
 8003274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f383 8810 	msr	PRIMASK, r3
}
 800327c:	46c0      	nop			@ (mov r8, r8)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2101      	movs	r1, #1
 800328a:	438a      	bics	r2, r1
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	193b      	adds	r3, r7, r4
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	f383 8810 	msr	PRIMASK, r3
}
 800329a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2280      	movs	r2, #128	@ 0x80
 80032a0:	2120      	movs	r1, #32
 80032a2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b0:	f3ef 8310 	mrs	r3, PRIMASK
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b8:	2480      	movs	r4, #128	@ 0x80
 80032ba:	193a      	adds	r2, r7, r4
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	2301      	movs	r3, #1
 80032c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c4:	f383 8810 	msr	PRIMASK, r3
}
 80032c8:	46c0      	nop			@ (mov r8, r8)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2110      	movs	r1, #16
 80032d6:	438a      	bics	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e2:	f383 8810 	msr	PRIMASK, r3
}
 80032e6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032ee:	183b      	adds	r3, r7, r0
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0011      	movs	r1, r2
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 f860 	bl	80033bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032fc:	e044      	b.n	8003388 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032fe:	23a4      	movs	r3, #164	@ 0xa4
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	035b      	lsls	r3, r3, #13
 8003308:	4013      	ands	r3, r2
 800330a:	d010      	beq.n	800332e <HAL_UART_IRQHandler+0x556>
 800330c:	239c      	movs	r3, #156	@ 0x9c
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	03db      	lsls	r3, r3, #15
 8003316:	4013      	ands	r3, r2
 8003318:	d009      	beq.n	800332e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2280      	movs	r2, #128	@ 0x80
 8003320:	0352      	lsls	r2, r2, #13
 8003322:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	0018      	movs	r0, r3
 8003328:	f000 fd0a 	bl	8003d40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800332c:	e02f      	b.n	800338e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800332e:	23a4      	movs	r3, #164	@ 0xa4
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2280      	movs	r2, #128	@ 0x80
 8003336:	4013      	ands	r3, r2
 8003338:	d00f      	beq.n	800335a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800333a:	23a0      	movs	r3, #160	@ 0xa0
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2280      	movs	r2, #128	@ 0x80
 8003342:	4013      	ands	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01e      	beq.n	800338c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	0010      	movs	r0, r2
 8003356:	4798      	blx	r3
    }
    return;
 8003358:	e018      	b.n	800338c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800335a:	23a4      	movs	r3, #164	@ 0xa4
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2240      	movs	r2, #64	@ 0x40
 8003362:	4013      	ands	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_UART_IRQHandler+0x5b6>
 8003366:	23a0      	movs	r3, #160	@ 0xa0
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2240      	movs	r2, #64	@ 0x40
 800336e:	4013      	ands	r3, r2
 8003370:	d00d      	beq.n	800338e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	0018      	movs	r0, r3
 8003376:	f000 fcb8 	bl	8003cea <UART_EndTransmit_IT>
    return;
 800337a:	e008      	b.n	800338e <HAL_UART_IRQHandler+0x5b6>
      return;
 800337c:	46c0      	nop			@ (mov r8, r8)
 800337e:	e006      	b.n	800338e <HAL_UART_IRQHandler+0x5b6>
    return;
 8003380:	46c0      	nop			@ (mov r8, r8)
 8003382:	e004      	b.n	800338e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003384:	46c0      	nop			@ (mov r8, r8)
 8003386:	e002      	b.n	800338e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003388:	46c0      	nop			@ (mov r8, r8)
 800338a:	e000      	b.n	800338e <HAL_UART_IRQHandler+0x5b6>
    return;
 800338c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800338e:	46bd      	mov	sp, r7
 8003390:	b02b      	add	sp, #172	@ 0xac
 8003392:	bd90      	pop	{r4, r7, pc}
 8003394:	fffffeff 	.word	0xfffffeff
 8003398:	fffffedf 	.word	0xfffffedf

0800339c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033a4:	46c0      	nop			@ (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033b4:	46c0      	nop			@ (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b002      	add	sp, #8
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	000a      	movs	r2, r1
 80033c6:	1cbb      	adds	r3, r7, #2
 80033c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b002      	add	sp, #8
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d4:	b5b0      	push	{r4, r5, r7, lr}
 80033d6:	b08e      	sub	sp, #56	@ 0x38
 80033d8:	af00      	add	r7, sp, #0
 80033da:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033dc:	231a      	movs	r3, #26
 80033de:	2218      	movs	r2, #24
 80033e0:	189b      	adds	r3, r3, r2
 80033e2:	19db      	adds	r3, r3, r7
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4ab4      	ldr	r2, [pc, #720]	@ (80036d8 <UART_SetConfig+0x304>)
 8003408:	4013      	ands	r3, r2
 800340a:	0019      	movs	r1, r3
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4aaf      	ldr	r2, [pc, #700]	@ (80036dc <UART_SetConfig+0x308>)
 800341e:	4013      	ands	r3, r2
 8003420:	0019      	movs	r1, r3
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4aa9      	ldr	r2, [pc, #676]	@ (80036e0 <UART_SetConfig+0x30c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003444:	4313      	orrs	r3, r2
 8003446:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	4aa5      	ldr	r2, [pc, #660]	@ (80036e4 <UART_SetConfig+0x310>)
 8003450:	4013      	ands	r3, r2
 8003452:	0019      	movs	r1, r3
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800345a:	430a      	orrs	r2, r1
 800345c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4aa1      	ldr	r2, [pc, #644]	@ (80036e8 <UART_SetConfig+0x314>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d131      	bne.n	80034cc <UART_SetConfig+0xf8>
 8003468:	4ba0      	ldr	r3, [pc, #640]	@ (80036ec <UART_SetConfig+0x318>)
 800346a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346c:	220c      	movs	r2, #12
 800346e:	4013      	ands	r3, r2
 8003470:	2b0c      	cmp	r3, #12
 8003472:	d01d      	beq.n	80034b0 <UART_SetConfig+0xdc>
 8003474:	d823      	bhi.n	80034be <UART_SetConfig+0xea>
 8003476:	2b08      	cmp	r3, #8
 8003478:	d00c      	beq.n	8003494 <UART_SetConfig+0xc0>
 800347a:	d820      	bhi.n	80034be <UART_SetConfig+0xea>
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <UART_SetConfig+0xb2>
 8003480:	2b04      	cmp	r3, #4
 8003482:	d00e      	beq.n	80034a2 <UART_SetConfig+0xce>
 8003484:	e01b      	b.n	80034be <UART_SetConfig+0xea>
 8003486:	231b      	movs	r3, #27
 8003488:	2218      	movs	r2, #24
 800348a:	189b      	adds	r3, r3, r2
 800348c:	19db      	adds	r3, r3, r7
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e065      	b.n	8003560 <UART_SetConfig+0x18c>
 8003494:	231b      	movs	r3, #27
 8003496:	2218      	movs	r2, #24
 8003498:	189b      	adds	r3, r3, r2
 800349a:	19db      	adds	r3, r3, r7
 800349c:	2202      	movs	r2, #2
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	e05e      	b.n	8003560 <UART_SetConfig+0x18c>
 80034a2:	231b      	movs	r3, #27
 80034a4:	2218      	movs	r2, #24
 80034a6:	189b      	adds	r3, r3, r2
 80034a8:	19db      	adds	r3, r3, r7
 80034aa:	2204      	movs	r2, #4
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e057      	b.n	8003560 <UART_SetConfig+0x18c>
 80034b0:	231b      	movs	r3, #27
 80034b2:	2218      	movs	r2, #24
 80034b4:	189b      	adds	r3, r3, r2
 80034b6:	19db      	adds	r3, r3, r7
 80034b8:	2208      	movs	r2, #8
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	e050      	b.n	8003560 <UART_SetConfig+0x18c>
 80034be:	231b      	movs	r3, #27
 80034c0:	2218      	movs	r2, #24
 80034c2:	189b      	adds	r3, r3, r2
 80034c4:	19db      	adds	r3, r3, r7
 80034c6:	2210      	movs	r2, #16
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e049      	b.n	8003560 <UART_SetConfig+0x18c>
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a83      	ldr	r2, [pc, #524]	@ (80036e0 <UART_SetConfig+0x30c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d13e      	bne.n	8003554 <UART_SetConfig+0x180>
 80034d6:	4b85      	ldr	r3, [pc, #532]	@ (80036ec <UART_SetConfig+0x318>)
 80034d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034da:	23c0      	movs	r3, #192	@ 0xc0
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	4013      	ands	r3, r2
 80034e0:	22c0      	movs	r2, #192	@ 0xc0
 80034e2:	0112      	lsls	r2, r2, #4
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d027      	beq.n	8003538 <UART_SetConfig+0x164>
 80034e8:	22c0      	movs	r2, #192	@ 0xc0
 80034ea:	0112      	lsls	r2, r2, #4
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d82a      	bhi.n	8003546 <UART_SetConfig+0x172>
 80034f0:	2280      	movs	r2, #128	@ 0x80
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d011      	beq.n	800351c <UART_SetConfig+0x148>
 80034f8:	2280      	movs	r2, #128	@ 0x80
 80034fa:	0112      	lsls	r2, r2, #4
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d822      	bhi.n	8003546 <UART_SetConfig+0x172>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <UART_SetConfig+0x13a>
 8003504:	2280      	movs	r2, #128	@ 0x80
 8003506:	00d2      	lsls	r2, r2, #3
 8003508:	4293      	cmp	r3, r2
 800350a:	d00e      	beq.n	800352a <UART_SetConfig+0x156>
 800350c:	e01b      	b.n	8003546 <UART_SetConfig+0x172>
 800350e:	231b      	movs	r3, #27
 8003510:	2218      	movs	r2, #24
 8003512:	189b      	adds	r3, r3, r2
 8003514:	19db      	adds	r3, r3, r7
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	e021      	b.n	8003560 <UART_SetConfig+0x18c>
 800351c:	231b      	movs	r3, #27
 800351e:	2218      	movs	r2, #24
 8003520:	189b      	adds	r3, r3, r2
 8003522:	19db      	adds	r3, r3, r7
 8003524:	2202      	movs	r2, #2
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e01a      	b.n	8003560 <UART_SetConfig+0x18c>
 800352a:	231b      	movs	r3, #27
 800352c:	2218      	movs	r2, #24
 800352e:	189b      	adds	r3, r3, r2
 8003530:	19db      	adds	r3, r3, r7
 8003532:	2204      	movs	r2, #4
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e013      	b.n	8003560 <UART_SetConfig+0x18c>
 8003538:	231b      	movs	r3, #27
 800353a:	2218      	movs	r2, #24
 800353c:	189b      	adds	r3, r3, r2
 800353e:	19db      	adds	r3, r3, r7
 8003540:	2208      	movs	r2, #8
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e00c      	b.n	8003560 <UART_SetConfig+0x18c>
 8003546:	231b      	movs	r3, #27
 8003548:	2218      	movs	r2, #24
 800354a:	189b      	adds	r3, r3, r2
 800354c:	19db      	adds	r3, r3, r7
 800354e:	2210      	movs	r2, #16
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e005      	b.n	8003560 <UART_SetConfig+0x18c>
 8003554:	231b      	movs	r3, #27
 8003556:	2218      	movs	r2, #24
 8003558:	189b      	adds	r3, r3, r2
 800355a:	19db      	adds	r3, r3, r7
 800355c:	2210      	movs	r2, #16
 800355e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a5e      	ldr	r2, [pc, #376]	@ (80036e0 <UART_SetConfig+0x30c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d000      	beq.n	800356c <UART_SetConfig+0x198>
 800356a:	e084      	b.n	8003676 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800356c:	231b      	movs	r3, #27
 800356e:	2218      	movs	r2, #24
 8003570:	189b      	adds	r3, r3, r2
 8003572:	19db      	adds	r3, r3, r7
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b08      	cmp	r3, #8
 8003578:	d01d      	beq.n	80035b6 <UART_SetConfig+0x1e2>
 800357a:	dc20      	bgt.n	80035be <UART_SetConfig+0x1ea>
 800357c:	2b04      	cmp	r3, #4
 800357e:	d015      	beq.n	80035ac <UART_SetConfig+0x1d8>
 8003580:	dc1d      	bgt.n	80035be <UART_SetConfig+0x1ea>
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <UART_SetConfig+0x1b8>
 8003586:	2b02      	cmp	r3, #2
 8003588:	d005      	beq.n	8003596 <UART_SetConfig+0x1c2>
 800358a:	e018      	b.n	80035be <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800358c:	f7fe ff32 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 8003590:	0003      	movs	r3, r0
 8003592:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003594:	e01c      	b.n	80035d0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003596:	4b55      	ldr	r3, [pc, #340]	@ (80036ec <UART_SetConfig+0x318>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2210      	movs	r2, #16
 800359c:	4013      	ands	r3, r2
 800359e:	d002      	beq.n	80035a6 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035a0:	4b53      	ldr	r3, [pc, #332]	@ (80036f0 <UART_SetConfig+0x31c>)
 80035a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035a4:	e014      	b.n	80035d0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80035a6:	4b53      	ldr	r3, [pc, #332]	@ (80036f4 <UART_SetConfig+0x320>)
 80035a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035aa:	e011      	b.n	80035d0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ac:	f7fe fe72 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 80035b0:	0003      	movs	r3, r0
 80035b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035b4:	e00c      	b.n	80035d0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035b6:	2380      	movs	r3, #128	@ 0x80
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035bc:	e008      	b.n	80035d0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80035c2:	231a      	movs	r3, #26
 80035c4:	2218      	movs	r2, #24
 80035c6:	189b      	adds	r3, r3, r2
 80035c8:	19db      	adds	r3, r3, r7
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
        break;
 80035ce:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d100      	bne.n	80035d8 <UART_SetConfig+0x204>
 80035d6:	e12f      	b.n	8003838 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	0013      	movs	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	189b      	adds	r3, r3, r2
 80035e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d305      	bcc.n	80035f4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d906      	bls.n	8003602 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80035f4:	231a      	movs	r3, #26
 80035f6:	2218      	movs	r2, #24
 80035f8:	189b      	adds	r3, r3, r2
 80035fa:	19db      	adds	r3, r3, r7
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e11a      	b.n	8003838 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	6939      	ldr	r1, [r7, #16]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	000b      	movs	r3, r1
 8003610:	0e1b      	lsrs	r3, r3, #24
 8003612:	0010      	movs	r0, r2
 8003614:	0205      	lsls	r5, r0, #8
 8003616:	431d      	orrs	r5, r3
 8003618:	000b      	movs	r3, r1
 800361a:	021c      	lsls	r4, r3, #8
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68b8      	ldr	r0, [r7, #8]
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	1900      	adds	r0, r0, r4
 800362e:	4169      	adcs	r1, r5
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f7fc fdf7 	bl	8000230 <__aeabi_uldivmod>
 8003642:	0002      	movs	r2, r0
 8003644:	000b      	movs	r3, r1
 8003646:	0013      	movs	r3, r2
 8003648:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800364a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800364c:	23c0      	movs	r3, #192	@ 0xc0
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	429a      	cmp	r2, r3
 8003652:	d309      	bcc.n	8003668 <UART_SetConfig+0x294>
 8003654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003656:	2380      	movs	r3, #128	@ 0x80
 8003658:	035b      	lsls	r3, r3, #13
 800365a:	429a      	cmp	r2, r3
 800365c:	d204      	bcs.n	8003668 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	e0e7      	b.n	8003838 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003668:	231a      	movs	r3, #26
 800366a:	2218      	movs	r2, #24
 800366c:	189b      	adds	r3, r3, r2
 800366e:	19db      	adds	r3, r3, r7
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e0e0      	b.n	8003838 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	69da      	ldr	r2, [r3, #28]
 800367a:	2380      	movs	r3, #128	@ 0x80
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	429a      	cmp	r2, r3
 8003680:	d000      	beq.n	8003684 <UART_SetConfig+0x2b0>
 8003682:	e082      	b.n	800378a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003684:	231b      	movs	r3, #27
 8003686:	2218      	movs	r2, #24
 8003688:	189b      	adds	r3, r3, r2
 800368a:	19db      	adds	r3, r3, r7
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b08      	cmp	r3, #8
 8003690:	d834      	bhi.n	80036fc <UART_SetConfig+0x328>
 8003692:	009a      	lsls	r2, r3, #2
 8003694:	4b18      	ldr	r3, [pc, #96]	@ (80036f8 <UART_SetConfig+0x324>)
 8003696:	18d3      	adds	r3, r2, r3
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800369c:	f7fe feaa 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 80036a0:	0003      	movs	r3, r0
 80036a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036a4:	e033      	b.n	800370e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a6:	f7fe febb 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 80036aa:	0003      	movs	r3, r0
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036ae:	e02e      	b.n	800370e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036b0:	4b0e      	ldr	r3, [pc, #56]	@ (80036ec <UART_SetConfig+0x318>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2210      	movs	r2, #16
 80036b6:	4013      	ands	r3, r2
 80036b8:	d002      	beq.n	80036c0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80036ba:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <UART_SetConfig+0x31c>)
 80036bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80036be:	e026      	b.n	800370e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80036c0:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <UART_SetConfig+0x320>)
 80036c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036c4:	e023      	b.n	800370e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036c6:	f7fe fde5 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 80036ca:	0003      	movs	r3, r0
 80036cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036ce:	e01e      	b.n	800370e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d0:	2380      	movs	r3, #128	@ 0x80
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036d6:	e01a      	b.n	800370e <UART_SetConfig+0x33a>
 80036d8:	efff69f3 	.word	0xefff69f3
 80036dc:	ffffcfff 	.word	0xffffcfff
 80036e0:	40004800 	.word	0x40004800
 80036e4:	fffff4ff 	.word	0xfffff4ff
 80036e8:	40004400 	.word	0x40004400
 80036ec:	40021000 	.word	0x40021000
 80036f0:	003d0900 	.word	0x003d0900
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	08003e44 	.word	0x08003e44
      default:
        pclk = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003700:	231a      	movs	r3, #26
 8003702:	2218      	movs	r2, #24
 8003704:	189b      	adds	r3, r3, r2
 8003706:	19db      	adds	r3, r3, r7
 8003708:	2201      	movs	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
        break;
 800370c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800370e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d100      	bne.n	8003716 <UART_SetConfig+0x342>
 8003714:	e090      	b.n	8003838 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003718:	005a      	lsls	r2, r3, #1
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	18d2      	adds	r2, r2, r3
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	0019      	movs	r1, r3
 8003728:	0010      	movs	r0, r2
 800372a:	f7fc fcf5 	bl	8000118 <__udivsi3>
 800372e:	0003      	movs	r3, r0
 8003730:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003734:	2b0f      	cmp	r3, #15
 8003736:	d921      	bls.n	800377c <UART_SetConfig+0x3a8>
 8003738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800373a:	2380      	movs	r3, #128	@ 0x80
 800373c:	025b      	lsls	r3, r3, #9
 800373e:	429a      	cmp	r2, r3
 8003740:	d21c      	bcs.n	800377c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003744:	b29a      	uxth	r2, r3
 8003746:	200e      	movs	r0, #14
 8003748:	2418      	movs	r4, #24
 800374a:	1903      	adds	r3, r0, r4
 800374c:	19db      	adds	r3, r3, r7
 800374e:	210f      	movs	r1, #15
 8003750:	438a      	bics	r2, r1
 8003752:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	b29b      	uxth	r3, r3
 800375a:	2207      	movs	r2, #7
 800375c:	4013      	ands	r3, r2
 800375e:	b299      	uxth	r1, r3
 8003760:	1903      	adds	r3, r0, r4
 8003762:	19db      	adds	r3, r3, r7
 8003764:	1902      	adds	r2, r0, r4
 8003766:	19d2      	adds	r2, r2, r7
 8003768:	8812      	ldrh	r2, [r2, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	1902      	adds	r2, r0, r4
 8003774:	19d2      	adds	r2, r2, r7
 8003776:	8812      	ldrh	r2, [r2, #0]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	e05d      	b.n	8003838 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800377c:	231a      	movs	r3, #26
 800377e:	2218      	movs	r2, #24
 8003780:	189b      	adds	r3, r3, r2
 8003782:	19db      	adds	r3, r3, r7
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	e056      	b.n	8003838 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800378a:	231b      	movs	r3, #27
 800378c:	2218      	movs	r2, #24
 800378e:	189b      	adds	r3, r3, r2
 8003790:	19db      	adds	r3, r3, r7
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d822      	bhi.n	80037de <UART_SetConfig+0x40a>
 8003798:	009a      	lsls	r2, r3, #2
 800379a:	4b2f      	ldr	r3, [pc, #188]	@ (8003858 <UART_SetConfig+0x484>)
 800379c:	18d3      	adds	r3, r2, r3
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a2:	f7fe fe27 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 80037a6:	0003      	movs	r3, r0
 80037a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037aa:	e021      	b.n	80037f0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7fe fe38 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 80037b0:	0003      	movs	r3, r0
 80037b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037b4:	e01c      	b.n	80037f0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037b6:	4b29      	ldr	r3, [pc, #164]	@ (800385c <UART_SetConfig+0x488>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2210      	movs	r2, #16
 80037bc:	4013      	ands	r3, r2
 80037be:	d002      	beq.n	80037c6 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80037c0:	4b27      	ldr	r3, [pc, #156]	@ (8003860 <UART_SetConfig+0x48c>)
 80037c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80037c4:	e014      	b.n	80037f0 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80037c6:	4b27      	ldr	r3, [pc, #156]	@ (8003864 <UART_SetConfig+0x490>)
 80037c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037ca:	e011      	b.n	80037f0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037cc:	f7fe fd62 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 80037d0:	0003      	movs	r3, r0
 80037d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037d4:	e00c      	b.n	80037f0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d6:	2380      	movs	r3, #128	@ 0x80
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037dc:	e008      	b.n	80037f0 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80037e2:	231a      	movs	r3, #26
 80037e4:	2218      	movs	r2, #24
 80037e6:	189b      	adds	r3, r3, r2
 80037e8:	19db      	adds	r3, r3, r7
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
        break;
 80037ee:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80037f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d020      	beq.n	8003838 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	085a      	lsrs	r2, r3, #1
 80037fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fe:	18d2      	adds	r2, r2, r3
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	0019      	movs	r1, r3
 8003806:	0010      	movs	r0, r2
 8003808:	f7fc fc86 	bl	8000118 <__udivsi3>
 800380c:	0003      	movs	r3, r0
 800380e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003812:	2b0f      	cmp	r3, #15
 8003814:	d90a      	bls.n	800382c <UART_SetConfig+0x458>
 8003816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003818:	2380      	movs	r3, #128	@ 0x80
 800381a:	025b      	lsls	r3, r3, #9
 800381c:	429a      	cmp	r2, r3
 800381e:	d205      	bcs.n	800382c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	b29a      	uxth	r2, r3
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	e005      	b.n	8003838 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800382c:	231a      	movs	r3, #26
 800382e:	2218      	movs	r2, #24
 8003830:	189b      	adds	r3, r3, r2
 8003832:	19db      	adds	r3, r3, r7
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2200      	movs	r2, #0
 800383c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	2200      	movs	r2, #0
 8003842:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003844:	231a      	movs	r3, #26
 8003846:	2218      	movs	r2, #24
 8003848:	189b      	adds	r3, r3, r2
 800384a:	19db      	adds	r3, r3, r7
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b00e      	add	sp, #56	@ 0x38
 8003854:	bdb0      	pop	{r4, r5, r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	08003e68 	.word	0x08003e68
 800385c:	40021000 	.word	0x40021000
 8003860:	003d0900 	.word	0x003d0900
 8003864:	00f42400 	.word	0x00f42400

08003868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	2201      	movs	r2, #1
 8003876:	4013      	ands	r3, r2
 8003878:	d00b      	beq.n	8003892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a4a      	ldr	r2, [pc, #296]	@ (80039ac <UART_AdvFeatureConfig+0x144>)
 8003882:	4013      	ands	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	2202      	movs	r2, #2
 8003898:	4013      	ands	r3, r2
 800389a:	d00b      	beq.n	80038b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4a43      	ldr	r2, [pc, #268]	@ (80039b0 <UART_AdvFeatureConfig+0x148>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	2204      	movs	r2, #4
 80038ba:	4013      	ands	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4a3b      	ldr	r2, [pc, #236]	@ (80039b4 <UART_AdvFeatureConfig+0x14c>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	0019      	movs	r1, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	2208      	movs	r2, #8
 80038dc:	4013      	ands	r3, r2
 80038de:	d00b      	beq.n	80038f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4a34      	ldr	r2, [pc, #208]	@ (80039b8 <UART_AdvFeatureConfig+0x150>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	0019      	movs	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	2210      	movs	r2, #16
 80038fe:	4013      	ands	r3, r2
 8003900:	d00b      	beq.n	800391a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4a2c      	ldr	r2, [pc, #176]	@ (80039bc <UART_AdvFeatureConfig+0x154>)
 800390a:	4013      	ands	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391e:	2220      	movs	r2, #32
 8003920:	4013      	ands	r3, r2
 8003922:	d00b      	beq.n	800393c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	4a25      	ldr	r2, [pc, #148]	@ (80039c0 <UART_AdvFeatureConfig+0x158>)
 800392c:	4013      	ands	r3, r2
 800392e:	0019      	movs	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	2240      	movs	r2, #64	@ 0x40
 8003942:	4013      	ands	r3, r2
 8003944:	d01d      	beq.n	8003982 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a1d      	ldr	r2, [pc, #116]	@ (80039c4 <UART_AdvFeatureConfig+0x15c>)
 800394e:	4013      	ands	r3, r2
 8003950:	0019      	movs	r1, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003962:	2380      	movs	r3, #128	@ 0x80
 8003964:	035b      	lsls	r3, r3, #13
 8003966:	429a      	cmp	r2, r3
 8003968:	d10b      	bne.n	8003982 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4a15      	ldr	r2, [pc, #84]	@ (80039c8 <UART_AdvFeatureConfig+0x160>)
 8003972:	4013      	ands	r3, r2
 8003974:	0019      	movs	r1, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	2280      	movs	r2, #128	@ 0x80
 8003988:	4013      	ands	r3, r2
 800398a:	d00b      	beq.n	80039a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4a0e      	ldr	r2, [pc, #56]	@ (80039cc <UART_AdvFeatureConfig+0x164>)
 8003994:	4013      	ands	r3, r2
 8003996:	0019      	movs	r1, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]
  }
}
 80039a4:	46c0      	nop			@ (mov r8, r8)
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b002      	add	sp, #8
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	fffdffff 	.word	0xfffdffff
 80039b0:	fffeffff 	.word	0xfffeffff
 80039b4:	fffbffff 	.word	0xfffbffff
 80039b8:	ffff7fff 	.word	0xffff7fff
 80039bc:	ffffefff 	.word	0xffffefff
 80039c0:	ffffdfff 	.word	0xffffdfff
 80039c4:	ffefffff 	.word	0xffefffff
 80039c8:	ff9fffff 	.word	0xff9fffff
 80039cc:	fff7ffff 	.word	0xfff7ffff

080039d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b092      	sub	sp, #72	@ 0x48
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2284      	movs	r2, #132	@ 0x84
 80039dc:	2100      	movs	r1, #0
 80039de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039e0:	f7fd f9fa 	bl	8000dd8 <HAL_GetTick>
 80039e4:	0003      	movs	r3, r0
 80039e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2208      	movs	r2, #8
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d12c      	bne.n	8003a50 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f8:	2280      	movs	r2, #128	@ 0x80
 80039fa:	0391      	lsls	r1, r2, #14
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4a46      	ldr	r2, [pc, #280]	@ (8003b18 <UART_CheckIdleState+0x148>)
 8003a00:	9200      	str	r2, [sp, #0]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f000 f88c 	bl	8003b20 <UART_WaitOnFlagUntilTimeout>
 8003a08:	1e03      	subs	r3, r0, #0
 8003a0a:	d021      	beq.n	8003a50 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a16:	2301      	movs	r3, #1
 8003a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1c:	f383 8810 	msr	PRIMASK, r3
}
 8003a20:	46c0      	nop			@ (mov r8, r8)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2180      	movs	r1, #128	@ 0x80
 8003a2e:	438a      	bics	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a38:	f383 8810 	msr	PRIMASK, r3
}
 8003a3c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2278      	movs	r2, #120	@ 0x78
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e05f      	b.n	8003b10 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2204      	movs	r2, #4
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d146      	bne.n	8003aec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a60:	2280      	movs	r2, #128	@ 0x80
 8003a62:	03d1      	lsls	r1, r2, #15
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4a2c      	ldr	r2, [pc, #176]	@ (8003b18 <UART_CheckIdleState+0x148>)
 8003a68:	9200      	str	r2, [sp, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f000 f858 	bl	8003b20 <UART_WaitOnFlagUntilTimeout>
 8003a70:	1e03      	subs	r3, r0, #0
 8003a72:	d03b      	beq.n	8003aec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a74:	f3ef 8310 	mrs	r3, PRIMASK
 8003a78:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a7e:	2301      	movs	r3, #1
 8003a80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f383 8810 	msr	PRIMASK, r3
}
 8003a88:	46c0      	nop			@ (mov r8, r8)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4921      	ldr	r1, [pc, #132]	@ (8003b1c <UART_CheckIdleState+0x14c>)
 8003a96:	400a      	ands	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f383 8810 	msr	PRIMASK, r3
}
 8003aa4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aaa:	61bb      	str	r3, [r7, #24]
  return(result);
 8003aac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f383 8810 	msr	PRIMASK, r3
}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	438a      	bics	r2, r1
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2280      	movs	r2, #128	@ 0x80
 8003adc:	2120      	movs	r1, #32
 8003ade:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2278      	movs	r2, #120	@ 0x78
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e011      	b.n	8003b10 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2280      	movs	r2, #128	@ 0x80
 8003af6:	2120      	movs	r1, #32
 8003af8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2278      	movs	r2, #120	@ 0x78
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	0018      	movs	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b010      	add	sp, #64	@ 0x40
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	01ffffff 	.word	0x01ffffff
 8003b1c:	fffffedf 	.word	0xfffffedf

08003b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	1dfb      	adds	r3, r7, #7
 8003b2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b30:	e04b      	b.n	8003bca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	3301      	adds	r3, #1
 8003b36:	d048      	beq.n	8003bca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b38:	f7fd f94e 	bl	8000dd8 <HAL_GetTick>
 8003b3c:	0002      	movs	r2, r0
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d302      	bcc.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e04b      	b.n	8003bea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d035      	beq.n	8003bca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	2208      	movs	r2, #8
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d111      	bne.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2208      	movs	r2, #8
 8003b72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 f83c 	bl	8003bf4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2284      	movs	r2, #132	@ 0x84
 8003b80:	2108      	movs	r1, #8
 8003b82:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2278      	movs	r2, #120	@ 0x78
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e02c      	b.n	8003bea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69da      	ldr	r2, [r3, #28]
 8003b96:	2380      	movs	r3, #128	@ 0x80
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	2380      	movs	r3, #128	@ 0x80
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d112      	bne.n	8003bca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2280      	movs	r2, #128	@ 0x80
 8003baa:	0112      	lsls	r2, r2, #4
 8003bac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f000 f81f 	bl	8003bf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2284      	movs	r2, #132	@ 0x84
 8003bba:	2120      	movs	r1, #32
 8003bbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2278      	movs	r2, #120	@ 0x78
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e00f      	b.n	8003bea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	425a      	negs	r2, r3
 8003bda:	4153      	adcs	r3, r2
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	001a      	movs	r2, r3
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d0a4      	beq.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b004      	add	sp, #16
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08e      	sub	sp, #56	@ 0x38
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8003c00:	617b      	str	r3, [r7, #20]
  return(result);
 8003c02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c06:	2301      	movs	r3, #1
 8003c08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f383 8810 	msr	PRIMASK, r3
}
 8003c10:	46c0      	nop			@ (mov r8, r8)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4926      	ldr	r1, [pc, #152]	@ (8003cb8 <UART_EndRxTransfer+0xc4>)
 8003c1e:	400a      	ands	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f383 8810 	msr	PRIMASK, r3
}
 8003c2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c32:	623b      	str	r3, [r7, #32]
  return(result);
 8003c34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c36:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c38:	2301      	movs	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	46c0      	nop			@ (mov r8, r8)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2101      	movs	r1, #1
 8003c50:	438a      	bics	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5a:	f383 8810 	msr	PRIMASK, r3
}
 8003c5e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d118      	bne.n	8003c9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c68:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c72:	2301      	movs	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f383 8810 	msr	PRIMASK, r3
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2110      	movs	r1, #16
 8003c8a:	438a      	bics	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f383 8810 	msr	PRIMASK, r3
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2280      	movs	r2, #128	@ 0x80
 8003c9e:	2120      	movs	r1, #32
 8003ca0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cae:	46c0      	nop			@ (mov r8, r8)
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b00e      	add	sp, #56	@ 0x38
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	fffffedf 	.word	0xfffffedf

08003cbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	225a      	movs	r2, #90	@ 0x5a
 8003cce:	2100      	movs	r1, #0
 8003cd0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2252      	movs	r2, #82	@ 0x52
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7ff fb65 	bl	80033ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b086      	sub	sp, #24
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f383 8810 	msr	PRIMASK, r3
}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2140      	movs	r1, #64	@ 0x40
 8003d14:	438a      	bics	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f383 8810 	msr	PRIMASK, r3
}
 8003d22:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7ff fb32 	bl	800339c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d38:	46c0      	nop			@ (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b006      	add	sp, #24
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d48:	46c0      	nop			@ (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b002      	add	sp, #8
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <memset>:
 8003d50:	0003      	movs	r3, r0
 8003d52:	1882      	adds	r2, r0, r2
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d100      	bne.n	8003d5a <memset+0xa>
 8003d58:	4770      	bx	lr
 8003d5a:	7019      	strb	r1, [r3, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	e7f9      	b.n	8003d54 <memset+0x4>

08003d60 <__libc_init_array>:
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	2600      	movs	r6, #0
 8003d64:	4c0c      	ldr	r4, [pc, #48]	@ (8003d98 <__libc_init_array+0x38>)
 8003d66:	4d0d      	ldr	r5, [pc, #52]	@ (8003d9c <__libc_init_array+0x3c>)
 8003d68:	1b64      	subs	r4, r4, r5
 8003d6a:	10a4      	asrs	r4, r4, #2
 8003d6c:	42a6      	cmp	r6, r4
 8003d6e:	d109      	bne.n	8003d84 <__libc_init_array+0x24>
 8003d70:	2600      	movs	r6, #0
 8003d72:	f000 f819 	bl	8003da8 <_init>
 8003d76:	4c0a      	ldr	r4, [pc, #40]	@ (8003da0 <__libc_init_array+0x40>)
 8003d78:	4d0a      	ldr	r5, [pc, #40]	@ (8003da4 <__libc_init_array+0x44>)
 8003d7a:	1b64      	subs	r4, r4, r5
 8003d7c:	10a4      	asrs	r4, r4, #2
 8003d7e:	42a6      	cmp	r6, r4
 8003d80:	d105      	bne.n	8003d8e <__libc_init_array+0x2e>
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
 8003d84:	00b3      	lsls	r3, r6, #2
 8003d86:	58eb      	ldr	r3, [r5, r3]
 8003d88:	4798      	blx	r3
 8003d8a:	3601      	adds	r6, #1
 8003d8c:	e7ee      	b.n	8003d6c <__libc_init_array+0xc>
 8003d8e:	00b3      	lsls	r3, r6, #2
 8003d90:	58eb      	ldr	r3, [r5, r3]
 8003d92:	4798      	blx	r3
 8003d94:	3601      	adds	r6, #1
 8003d96:	e7f2      	b.n	8003d7e <__libc_init_array+0x1e>
 8003d98:	08003e94 	.word	0x08003e94
 8003d9c:	08003e94 	.word	0x08003e94
 8003da0:	08003e98 	.word	0x08003e98
 8003da4:	08003e94 	.word	0x08003e94

08003da8 <_init>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr

08003db4 <_fini>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dba:	bc08      	pop	{r3}
 8003dbc:	469e      	mov	lr, r3
 8003dbe:	4770      	bx	lr
